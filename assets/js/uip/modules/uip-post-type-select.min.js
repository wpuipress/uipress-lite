export function moduleData(){return{props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function},data:function(){return{thisSearchInput:"",options:[],loading:!1,selectedOptions:this.selected,ui:{dropOpen:!1}}},inject:["uipress"],watch:{selected:{handler(e,i){JSON.stringify(this.selected)!=JSON.stringify(this.selectedOptions)&&(this.selectedOptions=this.selected)},deep:!0},selectedOptions:{handler(e,i){this.updateSelected(this.selectedOptions)},deep:!0}},computed:{formattedOptions(){return this.options},returnLoading(){return this.loading}},methods:{getPostTypes(){if(self=this,this.options.length>0)return void console.log("saved");self.loading=!0;let e=new FormData;e.append("action","uip_get_post_types"),e.append("security",uip_ajax.security),self.uipress.callServer(uip_ajax.ajax_url,e).then(e=>{if(e.error)return self.uipress.notify(e.error,"error"),void self.stopLoading();this.options=e.postTypes,this.stopLoading()})},stopLoading(){this.loading=!1},addSelected(e,i){this.ifSelected(e,i)?this.removeSelected(e,i):1==this.single?i[0]=e:i.push(e)},removeSelected(e,i){let n=i.indexOf(e);n>-1&&(i=i.splice(n,1))},removeByIndex(e){this.selectedOptions.splice(e,1)},ifSelected:(e,i)=>i.indexOf(e)>-1,ifInSearch(e,i){let n=e.toLowerCase(),t=i.toLowerCase();return!!n.includes(t)}},template:'\n    <dropdown pos="left center" class="uip-w-100p" triggerClass="uip-w-100p" :onOpen="getPostTypes">\n      \n      <template v-slot:trigger>\n      \n        <div class="uip-padding-xxs uip-background-muted uip-border-rounder uip-w-100p uip-w-100p uip-cursor-pointer uip-border-box"> \n          <div class="uip-flex uip-flex-center">\n          \n            <div class="uip-flex-grow uip-margin-right-s" v-if="selectedOptions.length < 1">\n              <div>\n              <span class="uip-text-muted">{{placeHolder}}...</span>\n              </div>\n            </div>\n            \n            <div v-else class="uip-flex-grow uip-flex uip-flex-row uip-row-gap-xxs uip-gap-xxs uip-margin-right-s uip-flex-wrap">\n              <template v-for="(item, index) in selectedOptions">\n                <div class="uip-padding-left-xxs uip-padding-right-xxs uip-background-highlight uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-shadow-small">\n                  <span class="uip-text-s">{{item}}</span>\n                  <a @click="removeByIndex(index)" class="uip-link-muted uip-no-underline uip-icon">close</a>\n                </div>\n              </template>\n            </div>\n          \n            <span class="uip-icon uip-text-muted">add</span>\n        \n          </div>\n        </div>\n        \n      </template>\n      \n      <template v-slot:content >\n      \n        <div class="uip-flex uip-flex-column uip-row-gap-xs uip-padding-xs">\n        \n          <div class="uip-flex uip-background-default uip-flex-center">\n            <span class="uip-icon uip-text-muted uip-margin-right-xs">search</span>\n            <input class="uip-blank-input uip-flex-grow" type="search"  \n            :placeholder="searchPlaceHolder" v-model="thisSearchInput" autofocus>\n          </div>\n          \n          <div class="uip-border-top"></div>\n          \n          <div v-if="returnLoading" class="uip-w-100p uip-flex uip-flex-center uip-flex-middle uip-h-200" :key="returnLoading">\n            <loading-chart></loading-chart>\n          </div>\n          \n          <div v-else class="uip-max-h-280 uip-overflow-auto" :key="\'list-\' + returnLoading">\n            <template v-for="option in formattedOptions">\n            \n              <div class="uip-background-default uip-padding-xxxs hover:uip-background-muted uip-border-rounder " \n              @click="addSelected(option.name, selectedOptions)" \n              v-if="ifInSearch(option.name, thisSearchInput)" \n              style="cursor: pointer">\n              \n                <div class="uip-flex uip-flex-row uip-flex-center">\n                  <div class="uip-flex uip-flex-center uip-flex-middle uip-margin-right-xs">\n                  <input type="checkbox" :name="option.name" :value="option.name" class="uip-checkbox" :checked="ifSelected(option.name, selectedOptions)">\n                  </div>\n                  <div class="uip-flex-grow uip-text-s">\n                    <div class="uip-text-bold uip-text-emphasis">{{option.label}}</div>\n                    <div class="uip-text-muted">{{option.name}}</div>\n                  </div>\n                </div>\n                \n              </div>\n              \n            </template>\n          </div>\n        </div>\n    \n      </template>\n      \n      \n    </dropdown>\n    '}};