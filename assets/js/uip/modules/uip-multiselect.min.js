export const core={props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function,availableOptions:Array},data(){return{thisSearchInput:"",options:this.availableOptions,loading:!1,selectedOptions:this.selected}},inject:["uipress"],watch:{selected:{handler(e,i){JSON.stringify(this.selected)!=JSON.stringify(this.selectedOptions)&&(this.selectedOptions=this.selected)},deep:!0},selectedOptions:{handler(e,i){this.updateSelected(this.selectedOptions)},deep:!0}},computed:{formattedOptions(){return this.options},returnLoading(){return this.loading}},methods:{stopLoading(){this.loading=!1},addSelected(e){this.ifSelected(e)?this.removeSelected(e):1==this.single?this.selectedOptions[0]=e:this.selectedOptions.push(e)},removeSelected(e){let i=this.selectedOptions.indexOf(e);i>-1&&this.selectedOptions.splice(i,1)},ifSelected(e){return this.selectedOptions.indexOf(e)>-1},ifInSearch(e){let i=e.toLowerCase(),t=this.thisSearchInput.toLowerCase();return!!i.includes(t)}},template:'\n      \n        <div class="uip-flex uip-flex-column uip-row-gap-s">\n                \n          <div class="uip-flex uip-background-muted uip-border-rounder uip-flex-center uip-padding-xxs uip-gap-xs">\n            <span class="uip-icon uip-text-muted">search</span>\n            <input class="uip-blank-input uip-flex-grow uip-text-s" type="search"  \n            :placeholder="searchPlaceHolder" v-model="thisSearchInput" autofocus>\n          </div>\n          \n          \n          <div v-if="returnLoading" class="uip-w-100p uip-flex uip-flex-center uip-flex-middle uip-h-200" :key="returnLoading">\n            <loading-chart></loading-chart>\n          </div>\n          \n          <div v-else class="uip-max-h-280 uip-flex uip-flex-column uip-row-gap-xxs" style="overflow:auto">\n            <template v-for="option in formattedOptions">\n            \n              <div class="uip-background-default uip-padding-xxs hover:uip-background-muted uip-border-rounder uip-flex uip-flex-row uip-flex-center" \n              @click="addSelected(option.name, selectedOptions)" \n              v-if="ifInSearch(option.name)" \n              style="cursor: pointer">\n              \n                  <div class="uip-flex uip-flex-center uip-flex-middle uip-margin-right-xs">\n                    <input type="checkbox" :name="option.name" :value="option.name" class="uip-checkbox uip-margin-remove" \n                    :checked="ifSelected(option.name, selectedOptions)">\n                  </div>\n                  \n                  <div class="uip-flex-grow uip-text-s uip-flex uip-gap-xxs">\n                    <div class="uip-text-bold uip-text-emphasis">{{option.label}}</div>\n                    <div class="uip-text-muted">{{option.name}}</div>\n                  </div>\n                \n              </div>\n              \n            </template>\n          </div>\n        </div>\n    '};export const preview={components:{PostTypeSelect:core},props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function},data:function(){return{thisSearchInput:"",options:[],loading:!1,selectedOptions:this.selected,strings:{postTypeSelect:__("Post type select","uipress-lite")}}},methods:{removeByIndex(e){this.selectedOptions.splice(e,1)}},template:'\n  \n      \n        <div class="uip-padding-xxs uip-background-muted uip-border-rounder uip-w-100p uip-w-100p uip-cursor-pointer uip-border-box"> \n          <div class="uip-flex uip-flex-center">\n          \n            <div class="uip-flex-grow uip-margin-right-s" v-if="selectedOptions.length < 1">\n              <div>\n              <span class="uip-text-muted">{{placeHolder}}...</span>\n              </div>\n            </div>\n            \n            <div v-else class="uip-flex-grow uip-flex uip-flex-row uip-row-gap-xxs uip-gap-xxs uip-margin-right-s uip-flex-wrap">\n              <template v-for="(item, index) in selectedOptions">\n                <div class="uip-padding-left-xxs uip-padding-right-xxs uip-background-highlight uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-shadow-small">\n                  <span class="uip-text-s">{{item}}</span>\n                  <a @click.prevent.stop="removeByIndex(index)" class="uip-link-muted uip-no-underline uip-icon">close</a>\n                </div>\n              </template>\n            </div>\n          \n            <span class="uip-icon uip-text-muted">add</span>\n        \n          </div>\n        </div>\n    \n  '};export default{components:{PostTypeSelect:core,PostTypePreview:preview},props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function,availableOptions:Array},data:()=>({}),template:'\n  \n    <dropdown pos="left center" class="uip-w-100p" ref="postselect"\n    :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']">\n      \n      <template #trigger>\n      \n       <PostTypePreview :selected="selected" :placeHolder="placeHolder" :searchPlaceHolder="searchPlaceHolder" :single="single" :updateSelected="updateSelected"/>\n        \n      </template>\n      \n      \n      <template #content>\n      \n        <div class="uip-padding-s uip-w-260 uip-flex uip-flex-column uip-row-gap-s">\n        \n          <div class="uip-flex uip-flex-between uip-flex-center">\n          \n            <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ placeHolder }}</div>\n            <div @click="$refs.postselect.close()"\n            class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n              <span class="uip-icon">close</span>\n            </div>\n            \n          </div>\n        \n          <PostTypeSelect :availableOptions="availableOptions" :selected="selected" :placeHolder="placeHolder" :searchPlaceHolder="searchPlaceHolder" :single="single" :updateSelected="updateSelected"/>\n        \n        \n        </div>\n      \n      </template>\n    \n    </dropdown>\n    \n  '};