export function moduleData(){return{props:{selected:Array,searchPlaceHolder:String,updateSelected:Function,returnType:String},data:function(){return{loading:!1,thisSearchInput:"",options:[],selectedOptions:this.selected,ui:{dropOpen:!1}}},inject:["uipress"],computed:{formattedOptions(){return this.options}},watch:{selectedOptions:{handler(e,t){},deep:!0},thisSearchInput:function(e,t){if(self=this,""==e)return;let n="users";"userrole"==self.returnType&&(n="roles");let i=new FormData;i.append("action","uip_search_user_roles"),i.append("security",uip_ajax.security),i.append("searchString",e),i.append("type",n),self.loading=!0,self.uipress.callServer(uip_ajax.ajax_url,i).then(e=>{self.loading=!1,e.error?self.uipress.notify(e.error,"error"):self.options=e.roles})}},methods:{addSelected(e){"userrole"==self.returnType&&this.updateSelected(e.label),"userlogin"==self.returnType&&this.updateSelected(e.login),"userid"==self.returnType&&this.updateSelected(e.id),"useremail"==self.returnType&&this.updateSelected(e.email)},ifInSearch(e,t){let n=e.name.toLowerCase(),i=t.toLowerCase();return!!n.includes(i)},onClickOutside(e){const t=e.path||(e.composedPath?e.composedPath():void 0);!t||t.includes(this.$el)||this.$el.contains(e.target)||this.closeThisComponent()},openThisComponent(){this.ui.dropOpen=!0,requestAnimationFrame(()=>{document.documentElement.addEventListener("click",this.onClickOutside,!1)})},closeThisComponent(){this.ui.dropOpen=!1,document.documentElement.removeEventListener("click",this.onClickOutside,!1)}},template:'\n    \n    <dropdown pos="left center">\n      <template v-slot:trigger>\n        <button class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted">search</button>\n      </template>\n      \n      <template v-slot:content>\n        \n        <div class="uip-padding-xs uip-flex uip-flex-column uip-row-gap-xxs">\n          \n          <div class="uip-flex uip-background-default uip-flex-center">\n           <span class="uip-icon uip-text-muted uip-margin-right-xs">search</span>\n           <input class="uip-blank-input uip-flex-grow" type="search"  \n           :placeholder="searchPlaceHolder" v-model="thisSearchInput" autofocus>\n          </div>\n          \n          <div class="uip-max-h-280 uip-overflow-auto uip-padding-xxs" v-if="formattedOptions.length > 0 || loading">\n                  <div v-if="loading" class="uip-padding-s uip-flex uip-flex-center uip-flex-middle"><loading-chart></loading-chart></div>\n            <template v-if="!loading" v-for="option in formattedOptions">\n              <div class="uip-background-default uip-padding-xxs uip-border-rounder uip-link-default hover:uip-background-muted" \n              @click="addSelected(option)" \n              v-if="ifInSearch(option, thisSearchInput)" \n              style="cursor: pointer">\n              \n                <div class="uip-text-s">\n                    <div class="uip-text-bold uip-text-emphasis">{{option.label}}</div>\n                    <div class="uip-text-muted">{{option.type}}</div>\n                </div>\n              \n              </div>\n            </template>\n          </div>\n          \n        </div>\n        \n      </template>\n    </dropdown>\n    '}};