const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function},data:function(){return{thisSearchInput:"",options:[],selectedOptions:this.selected,loading:!0,ui:{dropOpen:!1},strings:{add:__("Add","uipress-lite"),columnTitle:__("Column title","uipress-lite")}}},mounted:function(){this.openThisComponent()},inject:["uipress"],computed:{formattedOptions(){return this.options},returnLoading(){return this.loading}},watch:{selectedOptions:{handler(e,n){this.updateSelected(this.selectedOptions)},deep:!0}},methods:{getMetaTypes(){self=this;let e=new FormData;e.append("action","uip_get_post_table_columns"),e.append("security",uip_ajax.security),self.uipress.callServer(uip_ajax.ajax_url,e).then(e=>{if(e.error)return self.uipress.notify(e.error,"error"),void(self.loading=!1);self.loading=!1,self.options=e.keys})},toggleSelected(e){var n=this.selectedOptions.findIndex(n=>n.name===e.name);n>=0?this.selectedOptions.splice(n,1):this.selectedOptions.push(e)},removeSelected(e,n){let i=n.indexOf(e);i>-1&&(n=n.splice(i,1))},deleteCol(e){this.selectedOptions.splice(e,1)},ifInSearch(e,n){let i=e.toLowerCase(),t=n.toLowerCase();return!!i.includes(t)},onClickOutside(e){const n=e.path||(e.composedPath?e.composedPath():void 0);!n||n.includes(this.$el)||this.$el.contains(e.target)||this.closeThisComponent()},openThisComponent(){this.ui.dropOpen=!0,this.getMetaTypes(),requestAnimationFrame(()=>{document.documentElement.addEventListener("click",this.onClickOutside,!1)})},closeThisComponent(){this.ui.dropOpen=!1,document.documentElement.removeEventListener("click",this.onClickOutside,!1)},isSelected(e){return!!this.selectedOptions.find(n=>n.name===e.name)}},template:'\n    \n    <div class="uip-position-relative uip-w-100p">\n        <div div class="uip-flex uip-flex-column uip-row-gap-s" >\n        \n          \n          <dropdown pos="left center" class="uip-w-100p" triggerClass="uip-w-100p">\n          \n            <template v-slot:trigger>\n        \n              <div class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted uip-text-center">add</div>\n            \n            </template>\n            \n            <template v-slot:content>\n            \n              \n              <div class="uip-flex uip-padding-xs uip-border-bottom uip-flex-center">\n                <span class="uip-icon uip-text-muted uip-margin-right-xs">search</span>\n                <input class="uip-blank-input uip-flex-grow" type="search"  \n                :placeholder="searchPlaceHolder" v-model="thisSearchInput" autofocus>\n              </div>\n              \n              \n              <div v-if="returnLoading" class="uip-w-100p uip-flex uip-flex-center uip-flex-middle uip-h-200">\n                <loading-chart></loading-chart>\n              </div>\n              \n              <div class="uip-max-h-280 uip-overflow-auto uip-scrollbar uip-padding-xxs">\n                <template v-for="option in formattedOptions">\n                \n                  <div class=" uip-border-rounder uip-padding-xxs hover:uip-background-muted uip-link-default" \n                  v-if="ifInSearch(option.name, thisSearchInput)" @click="toggleSelected(option)">\n                    <div class="uip-flex uip-flex-row uip-flex-center uip-flex-between">\n                      <div class="uip-flex-grow">\n                        <div class="uip-text-emphasis uip-text-s">{{option.label}}</div>\n                        <div class="uip-text-muted uip-text-s">{{option.name}}</div>\n                      </div>\n                      <div class="uip-icon" v-if="isSelected(option)">\n                        done\n                      </div>\n                    </div>\n                  </div>\n                  \n                </template>\n              </div>\n            \n            </template>\n            \n          </dropdown>  \n          \n          \n          \n        \n        \n            \n          \n          <div class="" v-if="selectedOptions.length > 0">\n          \n            \n            <uip-draggable \n            class="uip-flex uip-flex-column uip-row-gap-xs uip-w-100p"\n            :group="{ name: \'columns\', pull: false, put: false }" \n            :list="selectedOptions"\n            animation="300"\n            :sort="true"\n            handle=".uip-col-drag">\n            \n              <template v-for="(element, index) in selectedOptions" \n              :key="element.name" :index="index">\n              \n                <div class="uip-flex uip-flex-center uip-gap-xs">\n                  \n                  <div class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted uip-col-drag">drag_indicator</div>\n                  \n                  <input type="text" v-model="element.label" :placeholder="strings.columnTitle" class="uip-input uip-input-small uip-border-left-remove uip-border-round uip-flex-grow">\n                  \n                  <div @click="deleteCol(index)" class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted">close</div>\n                  \n                </div>\n              </template>\n            </uip-draggable>\n          </div>\n        </div>\n      </div>'}};