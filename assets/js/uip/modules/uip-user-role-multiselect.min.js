const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export const core={props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function,type:String},data:function(){return{loading:!1,thisSearchInput:"",options:[],all_roles:[],paged_users:[],page:1,totalUsers:0,selectedOptions:[],activeTab:"roles",rendered:!1,switchOptions:{roles:{value:"roles",label:__("Roles","uipress-lite")},users:{value:"users",label:__("Users","uipress-lite")}},strings:{users:__("Users","uipress-lite"),roles:__("Roles","uipress-lite"),roleSelect:__("Role select","uipress-lite")},ui:{dropOpen:!1}}},inject:["uipress"],watch:{selectedOptions:{handler(e,i){this.updateSelected(this.selectedOptions)},deep:!0},thisSearchInput:{handler(){this.queryUsersRoles()}}},mounted(){Array.isArray(this.selected)&&(this.selectedOptions=this.selected),this.queryUsersRoles()},computed:{formattedOptions(){return this.options},formattedUsers(){return this.paged_users},formattedRoles(){return this.all_roles}},methods:{queryUsersRoles(){let e=this.type;e&&void 0!==e||(e="all");let i=new FormData;i.append("action","uip_get_user_roles"),i.append("security",uip_ajax.security),i.append("searchString",this.thisSearchInput),i.append("type",e),i.append("page",this.page),this.loading=!0,this.uipress.callServer(uip_ajax.ajax_url,i).then(e=>{this.rendered=!0,this.loading=!1,e.error?this.uipress.notify(e.error,"error"):(Array.isArray(e.roles)&&(this.options=e.roles),Array.isArray(e.all_roles)&&(this.all_roles=e.all_roles),Array.isArray(e.paged_users)&&(this.paged_users=e.paged_users),this.totalUsers=e.users_total)})},addSelected(e){this.ifSelected(e)?this.removeSelected(e):1==this.single?this.selectedOptions[0]=e:this.selectedOptions.push(e)},removeSelected(e){let i=this.selectedOptions.findIndex(i=>i.name===e.name&&i.type===e.type);i>-1&&this.selectedOptions.splice(i,1)},removeByIndex(e){this.selectedOptions.splice(e,1)},ifSelected(e){return this.selectedOptions.findIndex(i=>i.name===e.name&&i.type===e.type)>-1},ifInSearch(e){let i=e.name.toLowerCase(),t=this.thisSearchInput.toLowerCase();return!!i.includes(t)},pageBack(){1!=this.page&&(this.page-=1,this.queryUsersRoles())},pageForward(){this.page+=1,this.queryUsersRoles()}},template:'\n      \n      \n        <div class="uip-flex uip-flex-column uip-row-gap-s">\n          \n          <toggle-switch :options="switchOptions" :activeValue="activeTab" :dontAccentActive="true" :returnValue="function(data){ activeTab = data}"></toggle-switch>\n          \n          <div class="uip-flex uip-background-muted uip-border-rounder uip-padding-xxs uip-flex-center">\n            <span class="uip-icon uip-text-muted uip-margin-right-xs">search</span>\n            <input class="uip-blank-input uip-flex-grow uip-text-s" type="search"  \n            :placeholder="searchPlaceHolder" v-model="thisSearchInput" autofocus>\n          </div>\n          \n          \n          <div v-if="loading" class="uip-padding-s uip-flex uip-flex-center uip-flex-middle uip-h-200">\n            <loading-chart></loading-chart>\n          </div>\n          \n          <div class="uip-max-h-200" style="overflow:auto" v-if="formattedOptions.length > 0">\n            \n            \x3c!--Roles--\x3e\n            <template v-if="!loading && activeTab == \'roles\'" v-for="option in formattedRoles">\n              <div class="uip-background-default uip-padding-xxs uip-border-rounder uip-flex uip-flex-center uip-gap-xs uip-link-muted" \n              @click="addSelected(option)" \n              :class="{\'uip-background-primary-wash uip-text-emphasis\' : ifSelected(option), \'hover:uip-background-muted uip-link-muted\' : !ifSelected(option)}"\n              v-if="ifInSearch(option)" \n              style="cursor: pointer">\n                    \n                    <input type="checkbox" :name="option.name" :value="option.name" class="uip-checkbox uip-margin-remove" \n                    :checked="ifSelected(option)">\n                    <div class="uip-flex-grow uip-text-s uip-text-bold">{{option.label}}</div>\n                    <div class="uip-icon">add</div>\n                \n              </div>\n            </template>\n            \n            \x3c!--Users--\x3e\n            <template v-if="!loading && activeTab == \'users\'" v-for="option in formattedUsers">\n              <div class="uip-background-default uip-padding-xxs uip-border-rounder uip-flex uip-flex-center uip-gap-xs uip-link-muted" \n              @click="addSelected(option)" \n              :class="{\'uip-background-primary-wash uip-text-emphasis\' : ifSelected(option), \'hover:uip-background-muted uip-link-muted\' : !ifSelected(option)}"\n              v-if="ifInSearch(option)" \n              style="cursor: pointer">\n                    \n                    <input type="checkbox" :name="option.name" :value="option.name" class="uip-checkbox uip-margin-remove" \n                    :checked="ifSelected(option)">\n                    <div class="uip-flex-grow uip-text-s uip-text-bold">{{option.label}}</div>\n                    <div class="uip-icon">add</div>\n                \n              </div>\n            </template>\n            \n          </div>\n          \n          <div class="uip-flex uip-gap-xs" v-if="activeTab == \'users\' && totalUsers > formattedUsers.length">\n            <button class="uip-button-default uip-icon uip-nav-button uip-padding-xxs" :class="{\'uip-disabled\' : page == 1}" @click="pageBack()">chevron_left</button>\n            <button class="uip-button-default uip-icon uip-nav-button uip-padding-xxs" @click="pageForward()">chevron_right</button>\n          </div>\n        \n        </div>\n      \n    '};export const preview={props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function,type:String},data:function(){return{selectedOptions:[],strings:{users:__("Users","uipress-lite"),roles:__("Roles","uipress-lite"),roleSelect:__("Role select","uipress-lite")},ui:{dropOpen:!1}}},inject:["uipress"],mounted(){Array.isArray(this.selected)&&(this.selectedOptions=this.selected)},watch:{selectedOptions:{handler(e,i){this.updateSelected(this.selectedOptions)},deep:!0}},created(){Array.isArray(this.selectedOptions)||(this.selectedOptions=[])},methods:{removeByIndex(e){this.selectedOptions.splice(e,1)}},template:'\n    \n        <div class="uip-padding-xxs uip-background-muted uip-border-rounder uip-w-100p uip-max-w-400 uip-cursor-pointer uip-border-box" :class="{\'uip-active-outline\' : ui.dropOpen}"> \n        \n          <div class="uip-flex uip-flex-center">\n          \n            <div class="uip-flex-grow uip-margin-right-s" v-if="selectedOptions.length < 1">\n              <div>\n              <span class="uip-text-muted">{{placeHolder}}...</span>\n              </div>\n            </div>\n            \n            <div v-else class="uip-flex-grow uip-flex uip-flex-row uip-row-gap-xxs uip-gap-xxs uip-margin-right-s uip-flex-wrap">\n              <template v-for="(item, index) in selectedOptions">\n                <div class=" uip-padding-left-xxs uip-padding-right-xxs uip-background-highlight uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-shadow-small">\n                  <span class="uip-text-s">{{item.name}}</span>\n                  <a @click="removeByIndex(index)" class="uip-link-muted uip-no-underline uip-icon">close</a>\n                </div>\n              </template>\n              \n            </div>\n            \n            <span class="uip-icon uip-text-muted">add</span>\n            \n          </div>\n          \n        </div>\n      \n    '};export default{components:{UserRoleSelect:core,UserRoleSelectPreview:preview},props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function,type:String},data:function(){return{strings:{roleSelect:__("Role select","uipress-lite")}}},template:'\n    \n    <dropdown pos="left center" class="uip-w-100p" ref="userDropdown"\n    :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']">\n    \n      <template v-slot:trigger>\n      \n        <UserRoleSelectPreview :selected="selected" :placeHolder="placeHolder" :searchPlaceHolder="searchPlaceHolder" :single="single" :updateSelected="updateSelected" :type="type"/>\n      \n      </template>\n      \n      <template v-slot:content>\n      \n      \n        <div class="uip-flex uip-flex-column uip-row-gap-s uip-padding-s uip-w-240">\n        \n          <div class="uip-flex uip-flex-between uip-flex-center">\n            <div class="uip-text-emphasis uip-text-bold uip-text-s">{{strings.roleSelect}}</div>\n            <div @click.prevent.stop="$refs.userDropdown.close()"\n            class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n              <span class="uip-icon">close</span>\n            </div>\n          </div>\n          \n          <UserRoleSelect :selected="selected" :placeHolder="placeHolder" :searchPlaceHolder="searchPlaceHolder" :single="single" :updateSelected="updateSelected" :type="type"/>\n        \n        </div>\n      \n      </template>\n    \n    </dropdown>\n    '};