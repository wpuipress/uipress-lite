const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{getUserPreference}from"../../v3.5/utility/functions.min.js";export default{props:{display:String,name:String,block:Object},data:()=>({todoList:[],loading:!1,queued:!1,strings:{newToDo:__("Add todo","uipress-lite"),whatwouldyoulike:__("What would you like to do?","uipress-lite"),title:__("Title","uipress-lite"),description:__("Add a description...")},activeTab:"all",tabs:[{name:"all",label:__("All","uipress-lite")},{name:"todo",label:__("Todo","uipress-lite")},{name:"completed",label:__("Completed","uipress-lite")}],newToDo:{name:"",description:"",done:!1}}),mounted(){this.getToDoList()},watch:{todoList:{handler(i,e){this.queued||(this.queued=!0,setTimeout(()=>{this.queued=!1,this.saveUserPreference("uip-todo-list",i,!1)},8e3))},deep:!0}},computed:{returnToDos(){switch(this.activeTab){case"all":return this.todoList;case"todo":return this.todoList.filter(i=>!1===i.done);case"completed":return this.todoList.filter(i=>!0===i.done);default:return[]}}},methods:{addNewToDo(){let i=Object.assign({},this.newToDo);this.todoList.push(i),this.newToDo={name:"",description:"",done:!1}},async getToDoList(){this.loading=!0;const i=await getUserPreference("uip-todo-list");this.loading=!1,i.error?this.uipApp.notifications.notify(i.message,"","error",!0):i&&Array.isArray(i)&&(this.todoList=i)},deleteItem(i){this.todoList.splice(i,1)},duplicateItem(i){let e=Object.assign({},i);this.todoList.push(e)},resizeTextarea(i){const e=Math.min(i.target.scrollHeight,500);i.target.style.height="",i.target.style.height=e+"px";const t=500==e?"auto":"hidden";i.target.style.overflow=t}},template:'\n            \n            <div class="uip-flex uip-flex-column uip-row-gap-s uip-flex-no-wrap" >\n            \n              <component is="style" scoped>\n                .list-enter-active,\n                .list-leave-active {\n                  transition: all 0.5s ease;\n                }\n                .list-enter-from,\n                .list-leave-to {\n                  opacity: 0;\n                  transform: translateX(30px);\n                }\n              </component>\n            \n              \x3c!--NEW TODO --\x3e\n              <div class="uip-flex uip-flex-row uip-gap-xs">\n                <div class="uip-flex uip-padding-xxs uip-border uip-search-block uip-border-round uip-flex-center uip-flex-grow">\n                  <span class="uip-icon uip-text-muted uip-margin-right-xs uip-text-l uip-icon uip-icon-medium">check_box</span>\n                  <input class="uip-blank-input uip-flex-grow uip-text-s" type="text" :placeholder="strings.whatwouldyoulike" v-model="newToDo.name">\n                </div>\n                <button @click="addNewToDo()" class="uip-button-default uip-text-s uip-padding-xs uip-add-todo">{{strings.newToDo}}</button>\n              </div>\n              \n              \x3c!--END TODO --\x3e\n              \n              \n              \x3c!--VIEWS--\x3e\n              <div class="uip-flex uip-flex-row uip-gap-s uip-padding-xxs uip-tabs">\n                <template v-for="tab in tabs">\n                  <div class="uip-link-muted uip-padding-bottom-xs uip-tab" :class="{\'uip-border-bottom-primary uip-text-bold uip-text-emphasis uip-tab-active\' : activeTab == tab.name}" @click="activeTab = tab.name">{{tab.label}}</div>\n                </template>\n              </div>\n              \x3c!-- END OF VIEWS--\x3e\n              \n              \n              \x3c!--TODO LIST--\x3e\n              <div v-if="loading" class="uip-padding-m uip-flex uip-flex-center uip-flex-middle"><loading-chart></loading-chart></div>\n              <div v-if="!loading" class="uip-flex uip-flex-column uip-row-gap-s uip-padding-xxs uip-list-area">\n                <TransitionGroup name="list" >\n                      <div v-for="(item, index) in returnToDos" class="uip-flex uip-flex-row uip-gap-xs" :key="item" :data-index="index">\n                        <div >\n                          <input type="checkbox" class="uip-checkbox uip-checkbox-round" v-model="item.done">\n                        </div>\n                        <div class="uip-flex uip-flex-column uip-row-gap-xxxs uip-flex-grow">\n                          <input class="uip-blank-input uip-text-bold uip-list-item-title uip-text-emphasis" v-model="item.name" type="text" :placeholder="strings.title">\n                          <textarea v-model="item.description" class="uip-input uip-text-s uip-text-muted uip-no-resize uip-blank-input uip-list-item-description uip-min-h-20 uip-overflow-hidden"  :placeholder="strings.description" @input="resizeTextarea($event)"></textarea>\n                        </div>\n                        <div class="uip-w-50 uip-flex uip-flex-right uip-padding-xxs uip-flex-middle">\n                          <dropdown pos="left center">\n                            <template v-slot:trigger>\n                              <div  class="uip-icon uip-link-muted uip-icon-muted uip-text-l uip-icon-medium" >more_vert</div>\n                            </template>\n                            <template v-slot:content>\n                              <div class="uip-padding-xxs uip-flex uip-flex-row uip-gap-xxs">\n                                <div class="uip-icon uip-link-danger uip-icon-muted uip-text-l" @click="deleteItem(index)">delete</div>\n                                <div class="uip-icon uip-link-muted uip-icon-muted uip-text-l" @click="duplicateItem(item)">content_copy</div>\n                              </div>\n                            </template>\n                          </dropdown>\n                        </div>\n                      </div>\n                </TransitionGroup>\n              </div>\n              \n            </div>\n          '};