const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import"../../../libs/marked.min.js";export default{props:{display:String,name:String,block:Object},data:()=>({searchString:"",loading:!1,strings:{sendAmessage:__("Send a message...","uipress-lite"),apiKeyMissing:__("Please add an openAI api key to use this block","uipress-lite")},newMessage:"",errorMessage:"",error:!1,messages:[],thinking:!1}),watch:{"block.settings.block.options.welcomeMessage":{handler(e,s){this.setMessages()},deep:!0},"block.settings.block.options.systemMessage":{handler(e,s){this.setMessages()},deep:!0}},created(){this.setMessages()},computed:{returnKey(){return this.get_block_option(this.block,"block","apiKey")},returnWelcome(){return this.get_block_option(this.block,"block","welcomeMessage")},returnSystem(){return this.get_block_option(this.block,"block","systemMessage")},returnModel(){let e=this.get_block_option(this.block,"block","chatModel");return e||"gpt-3.5-turbo"}},methods:{setMessages(){if(this.returnSystem){const e=this.messages.findIndex(e=>"system"===e.role);e?this.messages[e].content=this.returnSystem:this.messages.push({role:"system",content:this.returnSystem})}if(this.returnWelcome){const e=this.messages.findIndex(e=>!0===e.welcome);e>-1?this.messages[e].content=this.returnWelcome:this.messages.push({role:"assistant",content:this.returnWelcome,welcome:!0})}},resizeTextarea(e){const s=Math.min(e.target.scrollHeight,500);e.target.style.height="",e.target.style.height=s+"px",e.target.style.overflow=500==s?"auto":"hidden"},submiteNewMessage(e){e.shiftKey||e.metaKey||!this.returnKey||""!=this.newMessage.trim()&&(e.preventDefault(),this.messages.push({content:this.newMessage,role:"user"}),this.newMessage="",this.$refs.newMessage.style.height="20px",this.sendMessageToGPT())},async sendMessageToGPT(){const e=this.messages.findIndex(e=>!0===e.welcome);e>-1&&delete this.messages[e].welcome;const s=JSON.stringify(this.messages),i=this.returnKey;this.error=!1,e>-1&&(this.messages[e].welcome=!0),this.thinking=!0;let t=new FormData;t.append("action","uip_send_message_to_gpt"),t.append("security",uip_ajax.security),t.append("messages",s),t.append("key",i),t.append("model",this.returnModel);const n=await this.sendServerRequest(uip_ajax.ajax_url,t);if(n.error)return this.error=!0,this.errorMessage=n.message,void(this.thinking=!1);const r=this.hasNestedPath(n,["message","error"]);if(r)return this.error=!0,this.errorMessage=r.message+" - error code: "+r.code,void(this.thinking=!1);let a=this.hasNestedPath(n,["message","choices"]);if(Array.isArray(a)){let e=a[0].message;e.content=marked.parse(e.content),this.messages.push(e)}this.thinking=!1}},template:'\n              <div class="uip-flex uip-flex-column uip-ai-block  uip-position-relative">\n                \n                <component is="style" scoped>\n                  .uip-ai-block pre{\n                    max-width: 100%;\n                    overflow: auto; \n                  }\n                  .uip-ai-block p{\n                    margin-top: 0 !important;\n                    margin-bottom:1rem !important;\n                  }\n                  .uip-typing-animation circle {\n                    fill: grey;\n                    animation: typing-fill 1.4s linear infinite;\n                  }\n                  .uip-typing-animation circle:nth-child(2) {\n                    animation-delay: 0.2s;\n                  }\n                  .uip-typing-animation circle:nth-child(3) {\n                    animation-delay: 0.5s;\n                  }\n                  \n                  @keyframes typing-fill {\n                    0% {\n                      fill: grey;\n                    }\n                    50% {\n                      fill: black;\n                    }\n                    100% {\n                      fill: grey;\n                    }\n                  }\n                </component>\n              \n                <div class="uip-flex-grow uip-flex uip-flex-column uip-row-gap-s uip-w-300 uip-chat-area uip-overflow-auto uip-h-600 uip-padding-bottom-l">\n                \n                  <div v-if="!returnKey" class="uip-background-orange-wash uip-border-rounder uip-padding-s">\n                    {{strings.apiKeyMissing}}\n                  </div>\n                  <template v-else v-for="message in messages">\n                  \n                    <div v-if="message.role != \'system\'" :class="{\'uip-flex-right uip-padding-left-m\' : message.role == \'user\', \'uip-flex-left uip-padding-right-m\' : message.role == \'assistant\'}" class="uip-flex uip-scale-in uip-max-w-100p">\n                      <div class="uip-border-rounder uip-padding-xs uip-max-w-100p"\n                      :class="{\'uip-background-primary uip-text-inverse uip-user-message\' : message.role == \'user\',\'uip-background-muted uip-bot-message\' : message.role == \'assistant\'}"\n                      v-html="message.content">\n                      </div>\n                    </div>\n                  \n                  </template>\n                  \n                  <div v-if="thinking" class="uip-flex uip-flex-left uip-fade-in">\n                    <div class="uip-background-muted uip-margin-right-m uip-text-l uip-border-rounder uip-padding-xs">\n                    \n                        <svg class="uip-typing-animation" height="10" width="28">\n                          <circle  cx="4" cy="4" r="4"/>\n                          <circle cx="14" cy="4" r="4"/>\n                          <circle cx="24" cy="4" r="4"/>\n                        </svg>\n                        \n                    </div>\n                  </div>\n                  \n                  <div v-if="error" class="uip-background-red-wash uip-border-rounder uip-padding-s">\n                    {{errorMessage}}\n                  </div>\n                </div>\n                \n                <div class="uip-shadow uip-overflow-hidden uip-border-rounder uip-background-default uip-padding-xs uip-flex uip-gap-xs uip-flex-center uip-chat-input \n                uip-position-absolute uip-left-16 uip-right-16 uip-bottom-16">\n                \n                  <textarea ref="newMessage" v-model="newMessage" @keyup.enter.prevent="submiteNewMessage($event)"\n                  class="uip-no-resize uip-blank-input uip-min-h-20 uip-h-20 uip-overflow-hidden uip-flex-grow" :placeholder="strings.sendAmessage" @input="resizeTextarea($event)"></textarea>\n                  \n                  <div class="uip-icon uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-transition-all uip-text-xl"\n                  :class="{\'uip-text-accent\' : newMessage.length > 0, \'uip-text-muted\' : newMessage.length == 0, }" @click="submiteNewMessage($event)">send</div>\n                  \n                </div>\n              </div>\n              '};