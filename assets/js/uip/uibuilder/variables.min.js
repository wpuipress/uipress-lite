const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent}from"../../libs/vue-esm.js";import Fonts from"../v3.5/lists/fonts.min.js";export default{components:{colourManager:defineAsyncComponent(()=>import("../v3.5/styles/color-style-editor.min.js")),contextmenu:defineAsyncComponent(()=>import("../v3.5/utility/contextmenu.min.js"))},props:{},data:()=>({loading:!0,newUnitItem:{},ui:{mode:"light",search:"",strings:{theme:__("Theme"),add:__("Add"),variableLabel:__("Variable label"),variableName:__("Variable name"),deleteVariable:__("Delete variable"),custom:__("custom","uipress-lite"),revertStyle:__("Revert style back to default","uipress-lite"),searchVariables:__("Search variables...","uipress-lite"),new:__("New variable","uipress-lite"),editStyle:__("Edit style","uipress-lite"),colours:__("Colours","uipress-lite"),units:__("Units","uipress-lite"),fonts:__("Fonts","uipress-lite"),text:__("Text","uipress-lite"),newStyle:__("New style variable","uipress-lite"),newUnit:__("New unit variable","uipress-lite"),editUnit:__("Edit unit","uipress-lite"),styleName:__("Style name","uipress-lite"),value:__("Value","uipress-lite"),create:__("Create","uipress-lite"),editText:__("Edit text","uipress-lite"),newTextVariable:__("New text variable","uipress-lite")},tabs:{color:!1,units:!1,font:!1},fonts:Fonts},newVariable:{label:"",var:"",type:"color"}}),watch:{"uipApp.data.themeStyles":{handler(){this.saveStyles()},deep:!0}},mounted(){this.getLocalFonts()},computed:{returnActiveMode(){return this.uipApp.data.userPrefs.darkTheme?this.uipApp.data.userPrefs.darkTheme?"darkValue":void 0:"value"},returnColorVars(){return Object.entries(this.uipApp.data.themeStyles).filter(([e,i])=>"color"===i.type||!("name"in i)).map(([e,i])=>(i.name=e,i.type="color",i))},returnUnitsVars(){return Object.values(this.uipApp.data.themeStyles).filter(e=>"units"===e.type)},returnFontsVars(){return Object.values(this.uipApp.data.themeStyles).filter(e=>"font"===e.type)}},methods:{async saveStyles(){let e=JSON.stringify(this.uipApp.data.themeStyles),i=new FormData;i.append("action","uip_save_user_styles"),i.append("security",uip_ajax.security),i.append("styles",e);const n=await this.sendServerRequest(uip_ajax.ajax_url,i);return n.error&&this.uipApp.notifications.notify(n.message,"uipress-lite","","error",!0),!0},async getLocalFonts(){await document.fonts.ready;const e=[...document.fonts].map(e=>e.family),i=[...new Set(e)].map(e=>({value:e.replace(/["']/g,""),label:e.replace(/["']/g,"").split(",")[0]}));this.ui.fonts=[...i,...this.ui.fonts]},splitUnitVal(e){let i=!1;if(!(i="light"==this.ui.mode?e.value:e.darkValue)||""==i)return{units:"px",value:""};let n=i.replace(/\D/g,"");return""==n?{units:"px",value:""}:{value:n,units:i.split(n)[1]}},setUnitVal(e,i){e.value?i.value=e.value+e.units:i.value=""},clearVar(e){delete e.value,delete e.darkValue},deleteVar(e){delete this.uipApp.data.themeStyles[e.name],this.uipApp.notifications.notify(__("Variable deleted","uipress-lite"),"","success",!0)},customSet(e){return!("light"!=this.ui.mode||!e.value||""==e.value)||!("dark"!=this.ui.mode||!e.darkValue||""==e.darkValue)},inSearch(e){if(""==this.ui.search)return!0;let i=this.ui.search.toLowerCase();return!!e.name.toLowerCase().includes(i)||!!e.label.toLowerCase().includes(i)},cleanKeyName(e){return e=(e=(e=(e=(e=e.replace(" ","-")).replace(",","")).replace(".","")).replace(/[`~!@#$%^&*()|+\=?;:'",.<>\{\}\[\]\\\/]/gi,"")).toLowerCase(),e=this.ensureDoubleDashPrefix(e)},ensureDoubleDashPrefix:e=>e?e.startsWith("--")?e:e.startsWith("-")?"--"+e.slice(1):"--"+e:"--",returnStyleBackground(e){const i=this.returnActiveMode;return e[i]?e[i].includes("--")?`var(${e[i]})`:e[i]:`var(${e.name})`},addNewColorVar(e){let i={name:"",type:"color",value:"",darkValue:"",user:!0};i={...i,...e},this.uipApp.data.themeStyles[i.name]=i,this.$refs.newcolourdrop.close()},addNewUnitVar(){let e={name:"",type:"units",value:"",darkValue:"",user:!0};e={...e,...this.newUnitItem},this.uipApp.data.themeStyles[e.name]=e,this.$refs.newunitdrop.close(),this.newUnitItem={}},addNewTextVar(){let e={name:"",type:"font",value:"",darkValue:"",user:!0};e={...e,...this.newUnitItem},this.uipApp.data.themeStyles[e.name]=e,this.$refs.newtextdrop.close(),this.newUnitItem={}},getCalculatedValue(e){if(e.value)return e.value;const i=getComputedStyle(document.documentElement),n=e.name.trim(),t=i.getPropertyValue(n).trim();return t||void 0}},template:'\n  <div class="uip-flex uip-flex-column uip-row-gap-s">\n  \n  \n        \x3c!--Color vars--\x3e\n        <div class="uip-flex uip-gap-xxs uip-flex-center uip-link-default" @click="ui.tabs.color = !ui.tabs.color">\n        \n          <div class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n            <span v-if="!ui.tabs.color" class="uip-icon">chevron_right</span>\n            <span v-if="ui.tabs.color" class="uip-icon">expand_more</span>\n          </div>\n          \n          <div class="uip-text-emphasis uip-text-bold uip-text-s uip-flex-grow">{{ui.strings.colours}}</div>\n          \n          <div @click.prevent.stop="$refs.newcolourdrop.show($event)" class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-default hover:uip-background-muted uip-border-rounder">\n            <span class="uip-icon">add</span>\n          </div>\n          \n        </div>\n        \n        <div v-if="ui.tabs.color" class="uip-flex uip-flex-column uip-padding-left-xs">\n        \n          <template v-for="(item, index) in returnColorVars">\n            \n            <div class="uip-flex uip-gap-xs uip-flex-center uip-gap-xxxs">\n              \n              \x3c!--Color picker dropdown--\x3e\n              <dropdown\n              :ref="\'coloreditor-\'+index" \n              pos="left center" \n              :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']" class="uip-flex-grow">\n              \n                <template #trigger>\n                \n                  <div class="uip-flex uip-gap-s uip-flex-center uip-padding-xxs uip-padding-left-xs uip-link-default uip-border-rounder hover:uip-background-muted">\n                  \n                    <div class="uip-w-16 uip-border-circle uip-ratio-1-1 uip-background-checkered">\n                      <div class="uip-w-16 uip-border-circle uip-ratio-1-1 uip-border" :style="{background:returnStyleBackground(item)}">\n                      \n                      </div>\n                    </div>\n                    \n                    <div class="uip-text-s">{{item.name}}</div>\n                  \n                  </div>\n                  \n                </template>\n                \n                <template #content>\n                \n                  <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-xs uip-w-240">\n                  \n                    <div class="uip-flex uip-flex-between uip-flex-center">\n                      <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ui.strings.editStyle}}</div>\n                      \n                      <div @click="$refs[\'coloreditor-\'+index][0].close()" \n                      class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                        <span class="uip-icon">close</span>\n                      </div>\n                    </div>\n                    \n                    <colourManager :value="item" :returnData="false"/>\n                  \n                  </div>\n                  \n                </template>\n                \n              </dropdown>  \n              \n               <a @click="clearVar(item)" \n               v-if="!item.user && customSet(item)"\n               :title="ui.strings.revertStyle"\n               class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-text-s">format_color_reset</a>\n              \n               <a v-if="item.user" \n               @click="deleteVar(item)"\n               :title="ui.strings.deleteVariable" \n               class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-text-s">delete</a>              \n               \n            </div>  \n          \n          </template>\n        </div>\n        \n        \n        \x3c!--Units vars--\x3e\n        <div class="uip-flex uip-gap-xxs uip-flex-center uip-link-default" @click="ui.tabs.units = !ui.tabs.units">\n        \n          <div class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n            <span v-if="!ui.tabs.units" class="uip-icon">chevron_right</span>\n            <span v-if="ui.tabs.units" class="uip-icon">expand_more</span>\n          </div>\n          \n          <div class="uip-text-emphasis uip-text-bold uip-text-s uip-flex-grow">{{ui.strings.units}}</div>\n          \n          <div @click.prevent.stop="$refs.newunitdrop.show($event)" class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-default hover:uip-background-muted uip-border-rounder">\n            <span class="uip-icon">add</span>\n          </div>\n          \n        </div>\n        \n        <div v-if="ui.tabs.units" class="uip-flex uip-flex-column uip-padding-left-s uip-row-gap-xxs">\n        \n          <template v-for="(item, index) in returnUnitsVars">\n            \n            <div class="uip-flex uip-gap-xs uip-flex-center uip-gap-xxxs">\n              \n              \x3c!--Units dropdown dropdown--\x3e\n              <dropdown\n              :ref="\'uniteditor-\'+index" \n              pos="left center" \n              :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']" class="uip-flex-grow">\n              \n                <template #trigger>\n                \n                  <div class="uip-flex uip-gap-s uip-flex-center uip-padding-xxs uip-padding-left-xs uip-link-default uip-border-rounder hover:uip-background-muted">\n                    \n                    <div class="uip-text-bold uip-text-s uip-w-40">{{getCalculatedValue(item)}}</div>\n                    \n                    <div class="uip-text-s">{{item.name}}</div>\n                  \n                  </div>\n                  \n                </template>\n                \n                <template #content>\n                \n                  <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-xs uip-w-240">\n                  \n                    <div class="uip-flex uip-flex-between uip-flex-center">\n                      <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ui.strings.editUnit}}</div>\n                      \n                      <div @click="$refs[\'uniteditor-\'+index][0].close()" \n                      class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                        <span class="uip-icon">close</span>\n                      </div>\n                    </div>\n                    \n                    <div class="uip-grid-col-1-3 uip-padding-left-xs">\n                      \n                      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-no-wrap"><span>{{ ui.strings.styleName }}</span></div>\n                      <input :disabled="!item.user"\n                      @input="item.name = cleanKeyName(item.name)"\n                      class="uip-input uip-w-100p" type="text" v-model="item.name" :placeholder="ui.strings.styleName" autofocus>\n                      \n                      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-no-wrap"><span>{{ ui.strings.value }}</span></div>\n                      <value-units :value="splitUnitVal(item)" size="xsmall" :returnData="(data)=>{ setUnitVal(data, item)}" class="uip-w-100p"></value-units>\n                    \n                    </div>\n                  \n                  </div>\n                  \n                </template>\n                \n              </dropdown>  \n              \n              <a @click="clearVar(item)" \n              v-if="!item.user && customSet(item)"\n              :title="ui.strings.revertStyle"\n              class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-text-s">format_color_reset</a>\n              \n              <a v-if="item.user" \n              @click="deleteVar(item)"\n              :title="ui.strings.deleteVariable" \n              class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-text-s">delete</a>              \n               \n            </div>  \n          \n          </template>\n        </div>\n        \n        \n        \n        \x3c!--Font vars--\x3e\n        <div class="uip-flex uip-gap-xxs uip-flex-center uip-link-default" @click="ui.tabs.font = !ui.tabs.font">\n        \n          <div class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n            <span v-if="!ui.tabs.font" class="uip-icon">chevron_right</span>\n            <span v-if="ui.tabs.font" class="uip-icon">expand_more</span>\n          </div>\n          \n          <div class="uip-text-emphasis uip-text-bold uip-text-s uip-flex-grow">{{ui.strings.text}}</div>\n          \n          <div @click.prevent.stop="$refs.newtextdrop.show($event)" class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-default hover:uip-background-muted uip-border-rounder">\n            <span class="uip-icon">add</span>\n          </div>\n          \n        </div>\n        \n        <div v-if="ui.tabs.font" class="uip-flex uip-flex-column uip-padding-left-s uip-row-gap-xxs">\n        \n          <template v-for="(item, index) in returnFontsVars">\n            \n            <div class="uip-flex uip-gap-xs uip-flex-center uip-gap-xxxs">\n              \n              \x3c!--Units dropdown dropdown--\x3e\n              <dropdown\n              :ref="\'fonteditor-\'+index" \n              pos="left center" \n              :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']" class="uip-flex-grow">\n              \n                <template #trigger>\n                \n                  <div class="uip-flex uip-gap-s uip-flex-center uip-padding-xxs uip-padding-left-xs uip-link-default uip-border-rounder hover:uip-background-muted">\n                    \n                    <div class="uip-text-bold uip-text-s uip-w-40 uip-overflow-hidden uip-text-ellipsis uip-no-wrap">{{getCalculatedValue(item)}}</div>\n                    \n                    <div class="uip-text-s">{{item.name}}</div>\n                  \n                  </div>\n                  \n                </template>\n                \n                <template #content>\n                \n                  <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-xs uip-w-240">\n                  \n                    <div class="uip-flex uip-flex-between uip-flex-center">\n                      <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ui.strings.editText}}</div>\n                      \n                      <div @click="$refs[\'fonteditor-\'+index][0].close()" \n                      class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                        <span class="uip-icon">close</span>\n                      </div>\n                    </div>\n                    \n                    <div class="uip-grid-col-1-3 uip-padding-left-xs">\n                      \n                      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-no-wrap"><span>{{ ui.strings.styleName }}</span></div>\n                      <input :disabled="!item.user"\n                      @input="item.name = cleanKeyName(item.name)"\n                      class="uip-input uip-w-100p" type="text" v-model="item.name" :placeholder="ui.strings.styleName" autofocus>\n                      \n                      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-no-wrap"><span>{{ ui.strings.value }}</span></div>\n                      <select class="uip-input uip-w-100p" v-model="item.value">\n                        <template v-for="font in ui.fonts">\n                          <option :value="font.value">{{ font.label }}</option>\n                        </template>\n                      </select>\n                    \n                    </div>\n                  \n                  </div>\n                  \n                </template>\n                \n              </dropdown>  \n              \n              <a @click="clearVar(item)" \n              v-if="!item.user && customSet(item)"\n              :title="ui.strings.revertStyle"\n              class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-text-s">format_color_reset</a>\n              \n              <a v-if="item.user" \n              @click="deleteVar(item)"\n              :title="ui.strings.deleteVariable" \n              class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-text-s">delete</a>              \n               \n            </div>  \n          \n          </template>\n        </div>\n        \n        \n        \n        \x3c!-- New color dropdown--\x3e\n        <contextmenu\n        ref="newcolourdrop" \n        :snapRight="true"\n        :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']"\n        :offsetX="-8">\n        \n          \n            <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-xs uip-w-280">\n            \n              <div class="uip-flex uip-flex-between uip-flex-center">\n                <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ui.strings.newStyle}}</div>\n                \n                <div @click="$refs.newcolourdrop.close()" \n                class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                  <span class="uip-icon">close</span>\n                </div>\n              </div>\n              \n              <colourManager :value="{user:true}" :returnData="(d)=>{addNewColorVar(d)}"/>\n            \n            </div>\n          \n        </contextmenu>\n        \n        \n        \x3c!-- New Unit dropdown--\x3e\n        <contextmenu\n        ref="newunitdrop" \n        :snapRight="true"\n        :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']"\n        :offsetX="-8">\n        \n          \n            <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-s uip-w-280">\n            \n              <div class="uip-flex uip-flex-between uip-flex-center">\n                <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ui.strings.newUnit}}</div>\n                \n                <div @click="$refs.newunitdrop.close()" \n                class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                  <span class="uip-icon">close</span>\n                </div>\n              </div>\n              \n              <div class="uip-grid-col-1-3 uip-padding-left-xs">\n                \n                <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-no-wrap"><span>{{ ui.strings.styleName }}</span></div>\n                <input\n                @input="newUnitItem.name = cleanKeyName(newUnitItem.name)"\n                class="uip-input uip-flex-grow uip-w-100p" type="text" v-model="newUnitItem.name" :placeholder="ui.strings.styleName" autofocus>\n                \n                <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-no-wrap"><span>{{ ui.strings.value }}</span></div>\n                <value-units :value="splitUnitVal(newUnitItem)" size="xsmall" :returnData="(data)=>{ setUnitVal(data, newUnitItem)}" class="uip-w-100p"></value-units>\n              \n              </div>\n              \n              <button @click="addNewUnitVar" class="uip-button-primary" :disabled="!newUnitItem.name">{{ui.strings.create}}</button>\n            \n            </div>\n          \n        </contextmenu>\n        \n        \n        \x3c!-- New Text dropdown--\x3e\n        <contextmenu\n        ref="newtextdrop" \n        :snapRight="true"\n        :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']"\n        :offsetX="-8">\n        \n          \n            <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-s uip-w-280">\n            \n              <div class="uip-flex uip-flex-between uip-flex-center">\n                <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ui.strings.newTextVariable}}</div>\n                \n                <div @click="$refs.newtextdrop.close()" \n                class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                  <span class="uip-icon">close</span>\n                </div>\n              </div>\n              \n              <div class="uip-grid-col-1-3 uip-padding-left-xs">\n                \n                <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-no-wrap"><span>{{ ui.strings.styleName }}</span></div>\n                <input @input="newUnitItem.name = cleanKeyName(newUnitItem.name)"\n                class="uip-input uip-w-100p" type="text" v-model="newUnitItem.name" :placeholder="ui.strings.styleName" autofocus>\n                \n                <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-no-wrap"><span>{{ ui.strings.value }}</span></div>\n                <select class="uip-input uip-w-100p" v-model="newUnitItem.value">\n                  <template v-for="font in ui.fonts">\n                    <option :value="font.value">{{ font.label }}</option>\n                  </template>\n                </select>\n              \n              </div>\n              \n              <button @click="addNewTextVar" class="uip-button-primary" :disabled="!newUnitItem.name">{{ui.strings.create}}</button>\n            \n            </div>\n          \n        </contextmenu>\n        \n     </div>'};