const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent,nextTick}from"../../libs/vue-esm-dev.js";export default{inject:["uipData","router","uipress","uiTemplate"],components:{QueryBuilder:defineAsyncComponent(()=>import("../options/uip-query-builder.min.js?ver=3.2.12"))},data(){return{block:{},uid:this.$route.params.uid,mode:"light",section:"settings",missing:!0,groups:[],loading:!0,options:{},activeTab:!1,buildingSettings:!1,switchingComponent:!1,componenetSettings:{},block_preset_styles:{},activeSelector:"style",newPresetName:"",firstLoad:!1,showSettings:!1,strings:{missingMessage:__("This block no longer exists","uipress-lite"),goBack:__("Go back","uipress-lite"),blockID:__("Block ID","uipress-lite"),proOption:__("This is a pro option. Upgrade to unlock","uipress-lite"),theme:__("Theme","uipress-lite"),options:__("Options","uipress-lite"),buildingSettings:__("Building settings object...","uipress-lite"),blockUniqueID:__("Block unique id. If you change this it must remain unique and can not be blank","uipress-lite"),hiddenOnDevice:__("Hidden on device","uipress-lite"),tooltip:__("Tooltip","uipress-lite"),tooltipMessage:__("Message","uipress-lite"),delay:__("Delay (ms)","uipress-lite"),styles:__("Styles","uipress-lite"),blockSettings:__("Block options","uipress-lite"),currentlyEditing:__("Currently editing","uipress-lite"),blockPart:__("Block part","uipress-lite"),blockRoot:__("root","uipress-lite"),options:__("Options","uipress-lite"),pseudoClasses:__("Element states","uipress-lite"),editingLightMode:__("Editing for light mode"),editingDarkMode:__("Editing for dark mode"),pseudoContent:__("Pseudo content","uipress-lite"),beforeContent:__("::before","uipress-lite"),afterContent:__("::after","uipress-lite"),queryLoop:__("Query loop","uipress-lite"),query:__("Query","uipress-lite"),stylePresets:__("Style presets","uipress-lite"),usePreset:__("Use preset","uipress-lite"),none:__("None","uipress-lite"),newPreset:__("New preset","uipress-lite"),createNewPreset:__("Create preset","uipress-lite"),name:__("Name","uipress-lite"),presetActive:__("You are currently editing a style preset. Changes made here will apply to all blocks using the same preset."),link:__("Link","uipress-lite"),menuCollapsed:__("Menu collapsed","uipress-lite"),tablet:__("Tablet","uipress-lite"),mobile:__("Mobile","uipress-lite"),clearState:__("Clear state","uipress-lite"),discontinued:__("This block has now been discontinued. We recommend replacing it with the new menu block from the blocks list.","uipress-lite"),general:__("General","uipress-lite")},pseudoSelectors:[{value:":active",label:__(":active","uipress-lite")},{value:":focus",label:__(":focus","uipress-lite")},{value:":hover",label:__(":hover","uipress-lite")},{value:":visited",label:__(":visited","uipress-lite")},{value:"::before",label:__("::before","uipress-lite")},{value:"::after",label:__("::after","uipress-lite")},{value:":menu-collapsed",label:__("Menu collapsed","uipress-lite")},{value:"tablet",label:__("Tablet","uipress-lite")},{value:"mobile",label:__("Mobile","uipress-lite")}],switchOptions:{light:{value:"light",label:__("Light mode","uipress-lite")},dark:{value:"dark",label:__("Dark mode","uipress-lite")}},enabledDisabled:{false:{value:!1,label:__("Disabled","uipress-lite")},true:{value:!0,label:__("Enabled","uipress-lite")}},lightModeSwitchOptions:{light:{value:"light",icon:"light_mode",tip:__("Light mode styles")},dark:{value:"dark",icon:"dark_mode",tip:__("Dark mode styles","uipress-lite")}},optionsSections:{settings:{value:"settings",label:__("Settings","uipress-lite")},style:{value:"style",label:__("Style","uipress-lite")},advanced:{value:"advanced",label:__("Advanced","uipress-lite")}}}},watch:{componenetSettings:{handler(e,i){let t=this;t.loading||JSON.stringify(t.componenetSettings)!=JSON.stringify(t.block.settings)&&this.passSettingsToBlock()},deep:!0},"block.uid":{handler(e,i){""==e&&(this.block.uid=this.uipress.createUID())},deep:!0},block_preset_styles:{handler(e,i){this.uipress.uipAppData.options.block_preset_styles=this.block_preset_styles},deep:!0}},updated:function(){this.firstLoad=!0},created(){this.uipApp.blockSettings=this},computed:{returnBlock(){return this.block},returnSettings(){return this.componenetSettings},returnBlockPartsCount(){let e=Object.keys(this.returnSettings);const i=e.indexOf("advanced"),t=e.indexOf("style"),n=e.indexOf("block");return i>=0&&e.splice(i,1),t>=0&&e.splice(t,1),n>=0&&e.splice(n,1),e.length},returnCompSettings(){let e=this.uipress.checkNestedValue(this.componenetSettings[this.returnActiveComp],["preset"]);return e&&e in this.block_preset_styles?this.block_preset_styles[e].preset:this.componenetSettings[this.returnActiveComp]},ifUsingPreset(){let e=this.uipress.checkNestedValue(this.componenetSettings[this.returnActiveComp],["preset"]);return!!(e&&e in this.block_preset_styles)},ifBlockExists(){return!JSON.stringify(this.uiTemplate.content).includes(this.uid)},returnBlock(){return this.block},returnActiveComp(){return this.activeSelector},returnPresetLoading(){return this.uipress.checkNestedValue(this.componenetSettings[this.returnActiveComp],["preset","loading"])}},methods:{async show(e,i){this.block=e,this.componenetSettings={},await this.build_block_settings(this.block)&&(this.loading=!0,await nextTick(),i&&(this.section=i),this.uipData.options.block_preset_styles&&this.uipress.isObject(this.uipData.options.block_preset_styles)&&(this.block_preset_styles=this.uipData.options.block_preset_styles),this.showSettings=!0,this.loading=!1)},close(){this.showSettings=!1,this.block=null},passSettingsToBlock(){let e=this;if(!e.uipress.isObject(e.componenetSettings))return;let i=JSON.parse(JSON.stringify(e.componenetSettings));const t={};for(let n in i){let s=i[n];if(t[n]={},t[n].options={},"styleType"in s&&(t[n].styleType=s.styleType),"class"in s&&(t[n].class=s.class),"afterContent"in s&&(t[n].afterContent=s.afterContent),"beforeContent"in s&&(t[n].beforeContent=s.beforeContent),"preset"in s&&(t[n].preset=s.preset),"options"in s)for(let i in s.options)if("value"in s.options[i]||"darkValue"in s.options[i]||"pseudo"in s.options[i]){let p,o,u,l,r;"value"in s.options[i]&&(p=s.options[i].value),"darkValue"in s.options[i]&&(o=s.options[i].darkValue),"pseudo"in s.options[i]&&(u=s.options[i].pseudo),void 0!==p&&(l=e.uipress.isObject(p)?this.clear_empty_values_from_object(p):p),void 0!==o&&(r=e.uipress.isObject(p)?this.clear_empty_values_from_object(o):o),e.uipress.isObject(u)&&(u=this.clear_empty_values_from_object(u)),void 0===l&&void 0===r&&void 0===u||(t[n].options[i]={},t[n].options[i].settingName=s.options[i].settingName,void 0!==l&&(t[n].options[i].value=l),void 0!==r&&(t[n].options[i].darkValue=r),void 0!==u&&(t[n].options[i].pseudo=u))}}e.uipress.isObject(t)&&(e.block.settings=t)},clear_empty_values_from_object(e){let i=this;for(let t in e){let n=e[t];void 0===n&&delete e[t],""==n&&!1!==n&&0!==n&&"0"!==n&&delete e[t],i.uipress.isObject(n)&&(0===Object.keys(n).length?delete e[t]:(n=i.clear_empty_values_from_object(n),0===Object.keys(e[t]).length&&delete e[t]))}return e},async build_block_settings(e){let i=this,t=e.moduleName,n=this.uipData.blocks,s=e.settings,p=n.filter(e=>e.moduleName===t);if(p.length<1)return i.missing=!0,i.loading=!1,i.buildingSettings=!1,i.strings.missingMessage=__("This block has no settings","uipress-lite"),!1;if(void 0===p[0].optionsEnabled)return i.missing=!0,i.loading=!1,i.buildingSettings=!1,i.strings.missingMessage=__("This is a pro block. Upgrade to unlock","uipress-lite"),!1;let o=JSON.parse(JSON.stringify(p[0].optionsEnabled));JSON.parse(JSON.stringify(i.componenetSettings));for(var u=0;u<o.length;u++){let t=o[u],n=t.name,p={};n in s&&(p=s[n]),0===Object.keys(p).length&&(i.uipress.format_block_presets(t.options,e.settings,t),n in e.settings&&(p=e.settings[n])),i.uipress.format_block_option(t,p,i.componenetSettings)}return!0},componentExists(e){return!!this.$root._.appContext.components[e]},checkIfEmpty(e){let i=e.options;if("dark"!=this.mode)return!0;for(const[e,t]of Object.entries(i))if("dark"in i[e]&&i[e].dark)return!0;return!1},pushActiveSection(e){this.$router.push({query:{...this.$route.query,section:e}})},returnActivePart(){return"style"==this.activeSelector?this.block.name:this.returnSettings[this.activeSelector].label},setSubComponent(e){let i=this;i.activeSelector=e,i.switchingComponent=!0,setTimeout(function(){i.switchingComponent=!1},250)},returnLightModeSetting:e=>e&&void 0!==e?e:"light",formatPseudoValue(e){let i=this.uipress.checkNestedValue(e,["pseudo",this.returnOptionTheme(e),e.activePseudo]);return i||(this.uipress.createNestedObject(e,["pseudo",this.returnOptionTheme(e),e.activePseudo]),{})},returnOptionTheme(e){let i="light";return"dark"==e.themeMode&&(i="dark"),i},switchOptionTheme(e){e.loading=!0,"dark"==e.themeMode?e.themeMode="light":e.themeMode="dark",setTimeout(function(){e.loading=!1},250)},hasPseudo(){let e=JSON.stringify(this.componenetSettings[this.returnActiveComp]);if(void 0!==e)return!(!e.includes(":before")&&!e.includes(":after"))||void 0},switchPseudo(e,i){e.loading=!0,e.activePseudo=i,setTimeout(function(){e.loading=!1},250)},returnQueryVal(){return"query"in this.block?this.block.query.enabled:(this.block.query={enabled:!1,settings:{}},this.block.query.enabled)},createNewPreset(){if(""==this.newPresetName)return void this.uipress.notify(__("Preset name is required","uipress-lite"),"","error",!0);let e=this.uipress.createUID();this.block_preset_styles[e]={preset:this.componenetSettings[this.returnActiveComp],name:this.newPresetName},this.newPresetName="",this.saveStylePresets()},saveStylePresets(){let e=JSON.stringify(this.block_preset_styles,(e,i)=>"true"===i?"uiptrue":!0===i?"uiptrue":"false"===i?"uipfalse":!1===i?"uipfalse":""===i?"uipblank":i),i=new FormData;i.append("action","uip_save_site_option"),i.append("security",uip_ajax.security),i.append("option",e),i.append("optionName","block_preset_styles"),this.uipress.callServer(uip_ajax.ajax_url,i).then(e=>{e.success&&this.uipress.notify(__("Presets updated","uipress-lite"),"","success",!0)})},forceLoad(){let e=this;for(const i in e.returnCompSettings.options)e.returnCompSettings.options[i].loading=!0;setTimeout(function(){for(const i in e.returnCompSettings.options)e.returnCompSettings.options[i].loading=!1},250)},returnPresetName(){return this.componenetSettings[this.returnActiveComp].preset in this.block_preset_styles?this.block_preset_styles[this.componenetSettings[this.returnActiveComp].preset].name:__("Preset missing","uipress-lite")},updatePresetValue(e){this.componenetSettings[this.returnActiveComp].preset=e,this.forceLoad()},deleteStylePreset(e){let i=this;i.uipress.confirm(__("Are yous sure?","uipress-lite"),__("Are you sure you want to delete this style preset?","uipress-lite")).then(t=>{t&&e in this.block_preset_styles&&(delete i.block_preset_styles[e],i.saveStylePresets())})},optionFullWidth(e){return!!this.uipress.checkNestedValue(e,["args","fullWidth"])},clearStyles(){for(let e in this.componenetSettings[this.returnActiveComp].options)"value"in this.componenetSettings[this.returnActiveComp].options[e]&&(this.componenetSettings[this.returnActiveComp].options[e].loading=!0,delete this.componenetSettings[this.returnActiveComp].options[e].value),"pseudo"in this.componenetSettings[this.returnActiveComp].options[e]&&(this.componenetSettings[this.returnActiveComp].options[e].loading=!0,delete this.componenetSettings[this.returnActiveComp].options[e].pseudo);requestAnimationFrame(()=>{for(let e in this.componenetSettings[this.returnActiveComp].options)this.componenetSettings[this.returnActiveComp].options[e].loading=!1})},hasPseudoSpecific:(e,i)=>"pseudo"in i&&("light"in i.pseudo&&(e in i.pseudo.light&&0!==Object.keys(i.pseudo.light[e]).length)),clearPseudoState(e,i){delete i.pseudo.light[e]}},template:'\n    \n    \n    \n    <div v-if="showSettings" id="uip-block-settings"\n    class="uip-position-fixed uip-top-80 uip-right-16 uip-bottom-16 uip-background-default uip-w-320 uip-flex uip-flex-column uip-row-gap-s uip-overflow-auto uip-fade-in uip-shadow" style="border-radius: calc(var(--uip-border-radius-large) + var(--uip-padding-xs)); z-index: 2;">\n    \n        <div v-if="loading" class="uip-padding-m uip-flex uip-flex-center uip-flex-middle "><loading-chart></loading-chart></div>\n        <div v-if="buildingSettings" class="uip-text-muted uip-text-center">{{strings.buildingSettings}}</div>\n        \n\t\t<div class="uip-flex uip-flex-column uip-h-100p uip-max-h-100p uip-h-vh uip-position-relative uip-flex-grow" v-if="!loading">\n          \n          \n          \x3c!-- Block settings header --\x3e\n          <div class="uip-padding-s uip-padding-remove-bottom">\n          \n            <div class="uip-flex uip-gap-xxs uip-flex-center">\n            \n            \n              <div class="uip-flex uip-flex-column uip-flex-grow">\n                <input class="uip-text-bold uip-blank-input uip-text-l uip-text-emphasis" v-model="block.name">\n              </div>\n              \n              <a class="uip-link-muted hover:uip-background-muted uip-border-rounder uip-icon uip-padding-xxs" @click="close()">close</a>\n              \n            </div>\n            \n          </div>\n          \x3c!-- End block settings header --\x3e\n          \n          \x3c!-- Settings group --\x3e\n          <div class="uip-padding-s uip-border-box ">\n            <toggle-switch :options="optionsSections" :activeValue="section" :dontAccentActive="true" :returnValue="function(data){ section = data; pushActiveSection(data)}"></toggle-switch>\n          </div>\n          \n          \n          \x3c!-- End settings group --\x3e\n          \n          <div class="uip-padding-s uip-padding-top-remove uip-overflow-auto uip-scrollbar">\n            \n            \x3c!--BLOCK SETTINGS --\x3e\n            <div class="uip-margin-bottom-m" v-if="section == \'settings\'">\n              <div class=" uip-flex uip-flex-column uip-gap-s">\n              \n                <div v-if="block.moduleName == \'uip-admin-menu\'" class="uip-border-rounder uip-background-orange-wash uip-padding-xs">\n                  {{strings.discontinued}}\n                </div>\n                \n                <div>\n                  <div class="uip-margin-bottom-xxs uip-text-bold uip-text-emphasis">{{strings.general}}</div>\n                \n                  <div class="uip-padding-s uip-padding-right-remove">\n                    \n                    <div class="uip-grid-col-1-3">\n                    \n                      \n                        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.name}}</span></div>\n                        <input class="uip-input uip-input-small" type="text" v-model="block.name">\n                      \n                        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.blockID}}</span></div>\n                        <uip-tooltip :message="strings.blockUniqueID" :delay="200">\n                          <div class="uip-flex uip-flex-center uip-background-muted uip-border-rounder uip-padding-xxxs uip-padding-left-xxs uip-padding-right-xxs">\n                            <div class="uip-text-muted uip-text-xs">#</div>\n                            <input class="uip-blank-input uip-text-muted uip-text-xs uip-padding-remove uip-w-100p" style="color:var(--uip-text-color-muted) !important" v-model="block.uid">\n                          </div>\n                        </uip-tooltip>\n                        \n                        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-max-h-30"><span>{{strings.link}}</span></div>\n                        <link-select :value="block.linkTo" :returnData="function(d){block.linkTo = d}"></link-select>\n                        \n                        \x3c!--Tooltip text --\x3e\n                        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.tooltip}}</span></div>\n                        \n                        <uip-input :value="block.tooltip.message" :returnData="function(d){block.tooltip.message = d}"/>\n                                            \n                    </div>\n                    \n                  </div>\n                \n                </div>\n                \n                \n                <div class="uip-border-top"></div>\n                \n                \n                \x3c!--Query builder--\x3e\n                <div class="" >\n                  <div class="uip-margin-bottom-xxs uip-text-bold uip-text-emphasis">{{strings.queryLoop}}</div>\n                  \n                  <div class="uip-padding-s uip-padding-right-remove uip-flex uip-flex-column uip-row-gap-xs" v-if="uiTemplate.proActivated">\n                    \n                    \n                    <QueryBuilder :block="block" :value="block.query.settings" :returnData="(d)=>{ block.query.settings = d}"/>\n                  \n                  </div>\n                  \n                  <div v-else class="uip-padding-s uip-padding-right-remove">\n                    <div class="uip-padding-xxs uip-border-rounder uip-background-green-wash uip-text-s">{{strings.proOption}}</div>\n                  </div>\n                  \n                  \n                </div>\n                \n                <div class="uip-border-top"></div>\n              \n                \n                <div class="">\n                  <div class="uip-margin-bottom-xxs uip-text-bold uip-text-emphasis">{{strings.hiddenOnDevice}}</div>\n                  <div class="uip-padding-s uip-padding-right-remove">\n                    <hidden-responsive :value="block.responsive" :returnData="function(e){block.responsive = e}"></hidden-responsive>\n                  </div>\n                </div>\n                \n                <div class="uip-border-top"></div>\n                \n                <div v-if="returnSettings.block" class="uip-flex uip-flex-column">\n                \n                \n                  <div class="uip-margin-bottom-xxs uip-text-bold uip-text-emphasis">{{strings.options}}</div>\n                  \n                  <div class="uip-padding-s uip-padding-right-remove uip-flex uip-flex-column uip-row-gap-s">\n                  \n                  \n                    <template v-for="option in returnSettings.block.options">\n                    \n                    \n                      \x3c!--Options --\x3e\n                      <div :class="optionFullWidth(option) ? \'uip-flex uip-flex-column uip-row-gap-xxs\' : \'uip-grid-col-1-3\'">\n                      \n                        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-h-30 uip-gap-xs">\n                          <span>{{option.label}}</span>\n                          \n                          <uip-tooltip v-if="option.help" :message="option.help">\n                            <span class="uip-icon uip-border-circle uip-background-grey uip-cursor-pointer" style="font-size:12px">question_mark</span>\n                          </uip-tooltip>\n                          \n                        </div>\n                          \n                        <div class="uip-flex uip-flex-center uip-w-100p">\n                          <component v-if="componentExists(option.component)" :is="option.component" :value="option.value" :args="option.args" :returnData="function(data){option.value = data}"></component>\n                          \n                          <div v-else class="uip-padding-xxs uip-border-rounder uip-background-green-wash uip-text-s">\n                             {{strings.proOption}}\n                          </div>\n                        </div>\n                        \n                      </div>\n                      \n                    </template>\n                  \n                  </div>\n                  \n                </div>\n              </div>\n            </div>\n            \n            \n            \n            \x3c!--Block styles --\x3e\n            <div class="uip-flex uip-flex-column uip-row-gap-s uip-margin-bottom-l" v-if="section == \'style\'">\n            \n              <dropdown pos="left top" \n              :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']"\n              v-if="returnBlockPartsCount > 0" class="uip-position-sticky uip-top-0" style="z-index:2">\n                \n                <template v-slot:trigger>\n                  \n                  <div class="uip-padding-xs uip-flex uip-flex-between uip-border-rounder uip-flex-center uip-background-muted">\n                  \n                    <div class="uip-flex uip-flex-column">\n                      <div class="uip-text-muted">{{strings.blockPart}}</div>\n                      <div>{{returnActivePart()}}</div>\n                    </div>\n                    \n                    <div class="uip-icon">expand_more</div>\n                  \n                  </div>\n                  \n                </template>\n                \n                <template v-slot:content> \n                  \n                  <div class="uip-padding-xs uip-flex uip-flex-column">\n                    \n                    <div class="uip-flex uip-gap-xs uip-padding-xs hover:uip-background-muted uip-link-default uip-border-rounder uip-flex-center" @click="setSubComponent(\'style\')"\n                    :class="{\'uip-background-muted\' : activeSelector == \'style\'}">\n                      <div class="uip-icon uip-text-l">crop_free</div>\n                      <div class="uip-flex uip-flex-grow uip-flex-center uip-flex-between">\n                        <span class="">{{block.name}} {{strings.blockRoot}}</span>\n                        <span v-if="activeSelector == \'style\'" class="uip-icon uip-icon-large">done</span>\n                      </div>\n                    </div>\n                    \n                      \n                    <template v-for="(group, index) in returnSettings">\n                      <div class="uip-flex uip-gap-xxs uip-gap-xs uip-flex-center uip-padding-xs hover:uip-background-muted uip-link-default uip-border-rounder" v-if="checkIfEmpty(group) && group.name != \'block\' && group.name != \'style\' && group.name != \'advanced\' && group.name != \'container\'" @click="setSubComponent(group.name)" :class="{\'uip-background-muted\' : activeSelector == group.name}">\n                        <div class="uip-icon uip-text-l">{{group.icon}}</div>\n                        <div class="uip-flex uip-flex-row uip-flex-grow uip-gap-xxs uip-flex-center">\n                          <span class="">{{group.label}}</span>\n                          <span v-if="group.class" class="uip-text-muted">({{group.class}})</span>\n                        </div>\n                        <span v-if="activeSelector == group.name" class="uip-icon uip-icon-large">done</span>\n                      </div>\n                      \n                    </template>\n                    \n                  </div>\n                  \n                </template>\n              \n              </dropdown>\n              \n              \n              <div v-if="switchingComponent" class="uip-padding-m uip-flex uip-flex-center uip-flex-middle "><loading-chart></loading-chart></div>\n            \n              <div v-else class="uip-flex uip-flex-column uip-row-gap-s uip-fade-in">\n              \n                \x3c!--Style preset warning--\x3e\n                \n                <div v-if="ifUsingPreset" class="uip-background-orange-wash uip-border-rounder uip-text-s uip-padding-xs uip-scale-in-top uip-flex uip-flex-column uip-row-gap-xs">\n                  {{strings.presetActive}}\n                </div>\n              \n              \n                \x3c!--Pseudo--\x3e\n                \n                <div v-if="hasPseudo()">\n                  <div class="uip-margin-bottom-xxs uip-flex uip-flex-center uip-flex-between">\n                   <div class="uip-flex uip-gap-xxs uip-flex-center uip-text-bold uip-text-emphasis">{{strings.pseudoContent}}</div>\n                  </div> \n                \n                  <div class="uip-padding-s uip-padding-right-remove uip-flex uip-flex-column uip-row-gap-xs">\n                    \n                    \x3c!--Before --\x3e\n                    <div class="uip-grid-col-1-3">\n                    \n                      <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.beforeContent}}</span></div>\n                        \n                      <input class="uip-input uip-w-100p" type="text" v-model="componenetSettings[returnActiveComp].beforeContent">\n                      \n                      \n                    </div>\n                    \n                    \x3c!--After --\x3e\n                    <div class="uip-grid-col-1-3">\n                    \n                      <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.afterContent}}</span></div>\n                        \n                      <input class="uip-input uip-w-100p" type="text" v-model="componenetSettings[returnActiveComp].afterContent">\n                      \n                      \n                    </div>\n                    \n                  </div>\n                </div>\n                \n                \x3c!--Pseudo--\x3e\n              \n                <template v-for="option in returnCompSettings.options">\n                \n                  <div class="">\n                  \n                    <div class="uip-margin-bottom-xxs uip-flex uip-flex-center uip-flex-between">\n                       <div class="uip-flex uip-gap-xxs uip-flex-center">\n                        <span class="uip-text-bold uip-text-emphasis">{{option.label}}</span>\n                        <span class="uip-text-muted" v-if="option.activePseudo && option.activePseudo != \'none\'">{{option.activePseudo}}</span>\n                        \n                        <span v-if="returnLightModeSetting(option.themeMode) == \'dark\'"\n                        :title="strings.editingDarkMode" class="uip-icon uip-text-muted uip-padding-xxxs uip-border-round uip-link-default uip-background-grey uip-margin-left-xxs"  @click="switchOptionTheme(option)">dark_mode</span>\n                        \n                        <span v-else\n                        :title="strings.editingLightMode" class="uip-icon uip-text-muted uip-padding-xxxs uip-border-round uip-link-default uip-background-grey uip-margin-left-xxs" @click="switchOptionTheme(option)">light_mode</span>\n                        \n                       </div>\n                       \n                       <dropdown pos="left top" :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']">\n                        <template v-slot:trigger>\n                          <div v-if="\'pseudo\' in option" class="uip-w-6 uip-ratio-1-1 uip-border-circle uip-background-green-wash" style="border:1px solid var(--uip-color-green)"></div>\n                          <div class="uip-icon uip-link-default uip-text-l">add</div>\n                        </template>\n                        <template v-slot:content>\n                        \n                          <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-s uip-min-w-200">\n                          \n                            <div class="">{{strings.pseudoClasses}}</div>\n                            \n                            <div class="uip-flex uip-flex-column uip-row-gap-xxs">\n                            \n                              <div class="uip-link-muted uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-flex uip-flex-between uip-flex-center" \n                              :class="{\'uip-background-muted\' : !option.activePseudo || option.activePseudo == \'none\' }" @click="switchPseudo(option, \'none\')">\n                                <span>none</span>\n                                <span v-if="!option.activePseudo || option.activePseudo == \'none\'" class="uip-icon">done</span>\n                              </div>\n                              \n                              <template v-for="pseudo in pseudoSelectors">\n                              \n                                <div class="uip-flex uip-gap-xxs">\n                                \n                                  <div class="uip-link-muted uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-flex uip-flex-between uip-flex-center uip-gap-xxs uip-flex-grow" \n                                  :class="{\'uip-background-muted\' : option.activePseudo == pseudo.value }" @click="switchPseudo(option, pseudo.value)">\n                                    \n                                    <span class="uip-flex-grow">{{pseudo.label}}</span>\n                                    <div v-if="hasPseudoSpecific(pseudo.value,option)" class="uip-w-6 uip-ratio-1-1 uip-border-circle uip-background-green-wash" style="border:1px solid var(--uip-color-green)"></div>\n                                    \n                                    <span v-if="option.activePseudo == pseudo.value" class="uip-icon">done</span>\n                                    \n                                  </div>\n                                  \n                                  <button :title="strings.clearState" v-if="hasPseudoSpecific(pseudo.value,option)" @click="clearPseudoState(pseudo.value,option)"\n                                  class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted uip-margin-left-xs">close</button>\n                                  \n                                </div>\n                                \n                                \n                                \n                              </template>\n                              \n                              \n                            </div>\n                          </div>\n                          \n                        </template>\n                      </dropdown>\n                      \n                    </div>\n                    \n                    <div class="uip-padding-s uip-padding-right-remove">\n                    \n                      <div v-if="option.loading" class="uip-padding-m uip-flex uip-flex-center uip-flex-middle "><loading-chart></loading-chart></div>\n                    \n                      <template v-else-if="!option.activePseudo || option.activePseudo == \'none\'">\n                      \n                       <component v-if="option.themeMode == \'light\' || !option.themeMode" :is="option.component" :value="option.value" :args="option.args" \n                       :returnData="function(data){option.value = data}" \n                       :blockSettings="block.settings"/>\n                       \n                       <component v-else :is="option.component" :args="option.args" :value="option.darkValue" \n                       :returnData="function(data){option.darkValue = data}"\n                       :blockSettings="block.settings"/>\n                       \n                      </template>\n                      \n                      <template v-else>\n                      \n                       <component :is="option.component" :value="formatPseudoValue(option)" :args="option.args" \n                       :returnData="function(data){option.pseudo[returnOptionTheme(option)][option.activePseudo] = data}" \n                       :blockSettings="block.settings"/>\n                       \n                      </template>\n                       \n                    </div>\n                    <div v-if="!componentExists(option.component)" class="uip-padding-xxs uip-border-rounder uip-background-green-wash uip-text-s">\n                       {{strings.proOption}}\n                    </div>\n                  </div>\n                  \n                  <div class="uip-border-top"></div>\n                </template>\n                \n                \n                \n                \x3c!--Style presets--\x3e\n                <div v-if="!switchingComponent">\n                  <div class="uip-margin-bottom-xxs uip-text-bold uip-text-emphasis">{{strings.stylePresets}}</div>\n                  \n                  <div v-if="returnPresetLoading" class="uip-padding-m uip-flex uip-flex-center uip-flex-middle "><loading-chart></loading-chart></div>\n                  \n                  \x3c!--Options --\x3e\n                  <div class="uip-padding-s uip-padding-right-remove">\n                  \n                    <div class="uip-grid-col-1-3">\n                  \n                      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-h-30 uip-gap-xs">\n                        {{strings.usePreset}}\n                      </div>\n                        \n                      <div class="uip-flex uip-flex-center uip-gap-xxs">\n                      \n                        \n                        <dropdown pos="left center" class="uip-w-100p" :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']">\n                          \n                          <template v-slot:trigger>\n                          \n                            <button v-if="!componenetSettings[returnActiveComp].preset" class="uip-button-default uip-border-rounder uip-padding-xxs uip-link-muted uip-w-100p uip-flex uip-gap-xxs uip-flex-center uip-flex-middle">\n                              <span class="uip-icon">add</span>\n                            </button>  \n                            \n                            <button v-else class="uip-button-default uip-border-rounder uip-padding-xxs uip-w-100p uip-flex uip-gap-xxs uip-flex-center uip-flex-between">\n                              <span>{{returnPresetName()}}</span>\n                              <span class="uip-icon">expand_more</span>\n                            </button>  \n                          \n                          </template>\n                          \n                          <template v-slot:content>\n                            \n                              <div class="uip-padding-xs uip-flex uip-flex-column uip-w-200 uip-overflow-auto" style="max-height:300px">\n                                \n                                <div class="uip-link-muted uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-flex uip-flex-between" @click="updatePresetValue(false)"\n                                :class="!componenetSettings[returnActiveComp].preset ? \'uip-background-muted\' : \'\'">\n                                  <span>{{strings.none}}</span>\n                                </div>\n                                \n                                <template v-for="(item, index) in block_preset_styles">\n                                    <div class="uip-link-muted uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-flex-grow uip-flex uip-flex-between uip-flex-center"\n                                    :class="componenetSettings[returnActiveComp].preset == index ? \'uip-background-muted\'  : \'\'">\n                                      <span class="uip-flex" @click="updatePresetValue(index)">{{item.name}}</span>\n                                      <div class="uip-icon uip-link-danger" @click="deleteStylePreset(index)">delete</div>\n                                    </div>\n                                    \n                                    \n                                    \n                                </template>\n                              </div>\n                            \n                          </template>\n                        \n                        \n                        </dropdown>\n                        \n                        <button v-if="componenetSettings[returnActiveComp].preset" class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted uip-margin-left-xs" @click="updatePresetValue(false)">close</button>\n                        \n                      </div> \n                      \n                      <template v-if="!componenetSettings[returnActiveComp].preset">\n                      \n                        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-h-30 uip-gap-xs">\n                          {{strings.newPreset}}\n                        </div>\n                        \n                        <div class="uip-flex uip-flex-center uip-w-100p">\n                          <input type="text" class="uip-input uip-input-small uip-w-100p" v-model="newPresetName" :placeholder="strings.name">\n                        </div>\n                         \n                        <div></div>\n                         \n                        <div class="uip-flex uip-flex-center">\n                          <button class="uip-button-default uip-border-rounder uip-w-100p" @click="createNewPreset()">{{strings.createNewPreset}}</button>\n                        </div>\n                      \n                      </template>\n                      \n                      \n                    \n                    </div>\n                    \n                    \n                    \n                  </div>\n                  \n                  \n                </div>  \n                \n                <div class="uip-border-top"></div>\n                \n                <button class="uip-button-warning" @click="clearStyles()">\n                Clear all styles\n                </button>\n                \n              </div>\n              \n              \n              \n              \n            </div>\n            \n            \n            \n            \n            \n            \n            \n            \n            \x3c!--Advanced settings --\x3e\n            <div class="uip-flex uip-flex-column uip-row-gap-xs uip-margin-bottom-l uip-padding-s uip-padding-right-remove" v-if="section == \'advanced\' && returnSettings.advanced">\n              <div class="uip-grid-col-1-3">\n                <template v-for="option in returnSettings.advanced.options">\n                  \n                  \n                    <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-gap-xs uip-h-30">\n                      <span>{{option.label}}</span>\n                      \n                      <uip-tooltip v-if="option.help" :message="option.help">\n                        <span class="uip-icon uip-border-circle uip-background-grey uip-cursor-pointer" style="font-size:12px">question_mark</span>\n                      </uip-tooltip>\n                      \n                    </div>\n                      \n                    <div class="uip-flex uip-flex-center uip-flex-right uip-w-100p uip-margin-bottom-s">\n                      <component v-if="componentExists(option.component)" :is="option.component" :value="option.value" :args="option.args" :returnData="function(data){option.value = data}"></component>\n                      \n                      <div v-else class="uip-padding-xxs uip-border-rounder uip-background-green-wash uip-text-s">\n                         {{strings.proOption}}\n                      </div>\n                    </div>\n                    \n                  \n                </template>\n              </div>\n            </div>\n            \n            \n          </div>\n\t</div>\n        \n  </div>\n        \n        '};