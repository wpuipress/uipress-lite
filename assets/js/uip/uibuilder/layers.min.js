const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent,nextTick}from"../../libs/vue-esm.js";const Layer={name:"Layer",components:{BlockList:defineAsyncComponent(()=>import("./block-list.min.js?ver=3.3.1"))},props:{block:Object,returnData:Function,items:Array},data:()=>({open:!1,queryLoopEnabled:__("Block is using query loop","uipress-lite"),strings:{blocks:__("Blocks","uipress-lite")}}),watch:{"$route.query.block":{handler(e,n){this.maybeOpenLayer()},deep:!0,immediate:!0}},computed:{isActive(){if("block"in this.$route.query&&this.$route.query.block==this.block.uid)return!0},buildClasses(){let e="uip-border-rounder uip-padding-xxs";const n=this.isActive;return e+=n?" uip-text-emphasis uip-background-secondary uip-text-bold uip-text-inverse ":" uip-link-default uip-margin-right-xs",this.uipApp.blockControl&&!n&&this.uipApp.blockControl.returnHoveredBlockUID===this.block.uid&&(e+=" uip-background-primary-wash uip-text-emphasis"),e}},methods:{maybeOpenLayer(){const e=JSON.stringify(this.block),n=this.$route.query.block;this.open=!!e.includes(n)||this.open},openSettings(){this.uipApp.blockControl.setActive(this.block,this.items)}},template:'\n  \n      \n      <div class="uip-border-rounder" :class="{\'uip-background-primary-wash\' : isActive}">\n      \n        <div class="uip-flex ui-flex-middle uip-flex-center uip-gap-xxs"\n        :class="buildClasses" \n        @click="openSettings();open = true"\n        @mouseenter.prevent.stop="uipApp.blockControl.setHover({},block)"\n        @mouseleave.prevent.stop="uipApp.blockControl.removeHover({},block)"\n        @contextmenu.prevent.stop="uipApp.blockcontextmenu.show({event: $event, list: items, index: index, block: block})">\n          \n          \n          \n          \x3c!--Chevs --\x3e\n          <div v-if="block.content" class="uip-ratio-1-1 uip-icon uip-line-height-1 uip-cursor-pointer uip-flex uip-flex-center"\n          @click.prevent.stop="open = !open">\n            <span v-if="!open">chevron_right</span>\n            <span v-if="open">expand_more</span>\n          </div>\n          \n          \n          <div class="uip-cursor-pointer uip-icon uip-icon-small-emphasis">{{block.icon}}</div>\n          \n          \n          <div class="uip-cursor-pointer uip-flex-grow uip-text-s uip-no-wrap uip-flex-center uip-flex-between uip-flex">\n            <span>{{block.name}}</span>\n            <span :title="queryLoopEnabled" v-if="hasNestedPath(block, [\'query\', \'enabled\'])" class="uip-cursor-pointer uip-icon uip-icon-small-emphasis uip-text-l">all_inclusive</span>\n          </div>\n          \n          \n          \n        </div>\n        \n        <div v-if="open && block.content" class="uip-margin-left-xs  uip-padding-xs uip-padding-right-remove uip-flex uip-flex-column uip-gap-xs">\n        \n        \n          <uip-draggable \n          :class="{\'uip-min-h-30\' : !block.content.length}"\n          class="uip-flex uip-flex-column uip-row-gap-xxs uip-w-100p uip-template-layers"\n          :group="{ name: \'uip-layer-blocks\', pull: true, put: true }"\n          :list="block.content"\n          ghost-class="uip-block-ghost"\n          animation="300"\n          :sort="true">\n          \n                    <template v-for="(element, index) in block.content" :key="element.uid">\n                    \n                      <Layer :block="element" :items="block.content"/>\n                      \n                    </template>  \n          \n          </uip-draggable>\n          \n          \x3c!--Block selector--\x3e\n          <dropdown width="260" pos="right center" ref="blockSelector"\n          class="uip-w-100p uip-flex uip-flex-center uip-flex-middle uip-flex-row uip-padding-right-xs">\n            <template v-slot:trigger>\n              <button class="uip-button-default uip-icon uip-w-100p uip-text-s uip-padding-xxs" >\n                add\n              </button>\n            </template>\n            <template v-slot:content>\n              <div class="uip-padding-s uip-max-w-300 uip-w-300 uip-max-h-500 uip-flex uip-flex-column uip-gap-s" style="overflow:auto">\n                \n                <div class="uip-flex uip-flex-between uip-flex-center">\n                  <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ strings.blocks }}</div>\n                  <div @click="$refs.blockSelector.close()"\n                  class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                    <span class="uip-icon">close</span>\n                  </div>\n                </div>\n              \n                <BlockList mode="click" :insertArea="block.content" @item-added="$refs.blockSelector.close()"/>\n              </div>\n            </template>\n          </dropdown>\n          \x3c!--End block selector--\x3e\n        \n        \n        </div>\n      \n      </div>\n  \n  '};export default{name:"layersRecursive",props:{content:Array,returnData:Function},components:{BlockList:defineAsyncComponent(()=>import("./block-list.min.js?ver=3.3.1")),Layer:Layer},data(){return{items:this.content,queryLoopEnabled:__("Block is using query loop","uipress-lite"),drag:!1,strings:{blocks:__("Blocks","uipress-lite")}}},inject:["uiTemplate"],watch:{content:{handler(e,n){this.items=e},deep:!0}},methods:{returnDragStyle(){if(this.uiTemplate.drag)return"border-color:var(--uip-background-primary);"},openSettings(e){this.uipApp.blockControl.setActive(e,this.items)},buildClasses(e){let n="uip-border-rounder uip-padding-xxs";const i=this.isActive(e.uid);return n+=i?" uip-background-secondary uip-text-bold uip-text-inverse":" uip-background-muted",this.uipApp.blockControl&&!i&&this.uipApp.blockControl.returnHoveredBlockUID===e.uid&&(n+=" uip-background-primary-wash"),n}},template:'\n           \n\t  <uip-draggable \n\t  class="uip-flex uip-flex-column uip-row-gap-xxs uip-w-100p uip-template-layers"\n\t  :group="{ name: \'uip-layer-blocks\', pull: true, put: true }"\n      :list="items"\n\t  ghost-class="uip-block-ghost"\n      animation="300"\n\t  :sort="true">\n    \n        \n              <template v-for="(element, index) in items" :key="element.uid">\n              \n                <Layer :block="element" :items="items"/>\n                \n              </template>  \n    \n\t  </uip-draggable>\n    \n    \n    \x3c!--Block selector--\x3e\n    <dropdown  pos="right center" ref="blockSelector"\n    class="uip-w-100p uip-flex uip-flex-center uip-flex-middle uip-flex-row">\n      <template v-slot:trigger>\n        <button class="uip-button-default uip-icon uip-w-100p uip-text-s uip-padding-xxs" >\n          add\n        </button>\n      </template>\n      <template v-slot:content>\n        <div class="uip-padding-s uip-max-w-300 uip-w-300 uip-max-h-500 uip-flex uip-flex-column uip-gap-s" style="overflow:auto">\n          \n          <div class="uip-flex uip-flex-between uip-flex-center">\n            <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ strings.blocks }}</div>\n            <div @click="$refs.blockSelector.close()"\n            class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n              <span class="uip-icon">close</span>\n            </div>\n          </div>\n        \n          <BlockList mode="click" :insertArea="items" @item-added="$refs.blockSelector.close()"/>\n        </div>\n      </template>\n    </dropdown>\n    \x3c!--End block selector--\x3e\n    \n\t    '};