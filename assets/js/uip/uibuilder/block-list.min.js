const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent,nextTick}from"../../libs/vue-esm-dev.js";export default{props:{mode:String,insertArea:Array},data(){return{loading:!0,categories:[],search:"",sortedBlocks:this.uipApp.data.blocks.sort((e,i)=>e.name.localeCompare(i.name)),strings:{proBlock:__("This block requires uipress pro. Upgrade to unlock.","uipress-lite"),seachBlocks:__("Search blocks...","uipress-lite")}}},inject:["uipress","uiTemplate"],mounted(){this.removeOldBlocks()},computed:{returnCats(){const e=["responsive-grid","uip-admin-menu","uip-user-meta-block"];return Object.entries(this.returnGroups).map(([i,n])=>{const t=this.uipApp.data.blocks.filter(n=>n.group===i&&!e.includes(n.moduleName)).sort((e,i)=>e.name.localeCompare(i.name));return{name:n.label,blocks:t}})},returnGroups(){return this.uipApp.data.blockGroups}},methods:{removeOldBlocks(){const e=["responsive-grid","uip-admin-menu","uip-user-meta-block"];this.sortedBlocks=this.sortedBlocks.filter(i=>!e.includes(i.moduleName))},clone(e){let i=JSON.parse(JSON.stringify(e));return i.tooltip={},i.settings={},delete i.path,delete i.args,delete i.category,delete i.description,delete i.optionsEnabled,delete i.path,i},componentExists(e){if(e.premium&&!this.uiTemplate.proActivated)return!1;const i=e.moduleName;return!!this.$root._.appContext.components[i]||void 0},async insertAtPos(e){if("click"!=this.mode)return;if(!Array.isArray(this.insertArea))return;let i=this.clone(e);i.uid=this.uipress.createUID(),this.insertArea.push(i),await nextTick();const n=this.insertArea[this.insertArea.length-1];this.uipApp.blockControl.setActive(n,this.insertArea)},inSearch(e){if(""==this.search)return!0;let i=this.search.toLowerCase();return!!e.name.toLowerCase().includes(i)||!!e.description.toLowerCase().includes(i)}},template:'\n    \n    <div class="">\n    \n        <div class="uip-flex uip-padding-xxs uip-search-block uip-border-round uip-margin-bottom-s">\n          <span class="uip-icon uip-text-muted uip-margin-right-xs uip-text-l uip-icon uip-icon-medium">search</span>\n          <input class="uip-blank-input uip-flex-grow uip-text-s" type="search" :placeholder="strings.seachBlocks" autofocus="" v-model="search">\n        </div>\n        \n        \x3c!--Searching--\x3e\n        <uip-draggable v-if="search != \'\'"\n          :list="sortedBlocks" \n          class="uip-grid-col-3 uip-grid-gap-xs uip-flex-center"\n          handle=".uip-block-drag"\n          :group="{ name: \'uip-blocks\', pull: \'clone\', put: false, revertClone: true }"\n          animation="300"\n          :sort="false"\n          :clone="clone"\n          ghostClass="uip-drop-in-ghost"\n          itemKey="name">\n            <template v-for="(element, index) in sortedBlocks" :key="element.name" :index="index">\n          \n                <div v-show="componentExists(element) && inSearch(element)" class="uip-block-item" :block-name="element.name">\n                    <div @click="insertAtPos(element)" class="uip-border-rounder uip-padding-xs uip-link-default uip-background-muted hover:uip-background-grey uip-cursor-pointer uip-block-drag uip-no-text-select">\n                      <div class="uip-flex uip-flex-column uip-flex-center">\n                        <div class="uip-icon uip-icon-medium uip-text-xl">\n                          {{element.icon}}\n                        </div> \n                        <div class="uip-text-center uip-text-s">{{element.name}}</div>\n                      </div>\n                    </div>\n                </div>\n            \n            </template>\n        </uip-draggable>\n              \n        \n        <template v-if="search == \'\'" v-for="cat in returnCats">\n          \n            <div class="uip-flex uip-margin-bottom-s uip-border-rounder uip-border-round uip-text-bold uip-text-emphasis">{{cat.name}}</div>\n            <div class=" uip-margin-bottom-s uip-flex-wrap uip-flex-row">\n          \n            \n              <uip-draggable \n                :list="cat.blocks" \n                class="uip-grid-col-3 uip-grid-gap-xs uip-flex-center"\n                handle=".uip-block-drag"\n                :group="{ name: \'uip-blocks\', pull: \'clone\', put: false, revertClone: true }"\n                animation="300"\n                :sort="false"\n                :clone="clone"\n                ghostClass="uip-drop-in-ghost"\n                itemKey="name">\n                  <template v-for="(element, index) in cat.blocks" :key="element.name" :index="index">\n                \n                      <div v-if="componentExists(element) && inSearch(element)" class="uip-block-item" :block-name="element.name">\n                        <uip-tooltip :message="element.description" :delay="500">\n                          <div @click="insertAtPos(element)" class="uip-border-rounder uip-padding-xs uip-link-default uip-background-muted hover:uip-background-grey uip-cursor-pointer uip-block-drag uip-no-text-select">\n                            <div class="uip-flex uip-flex-column uip-flex-center">\n                              <div class="uip-icon uip-icon-medium uip-text-xl">\n                                {{element.icon}}\n                              </div> \n                              <div class="uip-text-center uip-text-s">{{element.name}}</div>\n                            </div>\n                          </div>\n                        </uip-tooltip>\n                      </div>\n                      \n                      <div v-else-if="inSearch(element)" class="uip-block-item" :block-name="element.name">\n                        <uip-tooltip :message="strings.proBlock" :delay="200">\n                          <div class="uip-border-rounder uip-padding-xs uip-background-green-wash uip-cursor-pointer">\n                            <div class="uip-flex uip-flex-column uip-flex-center">\n                              <div class="uip-icon uip-icon-medium uip-text-xl">\n                                redeem\n                              </div> \n                              <div class="uip-text-center uip-text-xs uip-text-s">{{element.name}}</div>\n                            </div>\n                          </div>\n                        </uip-tooltip>\n                      </div>\n                  \n                  </template>\n              </uip-draggable>\n              \n            \n            </div>\n          \n        </template>\n      </div>'};