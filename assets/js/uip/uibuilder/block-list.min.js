const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent,nextTick}from"../../libs/vue-esm-dev.js";const ToggleSection={props:{title:String,startOpen:Boolean},data:()=>({open:!1}),created(){this.startOpen&&(this.open=!0)},computed:{returnVisibilityIcon(){return this.open?"expand_more":this.open?void 0:"chevron_left"}},methods:{toggleVisibility(){this.open=!this.open}},template:'\n  \n    <div class="uip-flex uip-flex-column uip-row-gap-s">\n    \n      \x3c!-- Title --\x3e\n      <div class="uip-flex uip-gap-s uip-flex-center uip-flex-between">\n        \n       \n        <div class="uip-flex uip-gap-xxs uip-flex-center uip-cursor-pointer uip-flex-between uip-flex-grow"\n        @click="toggleVisibility()">\n          \n          \n          <span class="uip-text-bold uip-text-emphasis">{{ title }}</span> \n          \n          <a class="uip-link-muted uip-icon">{{ returnVisibilityIcon }}</a>\n          \n          \n        </div>\n      \n      </div>\n      \n      <slot v-if="open"></slot>\n      \n    </div>\n  \n  '};export default{components:{ToggleSection:ToggleSection},props:{mode:String,insertArea:Array},data:()=>({loading:!0,categories:[],search:"",strings:{proBlock:__("This block requires uipress pro. Upgrade to unlock.","uipress-lite"),seachBlocks:__("Search blocks...","uipress-lite"),upgrade:__("Upgrade","uipress-lite")}}),inject:["uiTemplate"],computed:{sortedBlocks(){return this.removeOldBlocks().sort((e,i)=>e.name.localeCompare(i.name))},returnCats(){const e=["responsive-grid","uip-admin-menu","uip-user-meta-block"];return Object.entries(this.returnGroups).map(([i,n])=>{const t=this.uipApp.data.blocks.filter(n=>n.group===i&&!e.includes(n.moduleName)).sort((e,i)=>e.name.localeCompare(i.name));return{name:n.label,blocks:t}})},returnGroups(){return this.uipApp.data.blockGroups}},methods:{returnGroupLabel(e){return this.uipApp.data.blockGroups[e].label},removeOldBlocks(){const e=["responsive-grid","uip-admin-menu","uip-user-meta-block"];return this.uipApp.data.blocks.filter(i=>!e.includes(i.moduleName))},clone(e){let i=JSON.parse(JSON.stringify(e));return i.tooltip={},i.settings={},delete i.path,delete i.args,delete i.category,delete i.description,delete i.optionsEnabled,delete i.path,delete i.hover,i},componentExists(e){if(e.premium&&!this.uiTemplate.proActivated)return!1;const i=e.moduleName;return!!this.$root._.appContext.components[i]||void 0},async insertAtPos(e){if("click"!=this.mode)return;if(!Array.isArray(this.insertArea))return;let i=this.clone(e);i.uid=this.createUID(),this.insertArea.push(i),await nextTick();const n=this.insertArea[this.insertArea.length-1];this.uipApp.blockControl.setActive(n,this.insertArea),this.$emit("item-added")},inSearch(e){if(""==this.search)return!0;let i=this.search.toLowerCase();return!!e.name.toLowerCase().includes(i)||!!e.description.toLowerCase().includes(i)}},template:'\n    \n    <div class="uip-flex uip-flex-column uip-row-gap-s">\n    \n        <div class="uip-flex uip-padding-xxs uip-search-block uip-border-rounder uip-padding-xxs uip-background-muted">\n          <span class="uip-icon uip-text-muted uip-margin-right-xs uip-text-l uip-icon uip-icon-medium">search</span>\n          <input class="uip-blank-input uip-flex-grow uip-text-s" type="search" :placeholder="strings.seachBlocks" autofocus="" v-model="search">\n        </div>\n        \n        \x3c!--Searching--\x3e\n        <uip-draggable v-if="search != \'\'"\n          :list="sortedBlocks" \n          class="uip-flex uip-flex-column uip-row-gap-xs uip-padding-left-xs"\n          handle=".uip-block-drag"\n          :group="{ name: \'uip-blocks\', pull: \'clone\', put: false, revertClone: true }"\n          animation="300"\n          :sort="false"\n          :clone="clone"\n          ghostClass="uip-drop-in-ghost"\n          itemKey="name">\n            <template v-for="(element, index) in sortedBlocks" :key="element.name" :index="index">\n          \n                <div v-show="componentExists(element) && inSearch(element)" class="uip-block-item" :block-name="element.name">\n                    <div @click="insertAtPos(element)" class="uip-border-rounder uip-link-default hover:uip-background-muted uip-cursor-pointer uip-block-drag uip-no-text-select">\n                      <div class="uip-flex uip-gap-xxs uip-flex-center">\n                        <div class="uip-icon uip-icon-medium uip-text-l uip-padding-xxs uip-background-muted uip-border-rounder uip-dark-mode uip-text-emphasis uip-margin-right-xs">\n                          <span>{{element.icon}}</span>\n                        </div> \n                        <div class="uip-text-center uip-text-s uip-text-muted">{{returnGroupLabel(element.group)}}</div>\n                        <div class="uip-icon uip-text-muted">chevron_right</div>\n                        <div class="uip-text-s">{{element.name}}</div>\n                      </div>\n                    </div>\n                </div>\n            \n            </template>\n        </uip-draggable>\n              \n        \n        <template v-if="search == \'\'" v-for="cat in returnCats">\n          \n            <ToggleSection :title="cat.name" :startOpen="true">\n              \n                <uip-draggable \n                v-if="cat.blocks.length"\n                :list="cat.blocks" \n                class="uip-flex uip-flex-column uip-row-gap-xs uip-padding-left-xs"\n                handle=".uip-block-drag"\n                :group="{ name: \'uip-blocks\', pull: \'clone\', put: false, revertClone: true }"\n                animation="300"\n                :sort="false"\n                :clone="clone"\n                ghostClass="uip-drop-in-ghost"\n                itemKey="name">\n                  <template v-for="(element, index) in cat.blocks" :key="element.name" :index="index">\n                \n                       <div v-if="componentExists(element)" @click="insertAtPos(element)" class="uip-border-rounder uip-link-default hover:uip-background-muted uip-cursor-pointer uip-block-drag uip-no-text-select">\n                         <div class="uip-flex uip-gap-xxs uip-flex-center">\n                           <div class="uip-icon uip-icon-medium uip-text-l uip-padding-xxs uip-background-muted uip-dark-mode uip-border-rounder uip-text-emphasis uip-margin-right-xs">\n                             <span>{{element.icon}}</span>\n                           </div> \n                           <div class="uip-text-s">{{element.name}}</div>\n                         </div>\n                       </div>\n                       \n                      <div v-else @mouseenter="element.hover=true" @mouseleave="element.hover = false"\n                      class="uip-border-rounder uip-link-default hover:uip-background-muted uip-cursor-pointer uip-block-drag uip-no-text-select">\n                        <div class="uip-flex uip-gap-xxs uip-flex-center">\n                          <div class="uip-icon uip-icon-medium uip-text-l uip-padding-xxs uip-background-green-wash uip-border-rounder uip-margin-right-xs ">\n                            <span>redeem</span>\n                          </div> \n                          <div class="uip-text-s uip-flex-grow">{{element.name}}</div>\n                          \n                          <a v-show="element.hover"\n                          href="https://uipress.co?utm_source=uipressupgrade&utm_medium=referral" \n                          target="_BLANK" \n                          class="uip-link-muted uip-flex uip-gap-xxxs uip-no-underline uip-flex-center uip-padding-right-xxs uip-fade-in">\n                            <span class="uip-text-s">{{strings.upgrade}}</span>\n                            <span class="uip-icon">chevron_right</span>\n                          </a>\n                        </div>\n                      </div>\n                      \n                  \n                  </template>\n                </uip-draggable>\n            \n            </ToggleSection>  \n            \n          \n        </template>\n      </div>'};