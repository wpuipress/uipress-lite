const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent}from"../../libs/vue-esm-dev.js";export default{components:{globalVariables:defineAsyncComponent(()=>import("./uip-builder-variables.min.js?ver=3.2.12"))},data:()=>({loading:!1,globalSettings:{},search:"",render:!0,ui:{strings:{siteSettings:__("Site settings","uipress-lite"),saveSettings:__("Save settings","uipress-lite"),settingsSaved:__("Settings saved","uipress-lite"),proOption:__("This is a pro option. Upgrade to unlock","uipress-lite"),searchSettings:__("Search settings","uipress-lite")}}}),inject:["uipData","router","uipress"],mounted:function(){this.loading=!1,this.getSettings()},watch:{"uiTemplate.globalSettings":{handler(e,i){},deep:!0},"uiTemplate.globalSettings":{handler(e,i){},deep:!0}},computed:{returnGlobalSettings(){return this.globalSettings}},methods:{getSettings(){let e=this;e.loading=!0;let i=new FormData;i.append("action","uip_get_global_settings"),i.append("security",uip_ajax.security),e.uipress.callServer(uip_ajax.ajax_url,i).then(i=>{e.loading=!1,i.error?e.uipress.notify(i.message,"","error",!0):(this.getUserStyles(),i.options&&e.uipress.isObject(i.options)&&Object.keys(i.options).length>0&&(e.globalSettings=i.options))})},getUserStyles(){let e=this,i=new FormData;i.append("action","uip_get_ui_styles"),i.append("security",uip_ajax.security),e.uipress.callServer(uip_ajax.ajax_url,i).then(i=>{i.error||i.styles&&e.injectSavedStyles(i.styles)})},injectSavedStyles(e){let i=this.uipData.themeStyles;for(let t in i){let n=i[t];e[n.name]&&("value"in e[n.name]&&(n.value=e[n.name].value),"darkValue"in e[n.name]&&(n.darkValue=e[n.name].darkValue))}for(let i in e){let t=e[i];t.user&&(this.uipData.themeStyles[t.name]=t)}},returnTemplateOption(e,i){let t=i.uniqueKey,n=this.globalSettings;return e in n||(n[e]={}),t in n[e]||(i.accepts===String&&(n[e][t]=""),i.accepts===Array&&(n[e][t]=[]),i.accepts===Object&&(n[e][t]={}),i.accepts===Boolean&&(n[e][t]=!1)),n[e][t]},saveTemplateOption(e,i,t){this.globalSettings[e][i]=t},saveSettings(){let e=this,i=e.uipress.uipEncodeJson(e.globalSettings),t=new FormData;t.append("action","uip_save_global_settings"),t.append("security",uip_ajax.security),t.append("settings",i),e.uipress.callServer(uip_ajax.ajax_url,t).then(i=>{i.error?e.uipress.notify(i.message,"","error",!0):e.uipress.notify(e.ui.strings.settingsSaved,"","success",!0)})},conditionalShowGroup(e){return!("condition"in e)||e.condition(this.globalSettings)},inSearch(e){let i=this.search.toLowerCase(),t=e.label.toLowerCase(),n=e.help.toLowerCase();return!(!t.includes(i)&&!n.includes(i))},exportSettings(){let e;self=this;e=JSON.stringify({uipSettings:self.globalSettings});let i=new Date,t=String(i.getDate()).padStart(2,"0"),n="uip-site-settings--"+(String(i.getMonth()+1).padStart(2,"0")+"-"+t+"-"+i.getFullYear())+".json",s="data:text/json;charset=utf-8,"+encodeURIComponent(e),p=this.$refs.exporter;p.setAttribute("href",s),p.setAttribute("download",n),p.click();let o=__("Settings exported","uipress-lite");self.uipress.notify(o,"","success",!0)},importSettings(){let e=this,i=e.uipress.notify(__("Importing settings","uipress-lite"),"","default",!1,!0),t=event.target.files[0];if("application/json"!=t.type)return e.uipress.notify(__("Settings must be in valid JSON format","uipress-lite"),"","error",!0,!1),void e.uipress.destroy_notification(i);if(t.size>1e6)return e.uipress.notify(__("Uploaded file is too big","uipress-lite"),"","error",!0,!1),void e.uipress.destroy_notification(i);let n=new FileReader;n.readAsText(t,"UTF-8"),n.onload=function(t){let n,s=t.target.result;try{n=JSON.parse(s)}catch(t){return e.uipress.notify(t,"","error",!0,!1),void e.uipress.destroy_notification(i)}if(null!=n){if(!Array.isArray(n)&&!e.uipress.isObject(n))return e.uipress.notify("Settings is not valid","","error",!0,!1),void e.uipress.destroy_notification(i);let t;return"uipSettings"in n&&e.uipress.isObject(n.uipSettings)?(t=n.uipSettings,e.globalSettings=t,e.uipress.notify(__("Settings imported","uipress-lite"),"","success",!0,!1),e.uipress.destroy_notification(i),e.render=!1,void requestAnimationFrame(()=>{e.render=!0})):(e.uipress.notify(__("Settings mismatch","uipress-lite"),"","error",!0,!1),void e.uipress.destroy_notification(i))}e.uipress.notify(__("JSON parse failed","uipress-lite"),"","error",!0,!1),e.uipress.destroy_notification(i)}}},template:'\n    \n      <uip-floating-panel closeRoute="/">\n      \n      \n        \x3c!-- Site settings --\x3e\n        <div class="uip-flex uip-w-100p uip-h-100p">\n        \n          <div class="uip-flex uip-flex-column uip-w-100p uip-max-h-100p uip-flex-no-wrap uip-row-gap-xs ">\n          \n            <div class="uip-text-l uip-text-emphasis uip-padding-m uip-padding-remove-bottom">{{ui.strings.siteSettings}}</div>\n            \n            <div class="uip-padding-m uip-padding-remove-bottom  uip-padding-remove-top">\n              <div class="uip-border-top uip-margin-top-xs uip-margin-bottom-xs"></div>\n            </div>\n            \n            <div v-if="loading" class="uip-w-100p uip-flex uip-flex-middle uip-flex-center uip-padding-s"><loading-chart></loading-chart></div>\n            \n            <div v-if="!loading" class="uip-flex-grow uip-flex uip-flex-column uip-row-gap-s uip-overflow-auto uip-padding-m uip-padding-remove-bottom  uip-padding-remove-top">\n            \n            \n              <div class="uip-border-round uip-flex uip-flex-center uip-gap-xs uip-margin-bottom-xs uip-margin-top-xs"> \n                <div class="uip-icon uip-icon-l uip-text-muted">search</div>\n                <input class="uip-blank-input uip-flex-grow" type="text" v-model="search" :placeholder="ui.strings.searchSettings">\n              </div>\n              \n              \n              \n              \x3c!--Searching Dynamic settings --\x3e\n              <div  v-if="search != \'\'" class="uip-padding-xs uip-flex uip-flex-column uip-row-gap-m">\n                <template v-for="group in uipData.globalGroupOptions">\n                    \n                      \x3c!--Loop through group settings --\x3e\n                      \n                      <template v-for="option in group.settings">\n                        <template v-if="conditionalShowGroup(option) && inSearch(option)">\n                          <div class="uip-flex uip-flex-column uip-row-gap-xs uip-flex-start">\n                          \n                            \n                            <div class="uip-flex uip-gap-xxxs uip-flex-center">\n                              <div class="uip-text-bold uip-text-muted">{{group.label}}</div>\n                              <div class="uip-icon uip-text-muted">chevron_right</div>\n                              <div class="uip-text-bold">{{option.label}}</div>\n                            </div>\n                            <div v-if="option.help" class="uip-text-s uip-text-muted">{{option.help}}</div>\n                            \n                            <a href="https://uipress.co?utm_source=uipressupgrade&utm_medium=referral" target="_BLANK" v-if="option.proOption" class="uip-padding-xxs uip-border-round uip-background-green-wash uip-text-s uip-link-default uip-no-underline">\n                              {{ui.strings.proOption}}\n                            </a>\n                            \n                            <component v-else :is="option.component" :value="returnTemplateOption(group.name, option)" :args="option.args"\n                            :returnData="function(data){saveTemplateOption(group.name, option.uniqueKey, data)}"></component>\n                          \n                          </div>\n                          \n                          <div class="uip-border-top"></div>\n                        </template>\n                        \n                      </template>\n                    \n                </template>\n              </div>\n              \n              \n              \x3c!-- Dynamic settings --\x3e\n              <template v-else v-for="(group, index) in uipData.globalGroupOptions">\n                <accordion :openOnTick="false" v-if="conditionalShowGroup(group)">\n                  <template v-slot:title>\n                    <div class="uip-flex-grow uip-flex uip-gap-xxs uip-flex-center uip-text-bold">\n                      <div class="">{{group.label}}</div>\n                    </div>\n                  </template>\n                  <template v-slot:content>\n                    <div class="uip-padding-xs uip-padding-left-s uip-flex uip-flex-column uip-row-gap-s">\n                      \x3c!--Loop through group settings --\x3e\n                      \n                      <template v-for="option in group.settings" v-if="render">\n                        <div v-if="conditionalShowGroup(option)"  class="uip-grid-col-4-6">\n                          \n                          <div class="uip-flex uip-flex-center uip-gap-xs uip-h-30">\n                          \n                              <div class="uip-text-muted uip-flex uip-flex-center uip-flex uip-gap-xs">\n                              \n                                \n                                \n                                <dropdown v-if="option.help" pos="left center" :openOnHover="true" class="uip-flex-no-shrink" triggerClass="uip-flex-no-shrink" :hover="true">\n                                  <template class="uip-flex-no-shrink" v-slot:trigger>\n                                    <div class="uip-link-muted hover:uip-background-grey uip-text-center uip-border-round uip-background-muted uip-text-bold uip-text-xs uip-w-16 uip-ratio-1-1 uip-text-s uip-flex-no-shrink">i</div>\n                                  </template>\n                                  <template v-slot:content>\n                                    <div class="uip-text-s uip-padding-xs uip-max-w-200">{{option.help}}</div>\n                                  </template>\n                                </dropdown>\n                                \n                                <span>{{option.label}}</span>\n                                \n                              </div>\n                            \n                          </div>\n                          \n                          \n                          <div class="uip-w-100p">\n                            <a href="https://uipress.co?utm_source=uipressupgrade&utm_medium=referral" target="_BLANK" v-if="option.proOption" class="uip-padding-xxs uip-border-round uip-background-green-wash uip-text-s uip-link-default uip-no-underline uip-w-100p uip-text-center uip-flex">\n                              {{ui.strings.proOption}}\n                            </a>\n                            <component v-else :is="option.component" :value="returnTemplateOption(group.name, option)" :args="option.args"\n                            :returnData="function(data){saveTemplateOption(group.name, option.uniqueKey, data)}"></component>\n                          </div>\n                        \n                        </div>\n                        \n                      </template>\n                      \n                      <template v-if="group.name == \'theme\'">\n                        <globalVariables/>\n                      </template>\n                      \x3c!--End loop through group settings --\x3e\n                    </div>\n                  </template>\n                </accordion>\n                <div class="uip-border-top" v-if="conditionalShowGroup(group)"></div>\n              </template>\n              \x3c!-- End dynamic settings --\x3e\n            </div>\n            \n            <div v-if="!loading" class="uip-flex uip-flex-between uip-padding-m">\n            \n              <div class="uip-flex uip-gap-xs">\n                <button class="uip-button-default uip-icon" @click="exportSettings()">download</button>\n                <a class="uip-hidden" ref="exporter"></a>\n                \n                <label class="uip-button-default">\n                  \n                  <div class="uip-icon">upload</div>\n                  <input hidden accept=".json" type="file" single="" id="uip-import-layout" @change="importSettings($event)">\n                  \n                </label>\n              </div>\n            \n              <button class="uip-button-primary" @click="saveSettings()">{{ui.strings.saveSettings}}</button>\n              \n            </div>\n            \n            \n          </div>\n        </div>\n        \n        \x3c!-- site settings --\x3e\n      \n      </uip-floating-panel>\n      '};