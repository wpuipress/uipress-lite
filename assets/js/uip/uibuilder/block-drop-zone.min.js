import{nextTick}from"../../libs/vue-esm-dev.js";import blockRender from"./block-render.min.js?ver=3.2.12";export default{components:{BlockRender:blockRender},props:{content:Array,returnData:Function,layout:String,dropAreaStyle:String,contextualData:Object},data(){return{items:this.content,rendered:!0,randomClass:this.createUID(),strings:{doesntExist:__("This component is missing or can't be loaded","uipress-lite"),totalItems:__("Total items","uipress-lite"),search:__("Search","uipress-lite"),proOptionUnlock:__("This is a pro option. Upgrade to unlock","uipress-lite")}}},inject:["uiTemplate"],watch:{content:{handler(e,t){this.items=e},deep:!0},itemsLength:{handler(e,t){this.renderd&&this.updateList()}}},computed:{isProduction(){return"prod"==this.uiTemplate.display||!!this.uiTemplate.isPreview},itemsLength(){return this.items.length},returnItems(){return this.items}},methods:{async forceReload(){this.rendered=!1,await nextTick(),this.rendered=!0},inject_block_presets(e){const t=e.moduleName,i=this.uipApp.data.blocks,n=i.findIndex(e=>e.moduleName===t);if(n<0)return;const s=i[n].optionsEnabled,o=s.findIndex(e=>"block"===e.name),r=["block","advanced"];for(let t of s){if(r.includes(t.name))continue;if(!1 in t)continue;const i=t.presets;if(this.isObject(i))for(let n in i)this.ensureNestedObject(e,"settings",t.name,"options",n,"value"),e.settings[t.name].options[n].value={...i[n]}}if(o<0)return;const a=s[o].options;this.ensureNestedObject(e,"settings","block","options");for(let t of a){if(!("value"in t))continue;const i=t.uniqueKey?t.uniqueKey:t.option;e.settings.block.options[i]={value:t.value}}},updateList(){this.renderd=!1;this.items.forEach((e,t)=>{if(e)return e.remote?(this.importBlock(e,t),void(this.items[t]=null)):void(0===Object.keys(e.settings).length&&this.inject_block_presets(e,e.settings))}),this.items=this.items.filter(e=>null!==e),this.renderd=!0},importBlock(e,t){let i=this,n=new FormData,s=i.uipApp.notifications.notify(__("Importing template","uipress-lite"),"","default",!1,!0);i.sendServerRequest(e.path,n).then(e=>{e.error&&(i.uipApp.notifications.notify(e.message,"","error",!0),i.uipApp.notifications.remove(s));let n=JSON.parse(e);if(Array.isArray(n)){(n=n[0]).uid=i.createUID(),i.isObject(n)||(i.uipApp.notifications.notify(__("Unable to import template right now","uipress-lite"),"","error",!0),i.uipApp.notifications.remove(s));let e=[];if("content"in n){for(const t of n.content)e.push(i.cleanBlock(t));n.content=e}i.uipApp.notifications.remove(s),i.uipApp.notifications.notify(__("Template imported","uipress-lite"),"","success",!0),i.items.splice(t,0,n)}else i.uipApp.notifications.notify(__("Unable to import template right now","uipress-lite"),"","error",!0),i.uipApp.notifications.remove(s)})},cleanBlock(e){let t=Object.assign({},e);return t.options=[],t.settings=JSON.parse(JSON.stringify(t.settings)),t.content&&(t.content=this.duplicateChildren(t.content)),t},duplicateChildren(e){let t=[];for(let i of e){let e=Object.assign({},i);e.settings=JSON.parse(JSON.stringify(e.settings)),e.content&&(e.content=this.duplicateChildren(e.content)),t.push(e)}return t},async itemAdded(e){if(!e.added)return;if(this.hasNestedPath(e,["added","element","remote"]))return;let t=e.added.element;"uid"in t||(t.uid=this.createUID()),0===Object.keys(t.settings).length&&this.inject_block_presets(t,t.settings),await this.forceReload(),this.uipApp.blockControl.setActive(t,this.items),this.returnData(this.items)}},template:'\n    \n      \n      \n                 \n      <uip-draggable v-if="rendered && !isProduction"\n      :class="[{\'uip-border-dashed\' : uiTemplate.display == \'builder\'}, randomClass]" \n      class="uip-flex uip-w-100p uip-builder-drop-area"\n      :group="{ name: \'uip-blocks\', pull: true, put: true }" \n      :list="items"\n      @start="uipApp.scrolling=true"\n      @end="uipApp.scrolling=false"\n      @change="itemAdded"\n      ghostClass="uip-canvas-ghost"\n      animation="300"\n      :sort="true">\n              \n              <template v-for="(element, index) in returnItems" \n              :key="element.uid" :index="index">\n                \n                <BlockRender :block="element" :list="items" :index="index" :contextualData="contextualData"/>\n              \n              </template>\n              \n              \n      </uip-draggable>\n      \n      \x3c!-- Production template--\x3e\n      <div class="uip-flex uip-w-100p" v-else-if="rendered" :class="randomClass">\n        <template v-for="(element, index) in returnItems">\n          \n          <BlockRender :block="element" :list="items" :index="index" :contextualData="contextualData"/>\n          \n        </template>\n      </div>\n      \n\t\t'};