import{nextTick}from"../../libs/vue-esm-dev.js";import blockRender from"./block-render.min.js?ver=3.3.00";const{__:__}=wp.i18n;export default{components:{BlockRender:blockRender},props:{content:{default:[],type:Array},returnData:Function,layout:String,dropAreaStyle:String},data(){return{items:[],rendered:!0,randomClass:this.createUID()}},inject:["uiTemplate"],watch:{content:{handler(e,t){this.items=this.content,this.$refs.dropzone&&this.$refs.dropzone.computeIndexes()},immediate:!0,deep:!0}},computed:{strings:()=>({doesntExist:__("This component is missing or can't be loaded","uipress-lite"),totalItems:__("Total items","uipress-lite"),search:__("Search","uipress-lite"),proOptionUnlock:__("This is a pro option. Upgrade to unlock","uipress-lite")}),isProduction(){return"prod"==this.uiTemplate.display||!!this.uiTemplate.isPreview},itemsLength(){return this.items.length},async returnItems(){return this.items},returnDragGroupOptions:()=>({name:"uip-blocks",pull:!0,put:!0,revertClone:!1})},methods:{async forceReload(){this.rendered=!1,await nextTick(),this.rendered=!0},inject_block_presets(e){const t=e.moduleName,i=this.uipApp.data.blocks,n=i.findIndex(e=>e.moduleName===t);if(n<0)return;const s=i[n].optionsEnabled,o=s.findIndex(e=>"block"===e.name),r=["block","advanced"];for(let t of s){if(r.includes(t.name))continue;if(!1 in t)continue;const i=t.presets;if(this.isObject(i))for(let n in i)this.ensureNestedObject(e,"settings",t.name,"options",n,"value"),e.settings[t.name].options[n].value={...i[n]}}if(o<0)return;const a=s[o].options;this.ensureNestedObject(e,"settings","block","options");for(let t of a){if(!t)return;if(!("value"in t))continue;const i=t.uniqueKey?t.uniqueKey:t.option;e.settings.block.options[i]={value:t.value}}},async importBlock(e,t){let i=new FormData,n=this.uipApp.notifications.notify(__("Importing template","uipress-lite"),"","default",!1,!0);const s=await this.sendServerRequest(e.path,i);s.error&&(this.uipApp.notifications.notify(s.message,"","error",!0),this.uipApp.notifications.remove(n));let o=JSON.parse(s);if(Array.isArray(o)){(o=o[0]).uid=this.createUID(),this.isObject(o)||(this.uipApp.notifications.notify(__("Unable to import template right now","uipress-lite"),"","error",!0),this.uipApp.notifications.remove(n));let e=[];if("content"in o){for(const t of o.content)e.push(this.cleanBlock(t));o.content=e}this.uipApp.notifications.remove(n),this.uipApp.notifications.notify(__("Template imported","uipress-lite"),"","success",!0),this.items.splice(t,0,o)}else this.uipApp.notifications.notify(__("Unable to import template right now","uipress-lite"),"","error",!0),this.uipApp.notifications.remove(n)},cleanBlock(e){let t=Object.assign({},e);return t.options=[],t.settings=JSON.parse(JSON.stringify(t.settings)),t.content&&(t.content=this.duplicateChildren(t.content)),t},duplicateChildren(e){let t=[];for(let i of e){let e=Object.assign({},i);e.settings=JSON.parse(JSON.stringify(e.settings)),e.content&&(e.content=this.duplicateChildren(e.content)),t.push(e)}return t},async itemAdded(e){if(e.removed)return await this.forceReload(),void this.returnData(this.items);if(!e.added)return;let t=e.added.element;if(t.remote)return this.items.splice(e.added.newIndex,1),void this.importBlock(t,e.added.newIndex);"uid"in t||(t.uid=this.createUID()),0===Object.keys(t.settings).length&&this.inject_block_presets(t,t.settings),await this.forceReload(),this.uipApp.blockControl.setActive(t,this.items),this.returnData(this.items)}},template:'\n    \n      \n      \n                 \n      <uip-draggable v-if="rendered && !isProduction"\n      ref="dropzone"\n      :class="[{\'uip-border-dashed\' : uiTemplate.display == \'builder\'}, randomClass]" \n      class="uip-flex uip-w-100p"\n      :group="returnDragGroupOptions" \n      :list="content"\n      @start="uipApp.scrolling=true"\n      @end="uipApp.scrolling=false"\n      ghostClass="uip-canvas-ghost"\n      @change="itemAdded"\n      animation="300"\n      :sort="true">\n              \n              <template v-for="(element, index) in items" \n              :key="index" :index="index">\n                \n                <BlockRender :block="element" :list="items" :index="index"/>\n              \n              </template>\n              \n              \n      </uip-draggable>\n      \n      \x3c!-- Production template--\x3e\n      <div class="uip-flex uip-w-100p" v-else-if="rendered" :class="randomClass">\n        <template v-for="(element, index) in items">\n          \n          <BlockRender :block="element" :list="items" :index="index"/>\n          \n        </template>\n      </div>\n      \n\t\t'};