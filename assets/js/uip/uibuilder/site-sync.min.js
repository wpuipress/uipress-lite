const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent,nextTick}from"../../libs/vue-esm.js";export default{components:{Modal:defineAsyncComponent(()=>import("../v3.5/utility/modal.min.js?ver=3.3.1"))},props:{args:Object,triggerClass:String},data:()=>({modelOpen:!0,themeLoading:!1,themes:[],saving:!1,finished:!1,importPath:"",fetchingSettings:!0,strings:{siteSync:__("Site sync","uipress-lite"),hostExplanation:__("Enabling this site as a host allows you to sync other sites to this site's uiPress settings. Please note, rest API needs to be enabled to use this feature."),settingsExplanation:__("Choose the sections you sync with a remote site. Enabling auto update will allow uiPress to routinely check for changes at the host site and sync updates.","uipress-lite"),templates:__("Templates","uipress-lite"),siteSettings:__("Site settings","uipress-lite"),themeStyles:__("Theme styles","uipress-lite"),adminMenus:__("Admin menus","uipress-lite"),cancel:__("Cancel","uipress-lite"),export:__("Export","uipress-lite"),hostEnabled:__("Host enabled","uipress-lite"),importPath:__("Import URL","uipress-lite"),importKey:__("Import key","uipress-lite"),save:__("Save","uipress-lite"),refreshKey:__("Refresh key","uipress-lite"),syncOptions:__("Sync options","uipress-lite"),autoUpdate:__("Auto update","uipress-lite"),syncNow:__("Sync now","uipress-lite")},hostOptions:{hostEnabled:!1,key:""},syncOptions:{importOptions:{templates:!0,siteSettings:!0,themeStyles:!0,adminMenus:!0},key:"",path:"",keepUpToDate:!1},activeTab:"host",switchOptions:{host:{value:"host",label:__("Host","uipress-lite")},sync:{value:"sync",label:__("Sync","uipress-lite")}}}),watch:{currentStep:{handler(i,t){2==i&&this.fetchThemes()}}},created(){this.getSyncOptions()},computed:{isDisabledButton(){if(!(this.syncOptions.importOptions.templates||this.syncOptions.importOptions.siteSettings||this.syncOptions.importOptions.themeStyles||this.syncOptions.importOptions.adminMenus))return!0}},methods:{async getSyncOptions(){let i=new FormData;i.append("action","uip_get_sync_options"),i.append("security",uip_ajax.security);const t=await this.sendServerRequest(uip_ajax.ajax_url,i);this.fetchingSettings=!1,t.error?this.uipApp.notifications.notify(t.message,"","error",!0):(this.importPath=t.restURL,t.options&&("key"in t.options&&(this.hostOptions.key=t.options.key),"hostEnabled"in t.options&&(this.hostOptions.hostEnabled=t.options.hostEnabled),"syncOptions"in t.options&&("importOptions"in t.options.syncOptions&&(this.syncOptions.importOptions={...this.syncOptions.importOptions,...t.options.syncOptions.importOptions}),"key"in t.options.syncOptions&&(this.syncOptions.key=t.options.syncOptions.key),"keepUpToDate"in t.options.syncOptions&&(this.syncOptions.keepUpToDate=t.options.syncOptions.keepUpToDate),"path"in t.options.syncOptions&&(this.syncOptions.path=t.options.syncOptions.path))))},async refreshKey(){let i=new FormData;i.append("action","uip_refresh_sync_key"),i.append("security",uip_ajax.security);const t=await this.sendServerRequest(uip_ajax.ajax_url,i);this.fetchingSettings=!1,t.error?this.uipApp.notifications.notify(t.message,"","error",!0):t.options&&"key"in t.options&&(this.hostOptions.key=t.options.key)},async saveHostSettings(){let i=new FormData;i.append("action","uip_save_sync_options"),i.append("security",uip_ajax.security),i.append("options",this.prepareJSON(this.hostOptions)),i.append("syncOptions",this.prepareJSON(this.syncOptions));const t=await this.sendServerRequest(uip_ajax.ajax_url,i);this.fetchingSettings=!1,t.error?this.uipApp.notifications.notify(t.message,"","error",!0):this.uipApp.notifications.notify(__("Settings saved","uipress-lite"),"","success")},async syncNow(){let i=new FormData;i.append("action","uip_start_site_sync"),i.append("security",uip_ajax.security),i.append("options",JSON.stringify(this.syncOptions));const t=this.uipApp.notifications.notify(__("Importing uiPress content","uipress-lite"),"","default",!1,!0),s=await this.sendServerRequest(uip_ajax.ajax_url,i);this.uipApp.notifications.remove(t),s.error?this.uipApp.notifications.notify(s.message,"","error",!0):(this.uipApp.notifications.notify(__("Import complete","uipress-lite"),"","success"),this.$router.push("/"),setTimeout(function(){location.reload()},600))}},template:'\n    \n    \n    <Modal :startOpen="true" ref="sitesyncwrap">\n    \n      <div ref="uipmodal" class="uip-flex uip-flex-column uip-row-gap-m uip-w-400 uip-padding-m">\n          \n          \n          \n          \n          \x3c!-- title --\x3e\n          <div class="uip-flex uip-flex-between uip-flex-center">\n            <div class="uip-text-bold">{{strings.siteSync}}</div>\n            <div class="uip-icon uip-link-muted uip-padding-xxs uip-border-round hover:uip-background-muted" @click="$refs.sitesyncwrap.close();this.$router.push(\'/\');">close</div>\n          </div>\n          \x3c!-- end title --\x3e\n          \n          <choice-select :args="{options:switchOptions}" :value="{value:activeTab}" :returnData="function(d){activeTab = d.value}"/>\n          \n          <div v-if="fetchingSettings" class="uip-padding-l uip-flex uip-flex-center uip-flex-middle">\n            <loading-chart/>\n          </div>\n          \n          <template v-else-if="activeTab == \'host\'">\n          \n            <div class="uip-text-muted">{{strings.hostExplanation}}</div>\n            \n            <div class="uip-grid-col-1-3 uip-row-gap-s" style="grid-gap:var(--uip-margin-s)">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.hostEnabled}}</span></div>\n              \n              <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n                <switch-select :args="{asText: true}" :value="hostOptions.hostEnabled" :returnData="function(d){hostOptions.hostEnabled = d}"/>\n              </div>\n              \n              <template v-if="hostOptions.hostEnabled">\n              \n                <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.importPath}}</span></div>\n                \n                <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n                  <input :value="importPath" class="uip-input-small uip-w-100p" disabled type="text">\n                </div>\n                \n                <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.importKey}}</span></div>\n                \n                <div class="uip-flex uip-gap-xxs uip-flex-no-wrap uip-flex-center">\n                  <input v-model="hostOptions.key" disabled class="uip-input-small uip-w-100p" type="text">\n                  <button @click="refreshKey()" :title="strings.refreshKey" class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted uip-margin-left-xs">refresh</button>\n                </div>\n              \n              </template>\n              \n            </div>\n            \n            \n            <div class="uip-flex uip-flex-between uip-gap-xs">\n              <router-link to="/" class="uip-button-default uip-no-underline">{{strings.cancel}}</router-link>\n              \n              <button @click="saveHostSettings()" class="uip-button-primary">{{strings.save}}</button>\n              \n            </div>\n          \n          </template>\n          \n          \n          <template v-else>\n          \n            <div class="uip-text-muted">{{strings.settingsExplanation}}</div>\n            \n            \n            <div class="uip-grid-col-1-3 uip-row-gap-s" style="grid-gap:var(--uip-margin-s)">\n            \n            \n              <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.importPath}}</span></div>\n              \n              <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n                <input v-model="syncOptions.path" class="uip-input-small uip-w-100p" type="text">\n              </div>\n              \n              <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.importKey}}</span></div>\n              \n              <div class="uip-flex uip-gap-xxs uip-flex-no-wrap uip-flex-center">\n                <input v-model="syncOptions.key" class="uip-input-small uip-w-100p" type="password">\n              </div>\n              \n            \n              <div class="uip-text-muted uip-flex"><span>{{strings.syncOptions}}</span></div>\n            \n              <div class="uip-flex uip-flex-column uip-row-gap-xs">\n                \n                <label class="uip-flex uip-gap-xs uip-flex-center">\n                  <input class="uip-user-check uip-checkbox uip-margin-remove" v-model="syncOptions.importOptions.templates" type="checkbox">\n                  <div class="">{{strings.templates}}</div>\n                </label>\n                \n                <label class="uip-flex uip-gap-xs uip-flex-center">\n                  <input class="uip-user-check uip-checkbox uip-margin-remove" v-model="syncOptions.importOptions.siteSettings" type="checkbox">\n                  <div class="">{{strings.siteSettings}}</div>\n                </label>\n                \n                <label class="uip-flex uip-gap-xs uip-flex-center">\n                  <input class="uip-user-check uip-checkbox uip-margin-remove" v-model="syncOptions.importOptions.themeStyles" type="checkbox">\n                  <div class="">{{strings.themeStyles}}</div>\n                </label>\n                \n                <label class="uip-flex uip-gap-xs uip-flex-center">\n                  <input class="uip-user-check uip-checkbox uip-margin-remove" v-model="syncOptions.importOptions.adminMenus" type="checkbox">\n                  <div class="">{{strings.adminMenus}}</div>\n                </label>\n              \n              </div>\n              \n              <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.autoUpdate}}</span></div>\n              \n              <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n                <switch-select :args="{asText: true}" :value="syncOptions.keepUpToDate" :returnData="function(d){syncOptions.keepUpToDate = d}"/>\n              </div>\n              \n              \n            </div>\n            \n            \n            <div class="uip-flex uip-flex-between uip-gap-xs">\n              <router-link to="/" class="uip-button-default uip-no-underline">{{strings.cancel}}</router-link>\n              \n              <div class="uip-flex uip-gap-xs">\n                <button @click="syncNow()" class="uip-button-secondary">{{strings.syncNow}}</button>\n                \n                <button @click="saveHostSettings()" class="uip-button-primary" :disabled="isDisabledButton">{{strings.save}}</button>\n              </div>\n              \n            </div>\n            \n            <a class="uip-hidden" ref="globalExport"></a>\n          \n          </template>\n          \n          \n        </div>\n      </Modal>\n    \n    '};