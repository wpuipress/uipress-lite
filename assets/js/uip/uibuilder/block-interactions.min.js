export default{data:()=>({}),computed:{returnBlankInteractions:()=>({click:[],dblclick:[],mouseenter:[],mouseleave:[],focus:[],blur:[]})},methods:{handleBlockInteractions(e,t){let o=JSON.parse(JSON.stringify(this.returnBlankInteractions));if(!e.interactions||!Array.isArray(e.interactions))return t;for(let t of e.interactions)switch(t.type){case"click":o.click.push(this.renderInteraction(t,e));break;case"dblclick":o.dblclick.push(this.renderInteraction(t,e));break;case"mouseenter":o.mouseenter.push(this.renderInteraction(t,e));break;case"mouseleave":o.mouseleave.push(this.renderInteraction(t,e));break;case"focus":o.focus.push(this.renderInteraction(t,e));break;case"blur":o.blur.push(this.renderInteraction(t,e))}return t.onclick=(t=>{this.maybeFollowLink(t,e),o.click.forEach(e=>e(t))}),o.dblclick.length&&(t.ondblclick=(e=>{o.dblclick.forEach(t=>t(e))})),o.mouseenter.length&&(t.onmouseenter=(e=>{o.mouseenter.forEach(t=>t(e))})),o.mouseleave.length&&(t.onmouseleave=(e=>{o.mouseleave.forEach(t=>t(e))})),o.focus.length&&(t.onfocus=(e=>{o.focus.forEach(t=>t(e))})),o.blur.length&&(t.onblur=(e=>{o.blur.forEach(t=>t(e))})),t},needsTarget:e=>!["toggleDarkMode","toggleMenuCollapse","toggleFulscreenMode","toggleScreenOptions","toggleHelpOptions"].includes(e.action),renderInteraction(e,t){return async o=>{let s;switch(e.target){case"block":s=document.querySelector("#"+e.blockTarget);break;case"selector":s=document.querySelector(e.selector);break;case"self":s=o.currentTarget}s||!this.needsTarget(e)?(document.dispatchEvent(new CustomEvent(`uipress/interactions/start/${e.id}`,{detail:{event:o,target:s,block:t}})),this.doInteractionAction(s,e,o),await this.$nextTick(),document.dispatchEvent(new CustomEvent(`uipress/interactions/end/${e.id}`,{detail:{event:o,target:s,block:t}}))):console.log(`Target for interaction id ${e.id} failed. No valid target found.`)}},doInteractionAction(e,t,o){switch(t.action){case"showElement":e.style.display="";break;case"hideElement":e.style.display="none";break;case"toggleElementVisibility":this.toggleElementVisibility(e);break;case"addAttribute":this.addAttribute(e,t);break;case"removeAttribute":this.removeAttribute(e,t);break;case"toggleAttribute":this.toggleAttribute(e,t);break;case"javascript":this.executeCustomCode(o,e,t);break;case"toggleDarkMode":document.dispatchEvent(new CustomEvent("uipress/app/darkmode/toggle"));break;case"toggleMenuCollapse":document.dispatchEvent(new CustomEvent("uipress/blocks/adminmenu/togglecollapse"));break;case"toggleFulscreenMode":document.dispatchEvent(new CustomEvent("uipress/app/window/fullscreen"));break;case"toggleScreenOptions":this.toggleScreenOptions("#screen-options-wrap");break;case"toggleHelpOptions":this.toggleScreenOptions("#contextual-help-wrap")}t.action.includes("_block_")&&this.handleBlockSpecificAction(t,o,e)},addAttribute(e,t){const o=t.key,s=t.keyvalue;o&&s?"class"!==o?e.setAttribute(o,s):e.classList.add(s):console.log(`Interaction id ${t.id} failed. No valid key or key value to add.`)},removeAttribute(e,t){const o=t.key,s=t.keyvalue;o?"class"!==o?e.removeAttribute(o,""):e.classList.remove(s):console.log(`Interaction id ${t.id} failed. No valid key to remove.`)},toggleAttribute(e,t){const o=t.key,s=t.keyvalue;if(o&&s)if("class"!==o){const t=e.getAttribute(o)!=s?s:"";e.setAttribute(o,t)}else{e.classList.contains(s)?e.classList.remove(s):e.classList.add(s)}else console.log(`Interaction id ${t.id} failed. No valid key or key value to toggle.`)},toggleElementVisibility(e,t){const o=t||"";"none"===e.style.display?e.style.display=o:e.style.display="none"},executeCustomCode(e,t,o){if(!o.javascript)return;new Function(o.javascript)(e,t)},toggleScreenOptions(e){const t=document.querySelectorAll("iframe");if(t)for(const o of t){const t=o.contentWindow.document;if(!t)continue;const s=t.querySelector(e),i=t.querySelector("#screen-meta");s&&this.toggleElementVisibility(s,"block"),i&&this.toggleElementVisibility(i,"block")}},handleBlockSpecificAction(e,t,o){const s=e.blockTarget,i=e.action.replace("_block_","");if(s in this.uiTemplate.blockRefs)try{this.uiTemplate.blockRefs[s].ref[i]()}catch(t){console.log(`Interaction id ${e.id} failed. Block does not have specified method. Message: ${t}`)}else console.log(`Interaction id ${e.id} failed. Block not found.`)}}};