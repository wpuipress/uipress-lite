const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent}from"../../libs/vue-esm.js";export const core={props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function},data:()=>({thisSearchInput:"",options:[],loading:!1,selectedOptions:[]}),watch:{selected:{handler(e,t){this.injectValue()},deep:!0,immediate:!0},selectedOptions:{handler(e,t){this.updateSelected(this.selectedOptions)},deep:!0}},mounted(){this.getPostTypes()},computed:{formattedOptions(){return this.options},returnLoading(){return this.loading}},methods:{injectValue(){Array.isArray(this.selected)&&(this.selectedOptions=this.selected)},getPostTypes(){this.loading=!0;let e=new FormData;e.append("action","uip_get_post_types"),e.append("security",uip_ajax.security),this.sendServerRequest(uip_ajax.ajax_url,e).then(e=>{if(e.error)return this.uipApp.notifications.notify(e.error,"error"),void(this.loading=!1);this.options=e.postTypes,this.loading=!1})},stopLoading(){this.loading=!1},addSelected(e){this.ifSelected(e)?this.removeSelected(e):1==this.single?this.selectedOptions[0]=e:this.selectedOptions.push(e)},removeSelected(e){let t=this.selectedOptions.indexOf(e);t>-1&&this.selectedOptions.splice(t,1)},ifSelected(e){return this.selectedOptions.indexOf(e)>-1},ifInSearch(e){let t=e.toLowerCase(),i=this.thisSearchInput.toLowerCase();return!!t.includes(i)}},template:'\n      \n        <div class="uip-flex uip-flex-column uip-row-gap-s">\n                \n          <div class="uip-flex uip-background-muted uip-border-rounder uip-flex-center uip-padding-xxs uip-gap-xs">\n            <span class="uip-icon uip-text-muted">search</span>\n            <input class="uip-blank-input uip-flex-grow uip-text-s" type="search"  \n            :placeholder="searchPlaceHolder" v-model="thisSearchInput" autofocus>\n          </div>\n          \n          \n          <div v-if="returnLoading" class="uip-w-100p uip-flex uip-flex-center uip-flex-middle uip-h-200" :key="returnLoading">\n            <loading-chart></loading-chart>\n          </div>\n          \n          <div v-else class="uip-max-h-280 uip-flex uip-flex-column uip-row-gap-xxs" style="overflow:auto">\n            <template v-for="option in formattedOptions">\n            \n              <div class="uip-background-default uip-padding-xxs hover:uip-background-muted uip-border-rounder uip-flex uip-flex-row uip-flex-center" \n              @click="addSelected(option.name, selectedOptions)" \n              v-if="ifInSearch(option.name)" \n              style="cursor: pointer">\n              \n                  <div class="uip-flex uip-flex-center uip-flex-middle uip-margin-right-xs">\n                    <input type="checkbox" :name="option.name" :value="option.name" class="uip-checkbox uip-margin-remove" \n                    :checked="ifSelected(option.name, selectedOptions)">\n                  </div>\n                  \n                  <div class="uip-flex-grow uip-text-s uip-flex uip-gap-xxs">\n                    <div class="uip-text-bold uip-text-emphasis">{{option.label}}</div>\n                    <div class="uip-text-muted">{{option.name}}</div>\n                  </div>\n                \n              </div>\n              \n            </template>\n          </div>\n        </div>\n    '};export const preview={components:{contextmenu:defineAsyncComponent(()=>import("../v3.5/utility/contextmenu.min.js?ver=3.3.1"))},props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function},data:()=>({thisSearchInput:"",options:[],loading:!1,selectedOptions:[],strings:{postTypeSelect:__("Post type select","uipress-lite")}}),watch:{selectedOptions:{handler(e,t){if(this.updateSelected(this.selectedOptions),this.selectedOptions.length<1){if(!this.$refs.showList)return;this.$refs.showList.close()}},deep:!0},selected:{handler(e,t){this.injectValue()},deep:!0,immediate:!0}},computed:{returnSelectPosition(){const e=this.$refs.multiselect.getBoundingClientRect();return{clientX:e.left,clientY:e.bottom+8}},returnDropWidth(){return{width:this.$refs.multiselect.getBoundingClientRect().width+"px"}}},methods:{injectValue(){Array.isArray(this.selected)&&(this.selectedOptions=this.selected)},removeByIndex(e){this.selectedOptions.splice(e,1)},showSelected(e){this.$refs.showList.show(e,this.returnSelectPosition),clearTimeout(this.hoverTimeout)},dispatchClose(){this.hoverTimeout=setTimeout(()=>{this.$refs.showList.close()},1e3)}},template:'\n  \n      \n        <div ref="multiselect"\n        class="uip-padding-xxxs uip-background-muted uip-border-rounder uip-w-100p uip-max-w-400 uip-cursor-pointer uip-border-box uip-padding-right-xs"> \n        \n          <div class="uip-flex uip-flex-center">\n            \n            \x3c!-- Nothing selected --\x3e\n            <div v-if="selectedOptions.length < 1" class="uip-flex-grow uip-padding-xs uip-padding-top-xxxs uip-padding-bottom-xxxs uip-flex uip-gap-xxs uip-flex-center uip-link-default uip-text-s uip-border" style="border-color:transparent">\n              <span class="uip-text-muted">{{placeHolder}}...</span>\n            </div>\n            \n            \x3c!-- One selected --\x3e\n            <div v-if="selectedOptions.length === 1" class="uip-padding-xs uip-padding-top-xxxs uip-padding-bottom-xxxs uip-background-highlight uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-link-default uip-text-s">\n              <span class="uip-text-emphasis">{{selectedOptions[0]}}</span>\n              <a @click.prevent.stop="removeByIndex(0)" class="uip-link-muted uip-no-underline uip-icon">close</a>\n            </div>\n            \n            \x3c!-- Multiple selected --\x3e\n            <div v-if="selectedOptions.length > 1" class="uip-padding-xs uip-padding-top-xxxs uip-padding-bottom-xxxs uip-background-highlight uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-link-default uip-text-s" \n            @mouseenter="showSelected($event)"\n            @mouseleave="dispatchClose()">\n              <span class="uip-text-emphasis uip-max-w-60 uip-overflow-hidden uip-no-wrap uip-text-ellipsis">{{selectedOptions[0]}}</span>\n              <span class="uip-text-muted uip-text-s" v-if="selectedOptions.length < 3"> + {{ selectedOptions.length - 1 }} {{ strings.other }}</span>\n              <span class="uip-text-muted uip-text-s" v-if="selectedOptions.length > 2"> + {{ selectedOptions.length - 1 }} {{ strings.others }}</span>\n              <a @click.prevent.stop="selectedOptions.length = 0" class="uip-link-muted uip-no-underline uip-icon">close</a>\n            </div>\n            \n            <div class="uip-flex-grow uip-flex uip-flex-right">\n              <a class="uip-link-muted uip-no-underline uip-icon">expand_more</a>\n            </div>\n            \n            \n            \n          </div>\n          \n          <component is="style">\n            .selected-enter-active,\n            .selected-leave-active {\n              transition: all 0.3s ease;\n            }\n            .selected-enter-from,\n            .selected-leave-to {\n              opacity: 0;\n              transform: translateX(-30px);\n            }\n          </component>\n          \n          \n          <contextmenu ref="showList" :disableTeleport="true">\n          \n            <div class="uip-flex uip-gap-xxs uip-flex-wrap uip-padding-xs"\n            :style="returnDropWidth"\n            @mouseenter="showSelected($event)"\n            @mouseleave="$refs.showList.close()">\n              \n              <TransitionGroup name="selected">\n                <template v-for="(item, index) in selectedOptions" :key="item">\n                  \n                  <div class="uip-padding-xxs uip-padding-top-xxxs uip-padding-bottom-xxxs uip-background-muted uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-link-default uip-text-xs">\n                    <span class="uip-text-emphasis">{{item}}</span>\n                    <a @click.prevent.stop="removeByIndex(index)" class="uip-link-muted uip-no-underline uip-icon">close</a>\n                  </div>\n                \n                </template>\n              </TransitionGroup>\n            \n            </div>\n          \n          </contextmenu>\n          \n        </div>\n    \n  '};export default{components:{PostTypeSelect:core,PostTypePreview:preview},props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function},data:()=>({strings:{postTypeSelect:__("Post type select","uipress-lite")}}),template:'\n  \n    <dropdown pos="left center" class="uip-w-100p" ref="postselect"\n    :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']">\n      \n      <template #trigger>\n      \n       <PostTypePreview :selected="selected" :placeHolder="placeHolder" :searchPlaceHolder="searchPlaceHolder" :single="single" :updateSelected="updateSelected"/>\n        \n      </template>\n      \n      \n      <template #content>\n      \n        <div class="uip-padding-s uip-w-260 uip-flex uip-flex-column uip-row-gap-s">\n        \n          <div class="uip-flex uip-flex-between uip-flex-center">\n          \n            <div class="uip-text-emphasis uip-text-bold uip-text-s">{{ strings.postTypeSelect }}</div>\n            <div @click="$refs.postselect.close()"\n            class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n              <span class="uip-icon">close</span>\n            </div>\n            \n          </div>\n        \n          <PostTypeSelect :selected="selected" :placeHolder="placeHolder" :searchPlaceHolder="searchPlaceHolder" :single="single" :updateSelected="updateSelected"/>\n        \n        \n        </div>\n      \n      </template>\n    \n    </dropdown>\n    \n  '};