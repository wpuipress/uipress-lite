const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent}from"../../libs/vue-esm.js";export const core={props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function,type:String,roleOnly:Boolean},data:()=>({loading:!1,thisSearchInput:"",options:[],roles:[],users:[],page:1,totalUsers:0,selectedOptions:[],activeTab:"roles",rendered:!1,updating:!1,switchOptions:{roles:{value:"roles",label:__("Roles","uipress-lite")},users:{value:"users",label:__("Users","uipress-lite")}},strings:{users:__("Users","uipress-lite"),roles:__("Roles","uipress-lite"),roleSelect:__("Role select","uipress-lite"),search:__("Search","uipress-lite")},ui:{dropOpen:!1}}),watch:{selectedOptions:{handler(e,t){this.updating||this.updateSelected(this.selectedOptions)},deep:!0},thisSearchInput:{handler(){this.queryUsersRoles()}},selected:{handler(e,t){this.updating||this.injectValue()},deep:!0,immediate:!0}},mounted(){this.queryUsersRoles()},computed:{formattedUsers(){return this.users},formattedRoles(){return this.roles}},methods:{async injectValue(){this.updating=!0,this.selectedOptions=Array.isArray(this.selected)?this.selected:[],await this.$nextTick(),this.updating=!1},async queryUsersRoles(){let e=this.type;e&&void 0!==e||(e="all");let t=new FormData;t.append("action","uip_get_users_and_roles"),t.append("security",uip_ajax.security),t.append("searchString",this.thisSearchInput),t.append("type",e),t.append("page",this.page),this.loading=!0;const i=await this.sendServerRequest(uip_ajax.ajax_url,t);this.rendered=!0,this.loading=!1,i.error?this.uipApp.notifications.notify(i.error,"error"):(Array.isArray(i.roles)&&(this.roles=i.roles),Array.isArray(i.users)&&(this.users=i.users),this.totalUsers=i.total_users)},addSelected(e){this.ifSelected(e)?this.removeSelected(e):1==this.single?this.selectedOptions[0]=e:this.selectedOptions.push(e)},removeSelected(e){let t=this.selectedOptions.findIndex(t=>t.name===e.name&&t.type===e.type);t>-1&&this.selectedOptions.splice(t,1)},removeByIndex(e){this.selectedOptions.splice(e,1)},ifSelected(e){return this.selectedOptions.findIndex(t=>t.name===e.name&&t.type===e.type)>-1},ifInSearch(e){let t=e.name.toLowerCase(),i=this.thisSearchInput.toLowerCase();return!!t.includes(i)},pageBack(){1!=this.page&&(this.page-=1,this.queryUsersRoles())},pageForward(){this.page+=1,this.queryUsersRoles()}},template:'\n      \n      \n        <div class="uip-flex uip-flex-column uip-row-gap-s">\n          \n          <toggle-switch v-if="!roleOnly" :options="switchOptions" :activeValue="activeTab" :dontAccentActive="true" :returnValue="function(data){ activeTab = data}"></toggle-switch>\n          \n          <div class="uip-flex uip-background-muted uip-border-rounder uip-padding-xxs uip-flex-center">\n            <span class="uip-icon uip-text-muted uip-margin-right-xs">search</span>\n            <input class="uip-blank-input uip-flex-grow uip-text-s" type="search"  \n            :placeholder="strings.search" v-model="thisSearchInput" autofocus>\n          </div>\n          \n          \n          <div v-if="loading" class="uip-padding-s uip-flex uip-flex-center uip-flex-middle uip-h-200">\n            <loading-chart></loading-chart>\n          </div>\n          \n          <div class="uip-max-h-200 uip-gap-xxxs uip-flex uip-flex-column" style="overflow:auto">\n            \n            \x3c!--Roles--\x3e\n            <template v-if="!loading && activeTab == \'roles\'" v-for="option in formattedRoles">\n              <div class="uip-background-default uip-padding-xxs uip-border-rounder uip-flex uip-flex-center uip-gap-xs uip-link-muted hover:uip-background-muted" \n              @click="addSelected(option)" \n              :class="{\'uip-text-emphasis\' : ifSelected(option), \'uip-link-muted\' : !ifSelected(option)}"\n              v-if="ifInSearch(option)" \n              style="cursor: pointer">\n                    \n                    \n                    <div class="uip-flex-grow uip-text-s uip-text-bold">{{option.label}}</div>\n                    <input type="checkbox" :name="option.name" :value="option.name" class="uip-checkbox uip-margin-remove" \n                    :checked="ifSelected(option)">\n                \n              </div>\n            </template>\n            \n            \x3c!--Users--\x3e\n            <template v-if="!loading && activeTab == \'users\'" v-for="option in formattedUsers">\n              <div class="uip-background-default uip-padding-xxs uip-border-rounder uip-flex uip-flex-center uip-gap-xs uip-link-muted hover:uip-background-muted" \n              @click="addSelected(option)" \n              :class="{\'uip-text-emphasis\' : ifSelected(option), \'uip-link-muted\' : !ifSelected(option)}"\n              v-if="ifInSearch(option)" \n              style="cursor: pointer">\n                    \n                    \n                    <div class="uip-flex-grow uip-text-s uip-text-bold">{{option.label}}</div>\n                    <input type="checkbox" :name="option.name" :value="option.name" class="uip-checkbox uip-margin-remove" \n                    :checked="ifSelected(option)">\n                \n              </div>\n            </template>\n            \n          </div>\n          \n          <div class="uip-flex uip-gap-xs" v-if="activeTab == \'users\' && totalUsers > formattedUsers.length">\n            <button class="uip-button-default uip-icon uip-nav-button uip-padding-xxs" :class="{\'uip-disabled\' : page == 1}" @click="pageBack()">chevron_left</button>\n            <button class="uip-button-default uip-icon uip-nav-button uip-padding-xxs" @click="pageForward()">chevron_right</button>\n          </div>\n        \n        </div>\n      \n    '};export const preview={components:{contextmenu:defineAsyncComponent(()=>import("../v3.5/utility/contextmenu.min.js?ver=3.3.1"))},props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function,type:String},data:()=>({hoverTimeout:null,selectedOptions:[],updating:!1,strings:{users:__("Users","uipress-lite"),roles:__("Roles","uipress-lite"),roleSelect:__("Role select","uipress-lite"),others:__("others","uipress-lite"),other:__("other","uipress-lite")},ui:{dropOpen:!1}}),watch:{selectedOptions:{handler(e,t){if(!this.updating&&(this.updateSelected(this.selectedOptions),this.selectedOptions.length<1)){if(!this.$refs.showList)return;this.$refs.showList.close()}},deep:!0},selected:{handler(e,t){this.updating||this.injectValue()},deep:!0,immediate:!0}},computed:{returnSelectPosition(){const e=this.$refs.multiselect.getBoundingClientRect();return{clientX:e.left,clientY:e.bottom+8}},returnDropWidth(){return{width:this.$refs.multiselect.getBoundingClientRect().width+"px"}}},methods:{async injectValue(){this.updating=!0,this.selectedOptions=Array.isArray(this.selected)?this.selected:[],await this.$nextTick(),this.updating=!1},removeByIndex(e){this.selectedOptions.splice(e,1)},showSelected(e){this.$refs.showList.show(e,this.returnSelectPosition),clearTimeout(this.hoverTimeout)},dispatchClose(){this.hoverTimeout=setTimeout(()=>{this.$refs.showList.close()},1e3)}},template:'\n    \n        <div ref="multiselect"\n        class="uip-padding-xxxs uip-background-muted uip-border-rounder uip-w-100p uip-max-w-400 uip-cursor-pointer uip-border-box uip-padding-right-xs"> \n        \n          <div class="uip-flex uip-flex-center">\n            \n            \x3c!-- Nothing selected --\x3e\n            <div v-if="selectedOptions.length < 1" class="uip-flex-grow uip-padding-xs uip-padding-top-xxxs uip-padding-bottom-xxxs uip-flex uip-gap-xxs uip-flex-center uip-link-default uip-text-s uip-border" style="border-color:transparent">\n              <span class="uip-text-muted">{{placeHolder}}...</span>\n            </div>\n            \n            \x3c!-- One selected --\x3e\n            <div v-if="selectedOptions.length === 1" class="uip-padding-xs uip-padding-top-xxxs uip-padding-bottom-xxxs uip-background-highlight uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-link-default uip-text-s">\n              <span class="uip-text-emphasis">{{selectedOptions[0].name}}</span>\n              <a @click.prevent.stop="removeByIndex(0)" class="uip-link-muted uip-no-underline uip-icon">close</a>\n            </div>\n            \n            \x3c!-- Multiple selected --\x3e\n            <div v-if="selectedOptions.length > 1" class="uip-padding-xs uip-padding-top-xxxs uip-padding-bottom-xxxs uip-background-highlight uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-link-default uip-text-s" \n            @mouseenter="showSelected($event)"\n            @mouseleave="dispatchClose()">\n              <span class="uip-text-emphasis uip-max-w-60 uip-overflow-hidden uip-no-wrap uip-text-ellipsis">{{selectedOptions[0].name}}</span>\n              <span class="uip-text-muted uip-text-s" v-if="selectedOptions.length < 3"> + {{ selectedOptions.length - 1 }} {{ strings.other }}</span>\n              <span class="uip-text-muted uip-text-s" v-if="selectedOptions.length > 2"> + {{ selectedOptions.length - 1 }} {{ strings.others }}</span>\n              <a @click.prevent.stop="selectedOptions.length = 0" class="uip-link-muted uip-no-underline uip-icon">close</a>\n            </div>\n            \n            <div class="uip-flex-grow uip-flex uip-flex-right">\n              <a class="uip-link-muted uip-no-underline uip-icon">expand_more</a>\n            </div>\n            \n            \n            \n          </div>\n          \n          <component is="style">\n            .selected-enter-active,\n            .selected-leave-active {\n              transition: all 0.3s ease;\n            }\n            .selected-enter-from,\n            .selected-leave-to {\n              opacity: 0;\n              transform: translateX(-30px);\n            }\n          </component>\n          \n          \n          <contextmenu ref="showList" :disableTeleport="true">\n          \n            <div class="uip-flex uip-gap-xxs uip-flex-wrap uip-padding-xs"\n            :style="returnDropWidth"\n            @mouseenter="showSelected($event)"\n            @mouseleave="$refs.showList.close()">\n              \n              <TransitionGroup name="selected">\n                <template v-for="(item, index) in selectedOptions" :key="item.name">\n                  \n                  <div class="uip-padding-xxs uip-padding-top-xxxs uip-padding-bottom-xxxs uip-background-muted uip-border-rounder uip-border uip-flex uip-gap-xxs uip-flex-center uip-link-default uip-text-xs">\n                    <span class="uip-text-emphasis">{{item.name}}</span>\n                    <a @click.prevent.stop="removeByIndex(index)" class="uip-link-muted uip-no-underline uip-icon">close</a>\n                  </div>\n                \n                </template>\n              </TransitionGroup>\n            \n            </div>\n          \n          </contextmenu>\n          \n        </div>\n      \n    '};export default{components:{UserRoleSelect:core,UserRoleSelectPreview:preview},props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function,type:String,roleOnly:Boolean},data:()=>({strings:{roleSelect:__("Role select","uipress-lite")}}),template:'\n  \n    <dropdown pos="left center" class="uip-w-100p" ref="userDropdown"\n    :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']">\n    \n      <template v-slot:trigger>\n      \n        <UserRoleSelectPreview :selected="selected" :placeHolder="placeHolder" :searchPlaceHolder="searchPlaceHolder" :single="single" :updateSelected="updateSelected" :type="type"/>\n      \n      </template>\n      \n      <template v-slot:content>\n      \n      \n        <div class="uip-flex uip-flex-column uip-row-gap-s uip-padding-s uip-w-240">\n        \n          <div class="uip-flex uip-flex-between uip-flex-center">\n            <div class="uip-text-emphasis uip-text-bold uip-text-s">{{strings.roleSelect}}</div>\n            <div @click.prevent.stop="$refs.userDropdown.close()"\n            class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n              <span class="uip-icon">close</span>\n            </div>\n          </div>\n          \n          <UserRoleSelect :roleOnly="roleOnly" :selected="selected" :placeHolder="placeHolder" :searchPlaceHolder="searchPlaceHolder" :single="single" :updateSelected="updateSelected" :type="type"/>\n        \n        </div>\n      \n      </template>\n    \n    </dropdown>\n    '};