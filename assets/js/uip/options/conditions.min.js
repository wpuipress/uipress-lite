import{nextTick}from"../../libs/vue-esm-dev.js";export default{props:{returnData:Function,value:[String,Array],placeHolder:String,args:Object,size:String},inject:["uipress"],data(){return{option:this.returnDefaultOptions,updating:!1,strings:{newCondition:__("New condition","uipress-lite"),type:__("Type","uipress-lite"),operator:__("Operator","uipress-lite"),searchUsers:__("Search","uipress-lite"),value:__("Value","uipress-lite"),addCondition:__("Add condition","uipress-lite")},newCondition:{type:"userrole",operator:"is",value:""},conditions:{relations:{and:{value:"and",label:__("And","uipress-lite")},or:{value:"or",label:__("Or","uipress-lite")}},types:[{value:"userrole",label:__("User role","uipress-lite")},{value:"userlogin",label:__("User login","uipress-lite")},{value:"userid",label:__("User ID","uipress-lite")},{value:"useremail",label:__("User email","uipress-lite")}],operators:{is:{value:"is",label:__("Is","uipress-lite")},isnot:{value:"isnot",label:__("Is not","uipress-lite")}}}}},watch:{value:{handler(){this.updating||this.injectProp()},deep:!0,immediate:!0},option:{handler(t,e){this.updating||this.returnData(this.option)},deep:!0}},computed:{hasConditions(){return!!this.option.conditions&&this.option.conditions.length},returnDefaultOptions:()=>({relation:"and",conditions:[]})},methods:{async injectProp(){this.updating=!0;const t=this.returnDefaultOptions,e=this.isObject(this.value)?this.value:{};this.option={...t,...e},await nextTick(),this.updating=!1},addCondition(){Array.isArray(this.option.conditions)||(this.option.conditions=[]),this.option.conditions.push(JSON.parse(JSON.stringify(this.newCondition)))},removeCondition(t){this.option.conditions.splice(t,1)}},template:'\n\t\n\t<div class="uip-flex uip-w-100p uip-flex-column uip-row-gap-xs">\n\t\t \n\t  <template v-for="(element, index) in option.conditions">\n\t  \n\t\t<dropdown pos="left center" class="uip-w-100p" :snapX="[\'#uip-block-settings\']">\n\t\t  <template v-slot:trigger>\n\t\t\t\n\t\t\t<div class="uip-flex uip-flex-row uip-gap-xxs">\n\t\t\t  <div class="uip-padding-xxs uip-border-rounder uip-text-s uip-background-muted uip-flex-grow">\n\t\t\t\t{{element.type}} {{element.operator}} {{element.value}}\n\t\t\t  </div>\n\t\t\t  \n\t\t\t  <button class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted"\n\t\t\t  @click="removeCondition(index)">close</button>\n\t\t\t</div>  \n\t\t\t\n\t\t  </template>\n\t\t  <template v-slot:content>\n\t\t\t<div class="uip-padding-s">\n\t\t\t\n\t\t\t  <div class="uip-grid-col-1-3">\n\t\t\t  \n\t\t\t\t  <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.type}}</span></div>\n\t\t\t\t  <div class="uip-flex uip-flex-center">\n\t\t\t\t\t<select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p uip-w-100p uip-border-rounder" v-model="element.type" style="padding-top: 2px; padding-bottom: 2px; border-radius: var(--uip-border-radius-large);">\n\t\t\t\t\t  <template v-for="item in conditions.types">\n\t\t\t\t\t\t<option :value="item.value">{{item.label}}</option>\n\t\t\t\t\t  </template>\n\t\t\t\t\t</select>\n\t\t\t\t  </div>\n\t\t\t\t  \n\t\t\t\t  <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.operator}}</span></div>\n\t\t\t\t  <div class="uip-flex uip-flex-center">\n\t\t\t\t\t<toggle-switch :options="conditions.operators" :activeValue="element.operator" :returnValue="function(data){ element.operator = data;}"></toggle-switch>\n\t\t\t\t  </div>\n\t\t\t\t  \n\t\t\t\t  <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.value}}</span></div>\n\t\t\t\t  <div class="uip-flex uip-flex-center uip-gap-xxs">\n\t\t\t\t\t<input type="text" class="uip-input-small uip-flex-grow" style="min-width:1px" v-model="element.value">\n\t\t\t\t\t<user-role-search :selected="[]" :returnType="element.type" :searchPlaceHolder="strings.searchUsers" :updateSelected="function(d){element.value = d}"></user-role-search>\n\t\t\t\t  </div>\n\t\t\t\t  \n\t\t\t  </div>    \n\t\t\t  \n\t\t\t</div>\n\t\t\t\n\t\t  </template>\n\t\t</dropdown>\n\t  \n\t  </template>\n\t  \n\t  <toggle-switch v-if="hasConditions" :options="conditions.relations" :activeValue="option.relation" :dontAccentActive="true" :returnValue="function(data){ option.relation = data;}"></toggle-switch> \n\t  \n\t  <div @click="option.conditions.push(newCondition)" class="uip-padding-xxs uip-border-rounder uip-background-muted hover:uip-background-grey uip-cursor-pointer uip-flex uip-flex-middle uip-flex-center uip-gap-xs uip-flex-grow">\n\t\t<span class="uip-icon">add</span>\n\t  </div>\n\t  \n\t  \n\t</div>'};