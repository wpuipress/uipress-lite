const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export default{props:{returnData:Function,value:Object,args:Object},data(){return{updating:!1,open:!1,link:this.returnDefault,hideLinkType:!1,adminMenu:this.uipApp.data.adminMenu.menu,dynamics:this.uipApp.data.dynamicOptions,posts:[],searchString:"",fetchSearchString:"",serverActive:!1,strings:{searchLinks:__("Search admin pages","uipress-lite"),searchPages:__("Search pages and posts","uipress-lite"),noneFound:__("No posts found for current query","uipress-lite"),newTab:__("Link mode","uipress-lite"),linkSelect:__("Link select","uipress-lite"),currentValue:__("Current value","uipress-lite"),select:__("select","uipress-lite")},linkTypes:{admin:{value:"admin",label:__("Admin","uipress-lite")},content:{value:"content",label:__("Content","uipress-lite")}},linkModes:{dynamic:{value:"dynamic",label:__("Dynamic","uipress-lite"),placeHolder:__("Dynamic links will load in the available content frame without page refresh. If none exists then it will perform a normal relead.")},default:{value:"default",label:__("Default","uipress-lite"),placeHolder:__("Default links load like a normal link and will refresh the whole page.")},newTab:{value:"newTab",label:__("New tab","uipress-lite"),placeHolder:__("New tab links open in a new browser tab.")}},activeValue:"admin"}},watch:{value:{handler(e,i){this.updating||this.injectProp()},deep:!0,immediate:!0},fetchSearchString:{handler(e,i){this.searchPosts()},deep:!0},link:{handler(e,i){this.updating||this.returnData(e)},deep:!0}},mounted(){this.formatArgs()},computed:{getPosts(){return this.posts},createOptionObject:()=>({value:"",newTab:"dynamic",dynamic:!1,dynamicKey:""}),returnDefault:()=>({value:"",newTab:"dynamic",dynamic:!1,dynamicKey:"",dynamicType:""})},methods:{async injectProp(){this.updating=!0,this.link=this.isObject(this.value)?{...this.value}:this.returnDefault,await this.$nextTick(),this.updating=!1},formatArgs(){this.args&&(this.args.hideLinkType&&(this.hideLinkType=this.args.hideLinkType),this.link.dynamic&&(this.linkTypes.dynamic={value:"dynamic",label:__("Dynamic","uipress-lite")}))},async searchPosts(){if(!this.fetchSearchString||this.serverActive)return;this.serverActive=!0;const e=this.fetchSearchString.toLowerCase();let i=new FormData;i.append("action","uip_search_posts_pages"),i.append("security",uip_ajax.security),i.append("searchStr",e);const n=await this.sendServerRequest(uip_ajax.ajax_url,i);n&&(this.posts=n.posts,this.serverActive=!1)},chooseLink(e){this.link.value=e,this.link.dynamic=!1,this.link.dynamicKey="",this.returnData(this.link)},inSearch(e){if(!this.searchString)return!0;if(!e[0])return!0;const i=this.searchString.toLowerCase(),n=e[0].toLowerCase(),t=e[2].toLowerCase();return!(!n.includes(i)&&!t.includes(i))},chooseItem(e){this.link.dynamic=!0,this.link.dynamicKey=e.key,this.link.value=e.value,this.link.dynamicType="link"},removeDynamicItem(){this.link.dynamic=!1,this.link.dynamicKey="",this.link.value="",this.link.dynamicType=""}},template:'\n      <div class="uip-w-100p uip-flex uip-flex-column uip-row-gap-xs">\n      \n      \n        <div class="uip-flex uip-gap-xxs">\n      \n          <dropdown pos="left center" \n          ref="linkselect"\n          :snapX="[\'#uip-block-settings\', \'#uip-template-settings\', \'#uip-global-settings\']">\n          \n              <template #trigger>\n                <div class="uip-flex uip-flex-row">\n                  \n                  <span class="uip-border-rounder uip-text-l uip-flex uip-icon uip-padding-xxxs uip-text-center uip-link-default uip-background-muted"\n                  :class="{\'uip-background-primary uip-text-inverse\' : link.dynamic}">\n                    link\n                  </span>\n                  \n                </div>\n              </template>\n              \n              <template #content>\n              \n                <div class="uip-flex uip-flex-column uip-row-gap-s uip-padding-s uip-w-240">\n                \n                  <div class="uip-flex uip-flex-between uip-flex-center">\n                    <div class="uip-text-emphasis uip-text-bold uip-text-s">{{strings.linkSelect}}</div>\n                    <div @click.prevent.stop="$refs.linkselect.close()"\n                    class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                      <span class="uip-icon">close</span>\n                    </div>\n                  </div>\n                \n                \n                  <toggle-switch :options="linkTypes" :activeValue="activeValue" :returnValue="function(data){ activeValue = data}"></toggle-switch>\n                  \n                  <template v-if="activeValue == \'admin\'">\n                  \n                    \n                    <input type="text" class="uip-input-small uip-w-100p" v-model="searchString" :placeholder="strings.searchLinks">\n                    \n                    <div class="uip-flex uip-flex-column uip-max-h-200" style="overflow:auto">\n                    \n                      <template v-for="(menu, index) in adminMenu">\n                      \n                         <div v-if="menu[0] != \'\' && inSearch(menu)" class="uip-border-round hover:uip-background-muted uip-border-round uip-padding-xxs uip-flex uip-cursor-pointer uip-w-100p uip-flex uip-flex-column uip-flex-no-wrap" @click="chooseLink(menu[2])">\n                         \n                            <div class="uip-text-s uip-text-bold" v-html="menu[0]"></div>\n                            <div class="uip-text-s uip-text-muted uip-no-wrap uip-overflow-hidden uip-text-ellipsis uip-max-w-100p">{{menu[2]}}</div>\n                           \n                         </div>\n                         \n                        <template v-if="menu.submenu" v-for="sub in menu.submenu">\n                        \n                          <div v-if="sub[0] != \'\' && inSearch(sub)" class="uip-border-round hover:uip-background-muted uip-border-round uip-padding-xxs uip-flex uip-cursor-pointer uip-w-100p uip-flex uip-flex-column uip-flex-no-wrap" @click="chooseLink(sub[2])">\n                           \n                              <div class="uip-text-s uip-text-bold" v-html="sub[0]"></div>\n                              <div class="uip-text-s uip-text-muted uip-no-wrap uip-overflow-hidden uip-text-ellipsis uip-max-w-100p">{{sub[2]}}</div>\n                             \n                           </div>\n                           \n                        </template>\n                        \n                      </template>\n                      \n                    </div>\n                  </template>\n                  \n                  <template v-if="activeValue == \'content\'">\n                  \n                      \n                      <input type="text" class="uip-input-small uip-w-100p" v-model="fetchSearchString" :placeholder="strings.searchPages">\n                      \n                      \n                      <div class="uip-flex uip-flex-column uip-max-h-200" style="overflow:auto">\n                        <template v-for="post in getPosts">\n                         <div class="uip-border-round hover:uip-background-muted uip-border-round uip-padding-xxs uip-flex uip-cursor-pointer" @click="chooseLink(post.link)">\n                           <div class="">\n                            <div class="uip-text-s uip-text-bold">{{post.name}}</div>\n                            <div class="uip-text-s uip-text-muted">{{post.link}}</div>\n                           </div>\n                         </div>\n                        </template>\n                        <div v-if="posts.length < 1 && fetchSearchString != \'\'" class="uip-text-muted uip-text-s uip-padding-xxs">{{strings.noneFound}}</div>\n                      </div>\n                      \n                  </template>\n                  \n                  <template v-if="activeValue == \'dynamic\' && link.dynamic">\n                    <div class="uip-flex uip-flex-column uip-row-gap-xxxs uip-w-250 uip-max-h-200 uip-scrollbar uip-overflow-auto">\n                      <template v-for="dynamic in dynamics">\n                       <div v-if="dynamic.type == \'link\'" class="uip-border-round hover:uip-background-muted uip-border-round uip-padding-xxs uip-flex uip-flex-between uip-flex-center uip-flex-middle uip-cursor-pointer"  :class="{\'uip-background-primary-wash\' : link.dynamicKey == dynamic.key}">\n                         <div class="">\n                          <div class="uip-text-s uip-text-bold">{{dynamic.label}}</div>\n                          <div class="uip-text-xs uip-text-muted uip-flex uip-flex-center uip-gap-s">\n                            <span class="uip-no-wrap uip-overflow-hidden uip-text-ellipsis uip-max-w-150">{{dynamic.value}}</span>\n                          </div>\n                         </div>\n                         <span v-if="link.dynamicKey == dynamic.key" @click="removeDynamicItem()"\n                         class="uip-padding-xxs uip-border-round uip-background-muted hover:uip-background-grey uip-cursor-pointer uip-flex uip-flex-middle uip-flex-center">\n                          <span class="uip-icon">delete</span>\n                         </span>\n                         <span v-else @click="chooseItem(dynamic)"\n                          class="uip-padding-xxs uip-border-round uip-background-muted hover:uip-background-grey uip-cursor-pointer uip-flex uip-flex-middle uip-flex-center">\n                           {{strings.select}}\n                          </span>\n                       </div>\n                      </template>\n                    </div>\n                  </template>\n                  \n                </div>\n                \n              </template>\n          </dropdown>\n          \n          <input type="text" class="uip-input-small uip-flex-grow" v-model="link.value">\n        \n        </div>\n        \n        \n        <div class="uip-flex uip-flex-column uip-row-gap-xxxs" v-if="!hideLinkType && link.value != \'\'">\n        \n          <toggle-switch :options="linkModes" :activeValue="link.newTab" :returnValue="function(data){ link.newTab = data}"></toggle-switch>\n        \n        </div>\n        \n      </div>'};