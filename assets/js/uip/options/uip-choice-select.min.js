export function moduleData(){return{props:{returnData:Function,value:[Object,String,Boolean],args:Object},data:function(){return{option:{value:!1},options:{}}},watch:{option:{handler(t,e){this.returnData(this.option)},deep:!0}},inject:["uipress"],mounted:function(){this.formatInput(this.value),this.formatArgs(this.value)},computed:{enabledDisabled:()=>({true:{value:!0,label:__("Disabled","uipress-lite")},false:{value:!1,label:__("Enabled","uipress-lite")}}),yesNo:()=>({false:{value:!1,label:__("Disabled","uipress-lite")},true:{value:!0,label:__("Enabled","uipress-lite")}}),hideShow:()=>({false:{value:!1,label:__("Show","uipress-lite")},true:{value:!0,label:__("Hide","uipress-lite")}}),returnOptions(){return this.options}},methods:{formatArgs(){if(this.uipress.isObject(this.args)){if("type"in this.args)return"enabledDisabled"==this.args.type&&(this.options=this.enabledDisabled),void("hideShow"==this.args.type&&(this.options=this.hideShow));if("options"in this.args)return void(this.options=this.args.options)}this.options=this.yesNo},formatInput(t){void 0!==t&&(this.uipress.isObject(t)?this.option={...this.option,...t}:(1==t&&(this.option.value=!0),0==t&&(this.option.value=!1)))}},template:'\n    <div class="uip-flex uip-w-100p">\n      <toggle-switch :options="returnOptions" :activeValue="option.value" :returnValue="function(data){ option.value = data}"></toggle-switch>\n    </div>\n    '}};