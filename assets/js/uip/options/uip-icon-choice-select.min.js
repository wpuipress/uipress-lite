export function moduleData(){return{props:{returnData:Function,value:[Object,String],args:Object},data:function(){return{option:{}}},watch:{option:{handler(t,i){this.returnData(this.option)},deep:!0}},inject:["uipress"],mounted:function(){this.formatInput(this.value)},methods:{formatInput(t){return void 0===t?(this.option.value="left",this.option):this.uipress.isObject(t)?"value"in t?void(this.option=t):void(this.option.value="left"):Array.isArray(t)?void(this.option.value=""):void(this.option.value=t)},activateOption(t){let i=this;t==i.option.value?i.option.value=!1:i.option.value=t},returnStyle(t){if("iconRotate"in t)return"rotate:"+t.iconRotate+"deg"}},template:'\n    <div class="uip-flex uip-flex-row uip-gap-xxs">\n      <template v-for="item in args.options">\n        <uip-tooltip :message="item.label" :delay="100">\n          <div class="uip-padding-xxs uip-link-muted uip-border-round uip-flex uip-flex-center uip-flex-middle uip-w-22 uip-ratio-1-1" \n          :class="option.value == item.value ? \'uip-background-primary-wash uip-text-emphasis\' : \'uip-background-muted hover:uip-background-grey\'" @click="activateOption( item.value )">\n            <div v-if="!Array.isArray(item.icon)" class="uip-icon uip-text-l" :style="returnStyle(item)">{{item.icon}}</div>\n            <template v-else v-for="icon in item.icon">\n              <div class="uip-icon uip-text-l" :style="returnStyle(item)">{{icon}}</div>\n            </template>\n          </div>\n        </uip-tooltip>\n      </template>\n    </div>'}};