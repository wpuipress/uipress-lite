const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export default{props:{returnData:Function,value:Object},data(){return{toolbar:this.uipApp.data.toolbar,selected:{},updating:!1,strings:{renameItem:__("Rename item","uipress-lite")}}},watch:{value:{handler(e,t){this.updating||this.formatInput()},deep:!0,immediate:!0},selected:{handler(e,t){this.updating||this.returnData(this.selected)},deep:!0}},methods:{async formatInput(){this.updating=!0,this.selected=this.isObject(this.value)?{...this.value}:{},await this.$nextTick(),this.updating=!1},returnIcon(e){return this.selected[e]?this.selected[e].icon:""},setItemData(e){this.selected[e]={icon:"",title:""}},returnIconPreview(e){const t=this.returnIcon(e);return t||"favorite"},returnTitle(e){return this.selected[e]?this.selected[e].title:""},setIcon(e,t){e in this.selected||this.setItemData(e),this.selected[e].icon=t.value}},template:'\n    <div class="uip-flex uip-flex-column uip-row-gap-xs uip-w-100p">\n    \n        <template v-for="item in toolbar">\n          <div class="uip-flex uip-flex-row uip-gap-xs uip-w-100p">\n            \n            \n            <inline-icon-select :value="{value:returnIcon(item.id)}" :returnData="(data)=>{setIcon(item.id, data)}">\n              <template v-slot:trigger>\n                <div class="uip-icon uip-text-l uip-padding-xxxs uip-background-muted uip-border-rounder">{{returnIconPreview(item.id)}}</div>\n              </template>\n            </inline-icon-select>\n            \n            \n            <uip-input :value="returnTitle(item.id)" :returnData="function (data) {selected[item.id].title = data}" :placeHolder="item.id" class="uip-flex-grow"></uip-input>\n          </div>\n        </template>\n        \n\t  </div>'};