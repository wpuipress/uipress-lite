export default{props:{returnData:Function,value:[Object,String,Boolean],args:Object},data:function(){return{option:{value:!1},options:{},updating:!1}},watch:{args:{handler(t,e){this.updating||this.formatArgs()},deep:!0,immediate:!0},value:{handler(t,e){this.updating||this.formatInput()},deep:!0,immediate:!0},option:{handler(t,e){this.updating||this.returnData(this.option)},deep:!0}},computed:{enabledDisabled:()=>({true:{value:!0,label:__("Disabled","uipress-lite")},false:{value:!1,label:__("Enabled","uipress-lite")}}),yesNo:()=>({false:{value:!1,label:__("Disabled","uipress-lite")},true:{value:!0,label:__("Enabled","uipress-lite")}}),hideShow:()=>({false:{value:!1,label:__("Show","uipress-lite")},true:{value:!0,label:__("Hide","uipress-lite")}}),returnOptions(){return this.options}},methods:{formatArgs(){if(this.options=this.yesNo,this.isObject(this.args)&&(this.args.options&&(this.options=this.args.options),this.args.type))switch(this.args.type){case"enabledDisabled":this.options=this.enabledDisabled;break;case"hideShow":this.options=this.hideShow}},async formatInput(){this.updating=!0;let t=1==this.value;this.option=this.isObject(this.value)?{...this.value}:{value:t},await this.$nextTick(),this.updating=!1}},template:'\n    \n      <toggle-switch class="uip-w-100p" :options="returnOptions" :activeValue="option.value" :returnValue="function(data){ option.value = data}"/>\n      \n    '};