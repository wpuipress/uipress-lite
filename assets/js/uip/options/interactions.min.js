import{nextTick}from"../../libs/vue-esm.js";export default{inject:["uiTemplate"],props:{block:Object},data(){return{blocksearch:"",option:this.returnDefaultOptions,updating:!1,strings:{newinteraction:__("New interaction","uipress-lite"),type:__("Type","uipress-lite"),operator:__("Operator","uipress-lite"),searchUsers:__("Search","uipress-lite"),value:__("Value","uipress-lite"),addinteraction:__("Add interaction","uipress-lite"),editinteraction:__("Edit interaction","uipress-lite"),users:__("Users","uipress-lite"),dateAndTime:__("Date and time","uipress-lite"),site:__("Site","uipress-lite"),action:__("Action","uipress-lite"),defaultActions:__("Default","uipress-lite"),uipressActions:__("uiPress","uipress-lite"),siteActions:__("Site","uipress-lite"),target:__("Target","uipress-lite"),CSSselector:__("CSS selector","uipress-lite"),block:__("Block","uipress-lite"),searchBlocks:__("Search blocks","uipress-lite"),blockSpecific:__("Block specific","uipress-lite"),blockList:__("Block list","uipress-lite"),trigger:__("Trigger","uipress-lite"),key:__("Key","uipress-lite")},interactions:{defaultActions:{showElement:{value:"showElement",label:__("Show element","uipress-lite")},hideElement:{value:"hideElement",label:__("Hide element","uipress-lite")},toggleElementVisibility:{value:"toggleElementVisibility",label:__("Toggle element visibility","uipress-lite")},addAttribute:{value:"addAttribute",label:__("Add attribute","uipress-lite")},removeAttribute:{value:"removeAttribute",label:__("Remove attribute","uipress-lite")},toggleAttribute:{value:"toggleAttribute",label:__("Toggle attribute","uipress-lite")},javascript:{value:"javascript",label:__("Custom javascript","uipress-lite")}},uipressActions:{toggleDarkMode:{value:"toggleDarkMode",label:__("Toggle dark mode","uipress-lite")},toggleMenuCollapse:{value:"toggleMenuCollapse",label:__("Toggle menu collapse","uipress-lite")},toggleFulscreenMode:{value:"toggleFulscreenMode",label:__("Toggle fullscreen mode","uipress-lite")}},siteActions:{toggleScreenOptions:{value:"toggleScreenOptions",label:__("Toggle screen options","uipress-lite")},toggleHelpOptions:{value:"toggleHelpOptions",label:__("Toggle help options","uipress-lite")}}}}},watch:{block:{handler(){this.updating||this.injectProp()},deep:!0,immediate:!0}},computed:{returnAllActions(){return{...this.interactions.defaultActions,...this.interactions.uipressActions,...this.interactions.siteActions}},newInteraction(){return{id:this.createUID(),type:"click",target:"self",action:""}},returnInteractionTypes:()=>({click:{value:"click",label:__("Click","uipress-lite")},dblclick:{value:"dblclick",label:__("Double click","uipress-lite")},mouseenter:{value:"mouseenter",label:__("Hover / Mouse enter","uipress-lite")},mouseleave:{value:"mouseleave",label:__("Mouse leave","uipress-lite")},focus:{value:"focus",label:__("Focus","uipress-lite")},blur:{value:"blur",label:__("Blur","uipress-lite")}}),returnTargetTypes:()=>({self:{value:"self",label:__("Self","uipress-lite")},selector:{value:"selector",label:__("CSS selector","uipress-lite")},block:{value:"block",label:__("Block","uipress-lite")}}),hasinteractions(){return!!this.option.interactions&&this.option.interactions.length},returnDefaultOptions:()=>({relation:"and",interactions:[],blockTarget:""})},methods:{async injectProp(){this.updating=!0,Array.isArray(this.block.interactions)||(this.block.interactions=[]),await nextTick(),this.updating=!1},async addinteraction(){const e=JSON.parse(JSON.stringify(this.newInteraction));this.block.interactions.push(e),await this.$nextTick();setTimeout(()=>{const e=this.block.interactions.length-1;this.$refs["interaction"+e][0].show()},100)},removeinteraction(e){this.block.interactions.splice(e,1)},returnActionNiceName(e){return e?this.returnAllActions[e]?this.returnAllActions[e].label:e:""},returnInteractionNiceName(e){return this.returnInteractionTypes[e].label},blockInSearch(e){if(!this.blocksearch)return!0;const t=this.blocksearch.toLowerCase(),i=e.name?e.name.toLowerCase():"",n=e.uid?e.uid.toLowerCase():"";return!(!i.includes(t)&&!n.includes(t))},returnBlockSpecificActions(e){if(!(e in this.uiTemplate.blockRefs))return!1;const t=this.uiTemplate.blockRefs[e].ref;return"returnPublicMethods"in t&&t.returnPublicMethods()}},template:'\n\t\n\t<div class="uip-flex uip-w-100p uip-flex-column uip-row-gap-xs" v-if="block.interactions">\n  \n\t  <template v-for="(element, index) in block.interactions">\n    \n\t\t<dropdown pos="left center" class="uip-w-100p" :snapX="[\'#uip-block-settings\']" :ref="\'interaction\'+index">\n\t\t  <template v-slot:trigger>\n      \n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{returnInteractionNiceName(element.type)}}</span></div>\n\t\t\t\n\t\t\t  <div class="uip-flex uip-flex-row uip-gap-xxs">\n\t\t\t    <div class="uip-padding-xxs uip-padding-left-xs uip-border-rounder uip-text-s uip-background-muted uip-flex-grow uip-text-ellipsis uip-no-wrap uip-overflow-hidden uip-max-w-160">\n\t\t\t\t  {{returnActionNiceName(element.action)}}\n\t\t\t    </div>\n\t\t\t    \n\t\t\t    <button class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted"\n\t\t\t    @click="removeinteraction(index)">close</button>\n\t\t\t  </div>  \n      \n            </div>\n\t\t\t\n\t\t  </template>\n\t\t  <template v-slot:content>\n\t\t\t<div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-s">\n      \n              <div class="uip-flex uip-flex-between uip-flex-center">\n                <div class="uip-text-emphasis uip-text-bold uip-text-s">{{strings.editinteraction}}</div>\n                <div @click="$refs[\'interaction\'+index][0].close()" class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                  <span class="uip-icon">close</span>\n                </div>\n              </div>\n\t\t\t\n\t\t\t  <div class="uip-grid-col-1-3">\n        \n                  <div class="uip-text-muted uip-flex uip-flex-center uip-text-s">ID</div>\n                  <div class="uip-flex uip-flex-center uip-gap-xxs">\n                    <input type="text" class="uip-input-small uip-flex-grow" style="min-width:1px" v-model="element.id" disabled="true">\n                  </div>\n\t\t\t  \n\t\t\t\t  <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.trigger}}</span></div>\n\t\t\t\t  <div class="uip-flex uip-flex-center">\n          \n\t\t\t\t\t<select v-model="element.type" \n                    class="uip-input uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p uip-w-100p uip-border-rounder" \n                    style="padding-top: 2px; padding-bottom: 2px; border-radius: var(--uip-border-radius-large);">\n          \n\t\t\t\t\t    <template v-for="item in returnInteractionTypes">\n\t\t\t\t\t\t  <option :value="item.value">{{item.label}}</option>\n\t\t\t\t\t    </template>\n                      \n\t\t\t\t\t</select>\n          \n\t\t\t\t  </div> \n          \n\t\t\t\t  \n\t\t\t\t  <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.target}}</span></div>\n          \n                  <select class="uip-input uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p uip-w-100p uip-border-rounder" \n                  v-model="element.target" style="padding-top: 2px; padding-bottom: 2px; border-radius: var(--uip-border-radius-large);">\n                  \n                    <template v-for="item in returnTargetTypes">\n                      <option :value="item.value">{{item.label}}</option>\n                    </template>\n                  \n                  </select>\n                  \n                  <template v-if="element.target == \'selector\'">\n                  \n                    <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.CSSselector}}</span></div>\n                    <div class="uip-flex uip-flex-center uip-gap-xxs">\n                      <input type="text" class="uip-input-small uip-flex-grow" style="min-width:1px" placeholder="#element_id" v-model="element.selector">\n                    </div>\n                  \n                  </template>\n                  \n                  \n                  <template v-if="element.target == \'block\'">\n                  \n                    <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.block}}</span></div>\n                    <div class="uip-flex uip-flex-center uip-gap-xxs">\n                      \n                      \n                      <dropdown pos="bottom right" class="uip-flex uip-w-100p" :ref="\'blocksearch_\' + index">\n                      \n                        <template #trigger>\n                        \n                          <div class="uip-padding-xxs uip-padding-left-xs uip-border-rounder uip-text-s uip-background-muted uip-flex-grow uip-text-ellipsis uip-no-wrap uip-overflow-hidden uip-max-w-160 uip-flex uip-gap-xxxs uip-flex-center">\n                          \n                            <span v-if="!element.blockTarget" class="uip-text-muted">{{strings.searchBlocks}}...</span>\n                            <span v-else class="uip-overflow-hidden uip-text-ellipsis uip-max-w-140">{{element.blockTarget}}</span>\n                            \n                            <a v-if="element.blockTarget" \n                            @click.prevent="element.blockTarget = \'\'"\n                            class="uip-no-underline uip-border-rounder uip-padding-xxxs uip-link-muted"><span class="uip-icon">close</span></a>\n                            \n                          </div>\n                        \n                        \n                        </template>\n                        \n                        <template #content>\n                        \n                          <div class="uip-w-260 uip-padding-s uip-flex uip-flex-column uip-row-gap-xs">\n                          \n                            <div class="uip-flex uip-flex-between uip-flex-center">\n                            \n                              <div class="uip-text-emphasis uip-text-bold uip-text-s">{{strings.blockList}}</div>\n                              \n                              <div @click="$refs[\'blocksearch_\' + index][0].close()"\n                              class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                                <span class="uip-icon">close</span>\n                              </div>\n                              \n                            </div>\n                          \n                            <input type="text" class="uip-input-small uip-flex-grow" :placeholder="strings.searchBlocks" v-model="blocksearch" autofocus>\n                            \n                            <div class="uip-flex uip-flex-column uip-max-h-300 uip-overflow-auto">\n                            \n                              <template v-for="block in uiTemplate.blockRefs">\n                              \n                                <div v-if="blockInSearch(block)" \n                                @click="element.blockTarget = block.uid;$refs[\'blocksearch_\' + index][0].close()"\n                                :class="element.blockTarget === block.uid ? \'uip-background-muted\' : \'hover:uip-background-muted\'"\n                                class="uip-padding-xxs uip-border-rounder uip-text-s uip-cursor-pointer">\n                                  <div class="uip-text-emphasis">{{block.name}}</div>\n                                  <div class="uip-text-muted">{{block.uid}}</div>\n                                </div>\n                              \n                              </template>\n                              \n                            </div>\n                          \n                          </div>\n                        \n                        </template>\n                      \n                      </dropdown>\n                      \n                    </div>\n                  \n                  </template>\n                  \n                  \n                  <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.action}}</span></div>\n                  \n                  <select class="uip-input uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p uip-w-100p uip-border-rounder" \n                  v-model="element.action" style="padding-top: 2px; padding-bottom: 2px; border-radius: var(--uip-border-radius-large);">\n                    \n                    \x3c!-- Default actions--\x3e\n                    <optgroup :label="strings.defaultActions">\n                      <template v-for="item in interactions.defaultActions">\n                        <option :value="item.value">{{item.label}}</option>\n                      </template>\n                    </optgroup>\n                    \n                    \x3c!-- uipressActions actions--\x3e\n                    <optgroup :label="strings.uipressActions">\n                      <template v-for="item in interactions.uipressActions">\n                        <option :value="item.value">{{item.label}}</option>\n                      </template>\n                    </optgroup>\n                    \n                    \x3c!-- siteActions actions--\x3e\n                    <optgroup :label="strings.siteActions">\n                      <template v-for="item in interactions.siteActions">\n                        <option :value="item.value">{{item.label}}</option>\n                      </template>\n                    </optgroup>\n                    \n                    \x3c!-- Block actions--\x3e\n                    <optgroup v-if="element.target == \'block\' && element.blockTarget && returnBlockSpecificActions(element.blockTarget)" :label="strings.blockSpecific">\n                      <template v-for="item in returnBlockSpecificActions(element.blockTarget)">\n                        <option :value="\'_block_\' + item">{{item}}</option>\n                      </template>\n                    </optgroup>\n                    \n                  </select> \n                  \n                  \n                  <template v-if="element.action == \'javascript\'">\n                  \n                    <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>Javascript</span></div>\n                    \n                    <code-editor :value="element.javascript" :returnData="(d)=>{element.javascript=d}" :args="{language: \'javascript\'}"/>\n                  \n                  </template>\n                  \n                  <template v-if="element.action == \'toggleAttribute\' || element.action == \'addAttribute\' || element.action == \'removeAttribute\'">\n                  \n                    <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.key}}</span></div>\n                    <div class="uip-flex uip-flex-center uip-gap-xxs">\n                      <input type="text" class="uip-input-small uip-flex-grow" style="min-width:1px" placeholder="class" v-model="element.key">\n                    </div>\n                    \n                    <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.value}}</span></div>\n                    <div class="uip-flex uip-flex-center uip-gap-xxs">\n                      <input type="text" class="uip-input-small uip-flex-grow" style="min-width:1px" placeholder="uip-background-primary" v-model="element.keyvalue">\n                    </div>\n                  \n                  </template>\n\t\t\t\t  \n\t\t\t  </div>    \n\t\t\t  \n\t\t\t</div>\n\t\t\t\n\t\t  </template>\n\t\t</dropdown>\n\t  \n\t  </template>\n\t  \n      \x3c!-- Placeholder --\x3e\n      <div class="uip-grid-col-1-3">\n        <div></div>\n\t    <div @click="addinteraction()" class="uip-padding-xxs uip-border-rounder uip-background-muted hover:uip-background-grey uip-cursor-pointer uip-flex uip-flex-middle uip-flex-center uip-gap-xs uip-flex-grow">\n\t\t  <span class="uip-icon">add</span>\n\t    </div>\n      </div>\n\t  \n\t  \n\t</div>'};