const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent,nextTick}from"../../libs/vue-esm.js";import{core as PostTypeSelect,preview as PostTypeSelectPreview}from"../components/post-type-select.min.js?ver=3.3.1";import{core as StatusTypeSelect,preview as StatusTypeSelectPreview}from"../components/multiselect.min.js?ver=3.3.1";import{core as UserRoleSelect,preview as UserRoleSelectPreview}from"../components/user-role-multiselect.min.js?ver=3.3.1";import Comparisons from"../v3.5/lists/comparisons.min.js";import DataTypes from"../v3.5/lists/query_data_types.min.js";import FieldTypes from"../v3.5/lists/tax_field_types.min.js";import OrderByOptions from"../v3.5/lists/query_orderby.min.js";import OrderByOptionsUser from"../v3.5/lists/query_orderby_user.min.js";import OrderByOptionsSites from"../v3.5/lists/query_orderby_sites.min.js";const QueryBuilder={components:{PostTypeSelectPreview:PostTypeSelectPreview,StatusTypeSelectPreview:StatusTypeSelectPreview,UserRoleSelectPreview:UserRoleSelectPreview},props:{returnData:Function,value:Object,blockSettings:Object},data:()=>({open:!1,options:{type:"post",postType:["post"],order:"DESC",orderBy:"date",roles:[],orderBykEY:"",perPage:20,status:["publish"],relation:"AND",taxRelation:"AND",offset:"",taxQuery:[],metaQuery:[],limitToAuthor:!1,showPagination:!1,search:!1},strings:{type:__("Type","uipress-lite"),postType:__("Post type","uipress-lite"),orderBy:__("Order by","uipress-lite"),perPage:__("Per page","uipress-lite"),offset:__("Offset","uipress-lite"),metaQuery:__("Meta query","uipress-lite"),taxQuery:__("Tax query","uipress-lite"),postTypes:__("Post types","uipress-lite"),searchPostTypes:__("Search post types","uipress-lite"),seacrhStatus:__("Search statuses","uipress-lite"),metaKey:__("Meta key","uipress-lite"),metaValue:__("Meta value","uipress-lite"),terms:__("Terms","uipress-lite"),compare:__("Compare","uipress-lite"),order:__("Order","uipress-lite"),metaKey:__("Meta key","uipress-lite"),status:__("Status","uipress-lite"),relation:__("Relation","uipress-lite"),postStatus:__("Post statuses","uipress-lite"),seacrhPostStatus:__("Search post statuses","uipress-lite"),pagination:__("Pagination","uipress-lite"),roles:__("Roles","uipress-lite"),searchRoles:__("Search roles","uipress-lite"),search:__("Search","uipress-lite"),usersOwnContent:__("Own content","uipress-lite"),taxonomy:__("Taxonomy","uipress-lite"),field:__("Field","uipress-lite"),taxValue:__("Tax value","uipress-lite"),includeChildren:__("Include children","uipress-lite")},fieldTypes:FieldTypes,queryType:{post:{value:"post",label:__("Posts","uipress-lite")},user:{value:"user",label:__("Users","uipress-lite")}},relationOptions:{AND:{value:"AND",label:__("AND","uipress-lite")},OR:{value:"OR",label:__("OR","uipress-lite")}},comparisons:Comparisons,dataTypes:DataTypes,showPagination:{false:{value:!1,label:__("Hide","uipress-lite")},true:{value:!0,label:__("Show","uipress-lite")}},activeSection:"query",metaSections:{query:{value:"query",label:__("Query","uipress-lite")},meta:{value:"meta",label:__("Meta","uipress-lite")},tax:{value:"tax",label:__("Tax","uipress-lite")},settings:{value:"settings",label:__("Settings","uipress-lite")}},updating:!1,orderByOptions:OrderByOptions,orderByOptionsUser:OrderByOptionsUser,orderByOptionsSites:OrderByOptionsSites}),watch:{value:{handler(e,t){this.updating||this.formatValue()},deep:!0,immediate:!0},options:{handler(e,t){this.returnData(e)},deep:!0}},mounted(){this.maybePushSiteOption()},computed:{returnOrderOptions(){return"post"==this.options.type?this.orderByOptions:"user"==this.options.type?this.orderByOptionsUser:"site"==this.options.type?this.orderByOptionsSites:void 0},returnMetaSections(){let e={...this.metaSections};return"post"!=this.options.type&&(delete e.tax,"tax"==this.activeSection&&(this.activeSection="query")),e}},methods:{async formatValue(){this.updating=!0,this.options=this.isObject(this.value)?{...this.options,...this.value}:{...this.options},await this.$nextTick(),this.updating=!1},maybePushSiteOption(){this.uipApp.data.options.multisite&&(this.queryType.site={value:"site",label:__("Sites","uipress-lite")})},defaultMetaQuery:()=>structuredClone({key:"",value:"",compare:"=",type:"CHAR"}),defaultTaxQuery:()=>structuredClone({taxonomy:"",value:"",fieldType:"term_id",compare:"=",includeChildren:!0}),returnTaxPostTypes:e=>e.toString(),requestMetaScreen(e){const t={component:"MetaBuilder",value:e,label:this.strings.metaQuery,returnData:t=>{e=t}};this.$emit("request-screen",t)},async addNewMeta(){const e=this.defaultMetaQuery();this.options.metaQuery.push(e),await nextTick();const t=this.options.metaQuery.length-1;let i=this.options.metaQuery[t];this.requestMetaScreen(i)},requestTaxScreen(e){const t={component:"TaxBuilder",value:e,label:this.strings.taxQuery,returnData:t=>{e=t}};this.$emit("request-screen",t)},async addNewTax(){const e=this.defaultTaxQuery();this.options.taxQuery.push(e),await nextTick();const t=this.options.taxQuery.length-1;let i=this.options.taxQuery[t];this.requestTaxScreen(i)},requestOrderByScreen(){const e={component:"OrderByBuilder",value:this.options,label:this.strings.orderBy,returnData:e=>{this.options=e}};this.$emit("request-screen",e)},requestPostTypeScreen(){const e={component:"PostTypeSelect",label:this.strings.postTypes,attributes:{selected:this.options.postType,placeHolder:this.strings.postTypes,searchPlaceHolder:this.strings.searchPostTypes,updateSelected:e=>{this.options.postType=e}}};this.$emit("request-screen",e)},requestPostStatusScreen(){const e={component:"StatusTypeSelect",label:this.strings.postStatus,attributes:{selected:this.options.status,placeHolder:this.strings.postStatus,availableOptions:this.uipApp.data.options.post_statuses,searchPlaceHolder:this.strings.seacrhStatus,updateSelected:e=>{this.options.status=e}}};this.$emit("request-screen",e)},requestRoleSelectScreen(){const e={component:"UserRoleSelect",label:this.strings.roles,attributes:{type:"roles",selected:this.options.roles,placeHolder:this.strings.roles,searchPlaceHolder:this.strings.searchRoles,updateSelected:e=>{this.options.roles=e}}};this.$emit("request-screen",e)}},template:'\n  \n      <div class="uip-flex uip-flex-column uip-row-gap-s">\n      \n        <toggle-switch :options="returnMetaSections" :activeValue="activeSection" :returnValue="(d)=>{ activeSection = d }"></toggle-switch>\n      \n        <div class="uip-flex uip-flex-column uip-row-gap-xs uip-padding-left-xs">\n          \n          <template v-if="activeSection==\'query\'">\n          \n            \x3c!--Type --\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.type}}</span></div>\n                \n              <toggle-switch :options="queryType" :activeValue="options.type" :returnValue="function(data){ options.type = data}"></toggle-switch>\n              \n            </div>\n            \n            \n            \n            \n            \x3c!--Post Type --\x3e\n            <div v-if="options.type == \'post\'" class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.postType}}</span></div>\n                \n              <PostTypeSelectPreview @click="requestPostTypeScreen()"\n              :selected="options.postType" :placeHolder="strings.postTypes"\n              :searchPlaceHolder="strings.searchPostTypes" :updateSelected="(d)=>{options.postType = d}" />\n              \n            </div>\n            \n            \n            \x3c!--Role select --\x3e\n            <div v-if="options.type == \'user\'" class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.roles}}</span></div>\n                \n              <UserRoleSelectPreview @click="requestRoleSelectScreen()" \n              type="roles" :selected="options.roles" :placeHolder="strings.roles"\n              :searchPlaceHolder="strings.searchRoles" :updateSelected="(d)=>{options.roles = d}" />\n              \n            </div>\n            \n            \n            \x3c!--Status --\x3e\n            <div class="uip-grid-col-1-3" v-if="options.type == \'post\'">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.status}}</span></div>\n              \n              <StatusTypeSelectPreview\n              @click="requestPostStatusScreen()"\n              :availableOptions="uipApp.data.options.post_statuses" :selected="options.status" :placeHolder="strings.postStatus"\n              :searchPlaceHolder="strings.seacrhStatus" :updateSelected="function(d){options.status = d}" />\n              \n            </div>\n            \n            \n            \x3c!--Order by--\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.order}}</span></div>\n                \n              \n              <div @click="requestOrderByScreen()" class="uip-background-muted uip-border-rounder uip-padding-xxs uip-padding-left-xs uip-flex uip-gap-xs uip-w-100p uip-pointer-cursor">\n                <div class="uip-text-capitalize uip-flex uip-gap-xxs">\n                  <span>{{options.orderBy}}</span>\n                  <span class="uip-text-muted">|</span>\n                  <span class="uip-text-muted">{{options.order}}</span>\n                </div>\n              </div>\n              \n            </div>\n            \n            \n            \x3c!--Per page --\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.perPage}}</span></div>\n                \n              <div class="uip-position-relative uip-flex uip-gap-xs">\n                <input type="number" min="1" class="uip-input uip-input-small uip-remove-steps uip-background-remove uip-padding-xxxs uip-flex-grow" style="width: 30px;" v-model="options.perPage">\n                \n                <div class="uip-padding-xxs uip-border-rounder uip-background-muted uip-flex uip-gap-xxs uip-no-text-select uip-flex-center">\n                  <div class="uip-link-muted uip-icon" @click="options.perPage = parseInt(options.perPage) - 1">remove</div>\n                  <div class="uip-border-right uip-h-12"></div>\n                  <div class="uip-link-muted uip-icon" @click="options.perPage = parseInt(options.perPage) + 1">add</div>\n                </div>\n              </div>\n              \n            </div>\n            \n            \n            \n            \n            \n            \x3c!--Offset --\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.offset}}</span></div>\n                \n              <div class="uip-position-relative uip-flex uip-gap-xs">\n                <input type="number" min="0" class="uip-input uip-input-small uip-remove-steps uip-background-remove uip-padding-xxxs uip-flex-grow" style="width: 30px;" v-model="options.offset">\n                \n                <div class="uip-padding-xxs uip-border-rounder uip-background-muted uip-flex uip-gap-xxs uip-no-text-select uip-flex-center">\n                  <div class="uip-link-muted uip-icon" @click="options.offset = parseInt(options.offset) - 1">remove</div>\n                  <div class="uip-border-right uip-h-12"></div>\n                  <div class="uip-link-muted uip-icon" @click="options.offset = parseInt(options.offset) + 1">add</div>\n                </div>\n              </div>\n              \n            </div>\n            \n            \n            \n            \n            \n            \n            \n            \n          </template>\n          \x3c!-- End query section--\x3e\n          \n          \n          \n          \n          \x3c!-- Start meta section--\x3e\n          <template v-if="activeSection==\'meta\'">\n          \n            \x3c!--Meta query--\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-padding-top-xxxs uip-flex-start"><span>{{strings.metaQuery}}</span></div>\n                \n              <div class="uip-flex uip-flex-column uip-row-gap-xxs">\n              \n                <template v-for="(meta, index) in options.metaQuery">\n                \n                  <div class="uip-flex uip-gap-xs uip-row-gap-xs uip-flex-center">\n                  \n                    <div @click="requestMetaScreen(meta)" class="uip-background-muted uip-border-rounder uip-padding-xxxs uip-padding-left-xs uip-flex uip-flex-center uip-text-s uip-gap-xxs uip-w-100p uip-cursor-pointer">\n                        \n                        <span class="uip-text-muted uip-flex-grow">{{meta.type}}</span>\n                        <span>{{meta.key}}</span>\n                        <span v-if="meta.type && meta.key" class="uip-text-muted">|</span>\n                        \n                        <a @click.prevent.stop="options.metaQuery.splice(index, 1)"\n                        class="uip-link-muted uip-icon uip-border-rounder uip-padding-xxs uip-link-muted" >\n                          close\n                        </a>\n                        \n                    </div>\n                    \n                  </div>\n                  \n                </template>\n                \n                <button class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-w-100p uip-text-s" \n                @click="addNewMeta()">add</button>\n              \n              </div>\n              \n              \n            </div>\n            \n            \x3c!--Relation --\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.relation}}</span></div>\n                \n              <div class="uip-position-relative">\n                <toggle-switch :options="relationOptions" :activeValue="options.relation" :returnValue="function(data){ options.relation = data}"></toggle-switch>\n              </div>\n              \n            </div>\n          \n          </template>\n          \x3c!--End meta section--\x3e\n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \x3c!-- Start tax section--\x3e\n          <template v-if="activeSection==\'tax\'">\n          \n            \n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-padding-top-xxxs uip-flex-start"><span>{{strings.taxQuery}}</span></div>\n                \n              <div class="uip-flex uip-flex-column uip-row-gap-xxs">\n              \n                <template v-for="(tax, index) in options.taxQuery">\n                \n                  <div class="uip-flex uip-gap-xs uip-row-gap-xs uip-flex-center">\n                  \n                    <div @click="requestTaxScreen(tax)" class="uip-background-muted uip-border-rounder uip-padding-xxxs uip-padding-left-xs uip-flex uip-flex-center uip-text-s uip-gap-xxs uip-w-100p uip-cursor-pointer">\n                        \n                        <div class="uip-flex uip-flex-center uip-flex-grow uip-gap-xxs">\n                          <span class="uip-text-muted">{{tax.fieldType}}</span>\n                          <span v-if="tax.taxonomy && tax.fieldType" class="uip-text-muted">|</span>\n                          <span class="uip-text-muted">{{tax.taxonomy}}</span>\n                        </div>\n                        \n                        <a @click.prevent.stop="options.taxQuery.splice(index, 1)"\n                        class="uip-link-muted uip-icon uip-border-rounder uip-padding-xxs uip-link-muted" >\n                          close\n                        </a>\n                        \n                    </div>\n                    \n                  </div>\n                  \n                </template>\n                \n                <button class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-w-100p uip-text-s" \n                @click="addNewTax()">add</button>\n              \n              </div>\n              \n              \n            </div>\n            \n            \n            \x3c!--TAX Relation --\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.relation}}</span></div>\n                \n              <div class="uip-position-relative">\n                <toggle-switch :options="relationOptions" :activeValue="options.taxRelation" :returnValue="function(data){ options.taxRelation = data}"></toggle-switch>\n              </div>\n              \n            </div>\n          \n          \n          </template>\n          \x3c!--End tax section--\x3e\n          \n          \n          \n          \n          \x3c!-- Start settings section--\x3e\n          <template v-if="activeSection==\'settings\'">\n          \n            \x3c!--Has own content --\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.usersOwnContent}}</span></div>\n              <switch-select :args="{asText: true}" :activeValue="options.limitToAuthor" :returnValue="function(data){ options.limitToAuthor = data}"/>\n              \n            </div>\n            \n            \x3c!--Pagination --\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.pagination}}</span></div>\n              <toggle-switch :options="showPagination" :activeValue="options.showPagination" :returnValue="function(data){ options.showPagination = data}"/>\n              \n            </div>\n            \n            \x3c!--Search --\x3e\n            <div class="uip-grid-col-1-3">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.search}}</span></div>\n              <toggle-switch :options="showPagination" :activeValue="options.search" :returnValue="function(data){ options.search = data}"/>\n              \n            </div>\n          \n          \n          </template>\n          \x3c!--End settings section--\x3e\n          \n          \n        </div>\n      \n      </div>'},OrderBy={props:{returnData:Function,value:Object},data:()=>({strings:{order:__("Order","uipress-lite"),orderBy:__("Order by","uipress-lite"),metaKey:__("Meta key","uipress-lite")},options:{},orderByOptions:OrderByOptions,orderByOptionsUser:OrderByOptionsUser,orderByOptionsSites:OrderByOptionsSites}),watch:{options:{handler(){this.returnData(this.options)},deep:!0}},computed:{returnOrderOptions(){return"post"==this.options.type?this.orderByOptions:"user"==this.options.type?this.orderByOptionsUser:"site"==this.options.type?this.orderByOptionsSites:void 0},orderDirectionsOptions:()=>({DESC:{value:"DESC",label:__("Descending","uipress-lite")},ASC:{value:"ASC",label:__("Ascending","uipress-lite")}})},created(){this.options=this.value},template:'\n  \n  \n    <div class="uip-grid-col-1-3 uip-padding-left-xs">\n    \n     \x3c!--ORDER--\x3e\n     <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.order}}</span></div>\n     <div class="uip-position-relative">\n       <toggle-switch :options="orderDirectionsOptions" :activeValue="options.order" :returnValue="function(data){ options.order = data}"></toggle-switch>\n     </div>\n     \n     \x3c!--Orderby--\x3e\n     <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.orderBy}}</span></div>\n     <div class="uip-position-relative">\n       <select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p  uip-w-100p uip-border-rounder" style="padding-top:2px;padding-bottom:2px;border-radius:var(--uip-border-radius-large)" v-model="options.orderBy">\n         <template v-for="item in returnOrderOptions">\n           <option :value="item.value">{{item.label}}</option>\n         </template>\n       </select>\n     </div>\n     \n     \x3c!--Meta key--\x3e\n     <template v-if="options.orderBy == \'meta_value\'" >\n       <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.metaKey}}</span></div>\n       <div class="uip-position-relative">\n         <input type="text" min="0" class="uip-input uip-remove-steps uip-background-remove uip-padding-xxxs uip-flex-grow" v-model="options.orderBykEY">\n       </div>\n     </template>\n      \n    </div>\n  \n  \n  '},TaxQuery={props:{returnData:Function,value:Object},data:()=>({strings:{taxonomy:__("Taxonomy","uipress-lite"),taxValue:__("Tax value","uipress-lite"),field:__("Field","uipress-lite"),compare:__("Compare","uipress-lite"),includeChildren:__("Include children")},tax:{},comparisons:Comparisons,dataTypes:DataTypes,fieldTypes:FieldTypes}),watch:{tax:{handler(){this.returnData(this.tax)},deep:!0}},mounted(){this.tax=this.value},methods:{returnTaxPostTypes:e=>e.toString()},template:'\n  \n  \n    <div class="uip-grid-col-1-3 uip-padding-left-xs">\n    \n     \x3c!--tax key--\x3e\n     <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.taxonomy}}</span></div>\n     <div class="uip-flex uip-flex-center">\n     \n       <select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p  uip-w-100p uip-border-rounder" style="padding-top:2px;padding-bottom:2px;border-radius:var(--uip-border-radius-large)" v-model="tax.taxonomy">\n         <template v-for="item in uipApp.data.options.taxonomies">\n           <option :value="item.name">\n             {{item.label}} \n             ({{returnTaxPostTypes(item.object_type)}})\n           </option>\n         </template>\n       </select>\n       \n     </div>\n     \n     \x3c!--tax value--\x3e\n     <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.taxValue}}</span></div>\n     <div class="uip-flex uip-flex-center">\n       <input placeholder="term_1, term_2"\n       type="text" min="0" class="uip-input-small uip-w-100p" v-model="tax.value">\n     </div>\n     \n     \x3c!--Field type--\x3e\n     <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.field}}</span></div>\n     <div class="uip-flex uip-flex-center">\n       <select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p  uip-w-100p uip-border-rounder" style="padding-top:2px;padding-bottom:2px;border-radius:var(--uip-border-radius-large)" v-model="tax.fieldType">\n         <template v-for="item in fieldTypes">\n           <option :value="item.value">{{item.label}}</option>\n         </template>\n       </select>\n     </div>\n     \n     \x3c!--Compare--\x3e\n     <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.compare}}</span></div>\n     <div class="uip-flex uip-flex-center">\n       <select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p  uip-w-100p uip-border-rounder" style="padding-top:2px;padding-bottom:2px;border-radius:var(--uip-border-radius-large)" v-model="tax.compare">\n         <template v-for="item in comparisons">\n           <option :value="item.value">{{item.label}}</option>\n         </template>\n       </select>\n     </div>\n     \n     \x3c!--Include children--\x3e\n     <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.includeChildren}}</span></div>\n     <div class="uip-flex uip-flex-center">\n       <switch-select :args="{asText: true}" :activeValue="tax.includeChildren" :returnValue="(d)=>{ tax.includeChildren = d}"/>\n     </div>\n      \n    </div>\n  \n  \n  '},MetaQuery={props:{returnData:Function,value:Object},data:()=>({strings:{metaKey:__("Meta key","uipress-lite"),metaValue:__("Meta value","uipress-lite"),compare:__("Compare","uipress-lite"),type:__("Type","uipress-lite")},meta:{},comparisons:Comparisons,dataTypes:DataTypes}),watch:{meta:{handler(){this.returnData(this.meta)},deep:!0}},mounted(){this.meta=this.value},template:'\n  \n  \n    <div class="uip-grid-col-1-3 uip-padding-left-xs">\n    \n      \x3c!--Meta key--\x3e\n      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.metaKey}}</span></div>\n      <div class="uip-flex uip-flex-center">\n        <input type="text" min="0" class="uip-input uip-remove-steps uip-background-remove uip-padding-xxxs uip-width-100p" v-model="meta.key">\n      </div>\n    \n      \x3c!--Meta value--\x3e\n      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.metaValue}}</span></div>\n      <div class="uip-flex uip-flex-center">\n        <input type="text" min="0" class="uip-input uip-remove-steps uip-background-remove uip-padding-xxxs uip-width-100p" v-model="meta.value">\n      </div>\n      \n      \x3c!--Compare--\x3e\n      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.compare}}</span></div>\n      <div class="uip-flex uip-flex-center">\n        <select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p  uip-w-100p uip-border-rounder" style="padding-top:2px;padding-bottom:2px;border-radius:var(--uip-border-radius-large)" v-model="meta.compare">\n          <template v-for="item in comparisons">\n            <option :value="item.value">{{item.label}}</option>\n          </template>\n        </select>\n      </div>\n      \n      \x3c!--Compare--\x3e\n      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.type}}</span></div>\n      <div class="uip-flex uip-flex-center">\n        <select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p uip-w-100p uip-border-rounder" style="padding-top:2px;padding-bottom:2px;border-radius:var(--uip-border-radius-large)" v-model="meta.type">\n          <template v-for="item in dataTypes">\n            <option :value="item.value">{{item.label}}</option>\n          </template>\n        </select>\n      </div>\n      \n    </div>\n  \n  \n  '};export default{components:{ScreenControl:defineAsyncComponent(()=>import("../v3.5/utility/screen-control.min.js?ver=3.3.1")),PostTypeSelect:PostTypeSelect,QueryBuilder:QueryBuilder,MetaBuilder:MetaQuery,TaxBuilder:TaxQuery,OrderByBuilder:OrderBy,StatusTypeSelect:StatusTypeSelect,UserRoleSelect:UserRoleSelect},props:{returnData:Function,value:Object,blockSettings:Object,block:Object},data:()=>({open:!1,strings:{query:__("Query","uipress-lite"),editQuery:__("Edit query","uipress-lite"),add:__("Add","uipress-lite")},enabledDisabled:{false:{value:!1,label:__("Disabled","uipress-lite")},true:{value:!0,label:__("Enabled","uipress-lite")}}}),watch:{"block.query.enabled":{async handler(){this.block.query.enabled&&(await nextTick(),this.$refs.queryBuilder.show())},deep:!0}},computed:{returnQueryVal(){return"query"in this.block||(this.block.query={enabled:!1,settings:{}}),this.block.query.enabled},queryFillScreen(){return{component:"QueryBuilder",value:this.block.query.settings,label:this.strings.query,returnData:e=>{this.block.query.settings={...e}}}},emptyBlockQuery(){return!this.returnBlockQueryType&&!this.returnBlockQueryPerPage},returnBlockQueryType(){return!!this.hasNestedPath(this.block,["query","settings","type"])&&this.block.query.settings.type},returnBlockQueryPerPage(){return!!this.hasNestedPath(this.block,["query","settings","perPage"])&&this.block.query.settings.perPage},returnQueryPreviewText(){return this.emptyBlockQuery?this.strings.add:this.returnBlockQueryType+" | "+this.returnBlockQueryPerPage}},template:'\n  \n  \n    <div class="uip-grid-col-1-3">\n    \n      \x3c!--Enabled / disabled --\x3e\n      <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-text-s"><span>{{strings.query}}</span></div>\n      <toggle-switch :options="enabledDisabled" :activeValue="returnQueryVal" :returnValue="(d)=>{ block.query.enabled = d}"></toggle-switch>\n      \n      \x3c!--Spacer--\x3e\n      <div></div>\n      \n      \n      <dropdown v-if="returnQueryVal" pos="left center"\n      ref="queryBuilder"\n      :snapX="[\'#uip-block-settings\']"\n      class="uip-w-100p">\n      \n        <template #trigger>\n          \n          <div class="uip-background-muted uip-border-rounder uip-padding-xxs uip-flex uip-flex-center uip-gap-xs uip-cursor-pointer">\n          \n            <div class="uip-background-primary uip-text-inverse uip-border-round uip-padding-xxxs">\n              <span class="uip-icon">all_inclusive</span>\n            </div>\n            \n            \n            <div class="uip-no-wrap uip-flex uip-gap-xxs uip-flex-grow uip-flex-center">\n            \n              <span class="uip-text-muted" key="add">{{returnQueryPreviewText}}</span>\n              \n            </div>\n            \n            <a @click.prevent.stop="block.query.settings = {}"\n            class="uip-link-muted uip-padding-xxxs uip-border-rounder uip-text-s hover:uip-background-muted uip-icon">close</a>\n            \n          </div>\n          \n        </template>\n        \n        <template #content>\n        \n          <div class="uip-padding-s uip-w-260">\n            \n            <ScreenControl :startScreen="queryFillScreen" :homeScreen="queryFillScreen.component" :closer="$refs.queryBuilder.close" :showNavigation="true">\n              \n              <template #componenthandler="{ processScreen, currentScreen, goBack }">\n                <KeepAlive>\n                  <component @tab-change="(d)=>{fillTab = d}" @request-screen="(d)=>{processScreen(d)}" @go-back="goBack()"\n                  :returnData="currentScreen.returnData"\n                  :value="currentScreen.value"\n                  :args="currentScreen.args"\n                  v-bind="currentScreen.attributes"\n                  :is="currentScreen.component"/>\n                </KeepAlive>\n              </template>\n              \n            </ScreenControl>\n          \n          </div>\n          \n        </template>\n      \n      \n      </dropdown>\n    </div>\n  \n  \n  '};