const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;import{defineAsyncComponent,nextTick}from"../../libs/vue-esm-dev.js";export function moduleData(){return{components:{colorBox:defineAsyncComponent(()=>import("../v3.5/utility/color-box.min.js?ver=3.2.12")),backgroundFill:defineAsyncComponent(()=>import("./uip-background-fill.min.js?ver=3.2.12")),screenControl:defineAsyncComponent(()=>import("../v3.5/utility/screen-control.min.js?ver=3.2.12")),ColorPicker:defineAsyncComponent(()=>import("../v3.5/styles/color-picker.min.js?ver=3.2.12")),colourStyleEditor:defineAsyncComponent(()=>import("../v3.5/styles/color-style-editor.min.js?ver=3.2.12")),imageBGSelect:defineAsyncComponent(()=>import("./uip-image-select.min.js?ver=3.2.12")),borderDesigner:defineAsyncComponent(()=>import("./uip-border-designer.min.js?ver=3.2.12")),shadowDesigner:defineAsyncComponent(()=>import("./uip-shadow-designer.min.js?ver=3.2.12")),outlineDesigner:defineAsyncComponent(()=>import("./uip-outline-designer.min.js?ver=3.2.12"))},props:{returnData:Function,value:Object},data:function(){return{styles:{opacity:1,overflow:"visible",fill:{},backgroundImage:{},outline:{},borders:[],shadows:[],radius:{sync:!0,topleft:"",topright:"",bottomleft:"",bottomright:"",units:"px"}},fillTab:__("Colour","uipress-lite"),strings:{opacity:__("Opacity","uipress-lite"),overflow:__("Overflow","uipress-lite"),fill:__("Fill","uipress-lite"),background:__("Background","uipress-lite"),backgroundImage:__("Background image","uipress-lite"),border:__("Border","uipress-lite"),addImage:__("Add image","uipress-lite"),shadow:__("Shadow","uipress-lite"),radius:__("Radius","uipress-lite"),topleft:__("Top left","uipress-lite"),topright:__("Top right","uipress-lite"),bottomleft:__("Bottom left","uipress-lite"),bottomright:__("Bottom right","uipress-lite"),outline:__("Outline","uipress-lite")},overflowOptions:[{value:"visible",label:__("Visible","uipress-lite")},{value:"auto",label:__("Auto","uipress-lite")},{value:"hidden",label:__("Hidden","uipress-lite")},{value:"scroll",label:__("Scroll","uipress-lite")}],spacingOptions:{0:{value:"0",label:"0",tip:__("Remove","uipress-lite")},XS:{value:"XS",label:"XS",tip:__("Extra small","uipress-lite")},S:{value:"S",label:"S",tip:__("Small","uipress-lite")},M:{value:"M",label:"M",tip:__("Medium","uipress-lite")},L:{value:"L",label:"L",tip:__("Large","uipress-lite")},XL:{value:"XL",label:"XL",tip:__("Extra large","uipress-lite")},custom:{value:"custom",icon:"more_vert",tip:__("Custom","uipress-lite")}}}},inject:["uipress"],created:function(){this.formatValue(this.value)},watch:{styles:{handler(e,n){this.returnData(this.styles)},deep:!0}},computed:{returnFillStyle(){if(!("value"in this.styles.fill))return;if(!this.styles.fill.value)return;let e=this.styles.fill.value;return e.includes("--")?`background:var(${e})`:`background:${e}`},returnOutlineStyle(){if(!this.styles.outline.color)return;if(!("value"in this.styles.outline.color))return;if(!this.styles.outline.color.value)return;let e=this.styles.outline.color.value;return e.includes("--")?`background:var(${e})`:`background:${e}`},returnFillValue(){return"value"in this.styles.fill&&this.styles.fill.value?this.styles.fill.value:""},returnStyles(){return this.styles},blockFillScreen(){return{component:"backgroundFill",value:this.returnStyles.fill,label:this.fillTab,returnData:e=>{this.styles.fill=e}}},outlineScreen(){return{component:"outlineDesigner",value:this.returnStyles.outline,label:this.strings.outline,returnData:e=>{this.styles.outline=e}}},returnBackgroundImage(){let e=this.styles.backgroundImage.url;return e?`background-size:cover;background-image: url(${e})`:""}},methods:{borderScreen(e,n){return{component:"borderDesigner",value:e,label:this.strings.border,returnData:e=>{this.styles.borders[n]=e}}},shadowScreen(e,n){return{component:"shadowDesigner",value:e,label:this.strings.shadow,returnData:e=>{this.styles.shadows[n]=e}}},formatValue(e){if(void 0!==e)return this.uipress.isObject(e)?("opacity"in e&&(this.styles.opacity=e.opacity),"overflow"in e&&(this.styles.overflow=e.overflow),"borders"in e&&(this.styles.borders=e.borders),"outline"in e&&(this.styles.outline=e.outline),"fill"in e&&(this.styles.fill={...this.styles.fill,...e.fill}),"backgroundImage"in e&&(this.styles.backgroundImage={...this.styles.backgroundImage,...e.backgroundImage}),"radius"in e&&(this.styles.radius={...this.styles.radius,...e.radius}),void("shadows"in e&&(this.styles.shadows=e.shadows))):void 0},returnBorderColor(e){let n=e.color,i="";return n&&n.value&&(i=n.value.includes("--")?"background-color:var("+n.value+");":"background-color:"+n.value),i},returnShadowColor(e){let n=e.color,i="";return n&&n.value&&(i=n.value.includes("--")?"background-color:var("+n.value+");":"background-color:"+n.value),i}},template:'\n    \n    \n    <div class="uip-flex uip-flex-column uip-row-gap-xs">\n    \n    \n      \x3c!--Opacity --\x3e\n      <div class="uip-grid-col-1-3">\n      \n        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.opacity}}</span></div>\n        \n        <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n        \n          <input type="number" class="uip-input uip-padding-xxxs uip-w-50p uip-border-rounder" style="border-radius:var(--uip-border-radius-large)" v-model="styles.opacity">\n          \n          <input type="range" min="0" max="1" v-model="styles.opacity" step="0.1" class="uip-range uip-w-50p">\n      \n        </div>\n        \n      </div>\n      \n      \n      \x3c!--Fill --\x3e\n      <div class="uip-grid-col-1-3">\n      \n        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.fill}}</span></div>\n        \n        <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n        \n          \n          <dropdown pos="left center" :offsetX="130" ref="fillDrop" class="uip-w-100p">\n            <template #trigger>\n              <colorBox :backgroundStyle="returnFillStyle" :text="returnFillValue" :remove="()=>{styles.fill = {}}"/>\n            </template>\n            <template #content>\n            \n              <div class="uip-padding-s uip-w-240">\n              \n                <screenControl :startScreen="blockFillScreen" :homeScreen="blockFillScreen.component" :closer="$refs.fillDrop.close" :showNavigation="true">\n                  \n                  <template #componenthandler="{ processScreen, currentScreen, goBack }">\n                    <KeepAlive>\n                      <component @tab-change="(d)=>{fillTab = d}" @request-screen="(d)=>{processScreen(d)}" @go-back="goBack()"\n                      :returnData="currentScreen.returnData"\n                      :value="currentScreen.value"\n                      :args="currentScreen.args"\n                      :is="currentScreen.component"/>\n                    </KeepAlive>\n                  </template>\n                  \n                </screenControl>\n              </div>\n              \n            </template>\n          </dropdown>\n        \n      \n        </div>\n        \n      </div>\n      \n      \n      \x3c!--BackgroundImage --\x3e\n      <div class="uip-grid-col-1-3">\n      \n        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.background}}</span></div>\n        \n        <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n        \n          <dropdown pos="left center" :offsetX="130" ref="backgroundDrop" class="uip-w-100p">\n            <template #trigger>\n              <colorBox :backgroundStyle="returnBackgroundImage" :text="styles.backgroundImage.url" :remove="()=>{styles.backgroundImage = {}}"/>\n            </template>\n            <template #content>\n            \n              <div class="uip-padding-s uip-w-240 uip-flex uip-flex-column uip-row-gap-s">\n              \n                <div class="uip-flex uip-flex-between uip-flex-center">\n                  <div class="uip-text-emphasis uip-text-bold uip-text-s">{{strings.backgroundImage}}</div>\n                  \n                  <div @click="$refs.backgroundDrop.close()" class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                    <span class="uip-icon">close</span>\n                  </div>\n                </div>\n                \n                <imageBGSelect :value="styles.backgroundImage" :returnData="function(d){styles.backgroundImage = d}"/>\n                \n              </div>\n              \n            </template>\n            \n          </dropdown>  \n          \n        \n        </div>\n        \n      </div>\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \x3c!--Radius --\x3e\n      <div class="uip-grid-col-1-3">\n      \n        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.radius}}</span></div>\n        \n        <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-right uip-flex-column uip-row-gap-xs">\n        \n          <div class="uip-flex uip-flex-row uip-gap-xxxs uip-flex-right">\n          \n            <div class="uip-flex uip-flex-row uip-padding-xxxs uip-background-muted uip-border-rounder">\n              <div class="uip-icon uip-icon-m uip-text-xl uip-link-muted uip-border-rounder" @click="styles.radius.sync = true"\n              :class="{\'uip-background-default uip-text-emphasis\' : styles.radius.sync}">crop_square</div>\n              <div class="uip-icon uip-icon-m uip-text-xl uip-link-muted uip-border-rounder" @click="styles.radius.sync = false"\n              :class="{\'uip-background-default uip-text-emphasis\' : !styles.radius.sync}">crop_free</div>\n            </div>\n            \n            <div class="uip-flex uip-flex-row uip-padding-xxs uip-background-muted uip-border-round uip-text-center uip-flex-grow" v-if="styles.radius.sync">\n                <input class="uip-blank-input uip-text-center uip-w-100p uip-text-s" v-model="styles.radius.topleft" >\n            </div>\n            \n            <div class="uip-background-muted uip-border-round">\n             <units-select :value="styles.radius.units" :returnData="function(e){styles.radius.units = e}"></units-select>\n            </div>\n          \n          </div>\n        \n        </div>  \n        \n        \x3c!--Spacer--\x3e\n        <div v-if="!styles.radius.sync"></div>\n        \n        \n        <div class="uip-flex uip-flex-row uip-gap-xxxs uip-flex-right" v-if="!styles.radius.sync">\n        \n          <div class="uip-flex uip-flex-row uip-gap-xxxs uip-flex-right">\n            \n              <uip-tooltip :message="strings.topleft" :delay="0" containerClass="uip-flex">\n                <div class="uip-flex uip-flex-row uip-padding-xxs uip-background-muted uip-border-rounder uip-text-center">\n                    <input class="uip-blank-input uip-text-center uip-w-28 uip-text-s" v-model="styles.radius.topleft" >\n                </div>\n              </uip-tooltip>\n              \n              <uip-tooltip :message="strings.topright" :delay="0" containerClass="uip-flex">\n                <div class="uip-flex uip-flex-row uip-padding-xxs uip-background-muted uip-border-rounder uip-text-center">\n                    <input class="uip-blank-input uip-text-center uip-w-28 uip-text-s" v-model="styles.radius.topright" >\n                </div>\n              </uip-tooltip>\n              \n              <uip-tooltip :message="strings.bottomleft" :delay="0" containerClass="uip-flex">\n                <div class="uip-flex uip-flex-row uip-padding-xxs uip-background-muted uip-border-rounder uip-text-center">\n                    <input class="uip-blank-input uip-text-center uip-w-28 uip-text-s" v-model="styles.radius.bottomleft" >\n                </div>\n              </uip-tooltip>\n              \n              <uip-tooltip :message="strings.bottomright" :delay="0" containerClass="uip-flex">\n                <div class="uip-flex uip-flex-row uip-padding-xxs uip-background-muted uip-border-rounder uip-text-center" >\n                    <input class="uip-blank-input uip-text-center uip-w-28 uip-text-s" v-model="styles.radius.bottomright" >\n                </div>\n              </uip-tooltip>\n            \n          </div>\n          \n        </div>\n        \n      </div>\n      \n      \n      \x3c!--Overflow --\x3e\n      <div class="uip-grid-col-1-3">\n      \n        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.overflow}}</span></div>\n        \n        <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n        \n          <select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p  uip-w-100p uip-border-rounder" style="padding-top:2px;padding-bottom:2px;border-radius:var(--uip-border-radius-large)" v-model="styles.overflow">\n            <template v-for="item in overflowOptions">\n              <option :value="item.value">{{item.label}}</option>\n            </template>\n          </select>\n      \n        </div>\n        \n      </div>\n      \n      \n      \n      \x3c!--Border --\x3e\n      <div class="uip-grid-col-1-3">\n      \n        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-flex-start uip-padding-top-xxs"><span>{{strings.border}}</span></div>\n        \n        <div class="uip-flex uip-flex-column uip-row-gap-xs">\n        \n          <template v-for="(border, index) in styles.borders">\n          \n            <div class="uip-flex uip-gap-xs uip-row-gap-xs uip-flex-center">\n            \n                <dropdown pos="left center" class="uip-w-100p" :ref="\'borderDrop-\'+index" :offsetX="130">\n                  <template v-slot:trigger>\n                  \n                    <colorBox :backgroundStyle="returnBorderColor(border, index)" :text="border.style" :remove="()=>{styles.borders.splice(index, 1)}"/>\n                    \n                  </template>\n                  <template v-slot:content>\n                  \n                    <div class="uip-padding-s uip-w-240">\n                      <screenControl :startScreen="borderScreen(border, index)" :homeScreen="borderScreen(border, index).component"\n                      :closer="$refs[\'borderDrop-\'+index][0].close" :showNavigation="true">\n                        \n                        <template #componenthandler="{ processScreen, currentScreen, goBack }">\n                          <KeepAlive>\n                            <component @tab-change="(d)=>{fillTab = d}" @request-screen="(d)=>{processScreen(d)}" @go-back="goBack()"\n                            :returnData="currentScreen.returnData"\n                            :value="currentScreen.value"\n                            :args="currentScreen.args"\n                            :is="currentScreen.component"/>\n                          </KeepAlive>\n                        </template>\n                        \n                      </screenControl>\n                    </div>  \n                    \n                  </template>\n                </dropdown>\n                \n              \n              </div>\n          \n          </template>\n          \n          <button \n          class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-line-height-1" \n          @click="styles.borders.push({})">add</button>\n          \n        </div>\n        \n      \n      </div>\n      \n      \n      \x3c!--Shadows --\x3e\n      <div class="uip-grid-col-1-3">\n      \n        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s uip-flex-start uip-padding-top-xxs"><span>{{strings.shadow}}</span></div>\n        \n        <div class="uip-flex uip-flex-column uip-row-gap-xs">\n        \n          <template v-for="(shadow, index) in styles.shadows">\n          \n            <div class="uip-flex uip-gap-xs uip-row-gap-xs uip-flex-center">\n            \n                <dropdown pos="left center" class="uip-w-100p" :ref="\'shadowDrop-\'+index" :offsetX="130">\n                  <template v-slot:trigger>\n                  \n                    <colorBox :backgroundStyle="returnShadowColor(shadow)" :text="shadow.position" :remove="()=>{styles.shadows.splice(index, 1)}"/>\n                    \n                  </template>\n                  <template v-slot:content>\n                  \n                    <div class="uip-padding-s uip-w-240">\n                      <screenControl :startScreen="shadowScreen(shadow, index)" :homeScreen="shadowScreen(shadow, index).component"\n                      :closer="$refs[\'shadowDrop-\'+index][0].close" :showNavigation="true">\n                        \n                        <template #componenthandler="{ processScreen, currentScreen, goBack }">\n                          <KeepAlive>\n                            <component @tab-change="(d)=>{fillTab = d}" @request-screen="(d)=>{processScreen(d)}" @go-back="goBack()"\n                            :returnData="currentScreen.returnData"\n                            :value="currentScreen.value"\n                            :args="currentScreen.args"\n                            :is="currentScreen.component"/>\n                          </KeepAlive>\n                        </template>\n                        \n                      </screenControl>\n                    </div>  \n                    \n                  </template>\n                </dropdown>\n                \n              \n              </div>\n          \n          </template>\n          \n          <button \n          class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted uip-line-height-1" \n          @click="styles.shadows.push({})">add</button>\n          \n        </div>\n        \n      \n      </div>\n      \n      \n      \n      \n      \x3c!--Fill --\x3e\n      <div class="uip-grid-col-1-3">\n      \n        <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.outline}}</span></div>\n        \n        <div class="uip-flex uip-gap-xs uip-flex-no-wrap uip-flex-center">\n        \n          \n          <dropdown pos="left center" :offsetX="130" ref="outlineDrop" class="uip-w-100p">\n            <template #trigger>\n              <colorBox :backgroundStyle="returnOutlineStyle" :text="styles.outline.style" :remove="()=>{styles.outline = {}}"/>\n            </template>\n            <template #content>\n            \n              <div class="uip-padding-s uip-w-240">\n              \n                <screenControl :startScreen="outlineScreen" :homeScreen="outlineScreen.component" :closer="$refs.outlineDrop.close" :showNavigation="true">\n                  \n                  <template #componenthandler="{ processScreen, currentScreen, goBack }">\n                    <KeepAlive>\n                      <component @tab-change="(d)=>{fillTab = d}" @request-screen="(d)=>{processScreen(d)}" @go-back="goBack()"\n                      :returnData="currentScreen.returnData"\n                      :value="currentScreen.value"\n                      :args="currentScreen.args"\n                      :is="currentScreen.component"/>\n                    </KeepAlive>\n                  </template>\n                  \n                </screenControl>\n              </div>\n              \n            </template>\n          </dropdown>\n        \n      \n        </div>\n        \n      </div>\n      \n      \n      \n      \n      \n    \n    </div>\n    \n    '}};