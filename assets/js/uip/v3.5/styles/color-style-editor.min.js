import{defineAsyncComponent}from"../../../libs/vue-esm.js";export default{components:{colorPicker:defineAsyncComponent(()=>import("./color-picker.min.js?ver=0.0.1"))},props:{value:Object,returnData:[Function,Boolean]},data:()=>({mode:"value",strings:{styleName:__("Style name","uipress-lite"),create:__("Create","uipress-lite")},color:{},updating:!1,colorModes:{value:{value:"value",icon:"light_mode",tip:__("Light mode","uipress-lite")},darkValue:{value:"darkValue",icon:"dark_mode",tip:__("Dark mode","uipress-lite")}}}),watch:{value:{handler(){this.updating||this.injectProp()},immediate:!0,deep:!0},"color.name":{handler(){this.color.name=this.cleanKeyName(this.color.name)}},"uipApp.data.userPrefs.darkTheme":{handler(){this.updateDefaultColorState()},deep:!0}},mounted(){this.updateDefaultColorState()},computed:{returnColor(){if(!this.color.value&&!this.color.darkValue){const e=getComputedStyle(document.documentElement).getPropertyValue(this.color.name).trim();return e||"#b500ff"}return this.color[this.mode]?this.color[this.mode]:"#b500ff"}},methods:{async injectProp(){this.updating=!0,this.color=this.isObject(this.value)?this.value:{},await this.$nextTick(),this.updating=!1},updateDefaultColorState(){this.uipApp.data.userPrefs.darkTheme||(this.mode="value"),this.uipApp.data.userPrefs.darkTheme&&(this.mode="darkValue")},cleanKeyName(e){return e=(e=(e=(e=(e=e.replace(" ","-")).replace(",","")).replace(".","")).replace(/[`~!@#$%^&*()|+\=?;:'",.<>\{\}\[\]\\\/]/gi,"")).toLowerCase(),e=this.ensureDoubleDashPrefix(e)},ensureDoubleDashPrefix:e=>e?e.startsWith("--")?e:e.startsWith("-")?"--"+e.slice(1):"--"+e:"--",setColorStyle(){this.returnData(this.color)}},template:'\n  \n\t  <div class="uip-flex uip-flex-column uip-row-gap-s" ref="colorpicker">\n    \n\t\t<input :disabled="!color.user" class="uip-input uip-flex-grow" type="text" v-model="color.name" :placeholder="strings.styleName" autofocus>\n\t\t\n\t\t<toggle-switch :activeValue="mode" :options="colorModes" :returnValue="(d)=>{mode = d}"/>\n\t\t\n\t\t<colorPicker :value="returnColor" :returnData="(d) => { color[mode] = d }" :args="{hasStyleManager:false}"/>\n\t\t\n\t\t<button v-if="returnData" @click="setColorStyle" class="uip-button-primary" :disabled="!color.name">{{strings.create}}</button>\n\t\t\n\t  </div>\n\t\t'};