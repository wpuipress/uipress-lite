export default{props:{aboveClick:Boolean,disableTeleport:Boolean,offsetY:{default:0,type:Number},offsetX:{default:0,type:Number}},data:()=>({isVisible:!1,position:{y:0,x:0}}),methods:{show(i,t){let e=i;t&&(e=t),this.position.x=e.clientX+this.offsetX,this.position.y=e.clientY+this.offsetY,this.isVisible=!0,requestAnimationFrame(()=>{this.isVisible&&(this.setupClickOutside(),this.checkForOffScreen())})},checkForOffScreen(){let i=this.$refs.contextmenu.getBoundingClientRect(),t=i.bottom,e=i.right;t>window.innerHeight&&(this.position.y=this.position.y-(t-window.innerHeight)-20),e>window.innerWidth&&(this.position.x=this.position.x-(e-window.innerWidth)-40)},close(){this.removeClickOutside(),this.isVisible=!1},setupClickOutside(){document.addEventListener("click",this.onClickOutside),document.addEventListener("contextmenu",this.onClickOutside)},removeClickOutside(){document.removeEventListener("click",this.onClickOutside),document.removeEventListener("contextmenu",this.onClickOutside)},onClickOutside(i){this.$refs.contextmenu&&this.$refs.contextmenu.contains(i.target)||this.close()},returnPosition(){if(!this.aboveClick)return`top: ${this.position.y}px; left: ${this.position.x}px`;let i=window.innerHeight-this.position.y;return this.aboveClick?`bottom: ${i}px; left: ${this.position.x}px`:void 0}},template:'\n  \n\t<teleport to="body" :disabled="disableTeleport">\n\t  <div v-if="isVisible" ref="contextmenu" style="border-radius:calc(var(--uip-border-radius-large) + var(--uip-padding-xs));"\n\t  :style="returnPosition()"\n\t  class="uip-background-default uip-flex uip-flex-column uip-text-normal uip-position-fixed uip-modal-body uip-z-index-99 uip-shadow uip-fade-in uip-body-font">\n\t\t  <slot></slot>\n\t  </div>\n\t</teleport>\n  \n\t\t'};