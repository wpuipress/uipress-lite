export default{data:()=>({notifications:[]}),mounted(){this.uipApp.notifications=this},methods:{notify(t,i,n,e,s){return e=void 0===e||e,this.create({title:t,status:n,message:i,dismissable:e,loader:s})},create(t={}){if(t.uid=this.createUID(),this.notifications.push(t),!t.dismissable)return t.uid;setTimeout(()=>this.remove(t.uid),6e3)},remove(t){const i=this.notifications.findIndex(i=>i.uid==t);i>-1&&this.notifications.splice(i,1)},returnIcon(t){let i="info";return"success"==t&&(i="done"),"error"==t&&(i="close"),"warning"==t&&(i="priority_high"),i},returnClass:t=>t?"uip-"+t:"uip-default"},template:'\n  \t\t\n      <Teleport to="body">\n\t  \n\t  \t<div class="notification-drop uip-dark-mode uip-text-normal" id="notification-drop">\n\t\t\n\t  \t\t<component is="style">\n\t\t\t\t.list-enter-active,\n\t\t\t\t.list-leave-active {\n\t\t  \t\ttransition: all 0.5s ease;\n\t\t\t\t}\n\t\t\t\t.list-enter-from,\n\t\t\t\t.list-leave-to {\n\t\t  \t\topacity: 0 !important;\n\t\t  \t\ttransform: translateX(30px);\n\t\t\t\t}\n\t  \t\t</component>\n\t  \t\t\n\t  \t\t\n\t  \t\t<TransitionGroup name="list">\n\t  \t\t\n\t\t\t\t<template v-for="(notification, index) in notifications" :key="index">\n\t\t\t\t\n\t\t  \t\t\t<div class="uip-notification" :class="returnClass(notification.status)">\n\t\t  \t\t\t\n\t\t\t\t\t\t<div class="uip-flex uip-gap-s uip-flex-center">\n\t\t\t\t\t\t\n\t\t\t  \t\t\t<div class="uip-border-rounder uip-notification-status uip-flex uip-flex-middle uip-padding-xxxs uip-flex-center">\n\t\t\t\t\t\t\t<span class="uip-text-inverse uip-text-center uip-icon"> {{ returnIcon(notification.status) }} </span>\n\t\t\t  \t\t\t</div>\n\t\t\t  \t\t\t\n\t\t\t  \t\t\t<div class="uip-flex-grow uip-column-gap-xs">\n\t\t\t\t\t\t\t<div class="uip-text-emphasis uip-text-emphasis">{{notification.title}}</div>\n\t\t\t\t\t\t\t<div v-if="notification.message" class="uip-text-s uip-text-muted uip-max-w-500">{{notification.message}}</div>\n\t\t\t  \t\t\t</div>\n\t\t\t  \t\t\t\n\t\t\t  \t\t\t<div v-if="notification.loader" class="uip-position-relative" >\n\t\t\t\t\t\t\t<span class="uip-load-spinner" ></span>\n\t\t\t  \t\t\t</div>\n\t\t\t  \t\t\t\n\t\t\t  \t\t\t<div v-if="notification.dismissable" class="uip-link-muted uip-background-default uip-padding-xxs uip-border-rounder" \n\t\t\t  \t\t\t@click="remove(notification.uid)">\n\t\t\t\t\t\t\t<span class="uip-icon">close</span>\n\t\t\t  \t\t\t</div>\n\t\t\t  \t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t  \t\t\t</div>\n\t\t\t\t\n\t\t\t\t</template>\n\t  \t\t\n\t  \t\t</TransitionGroup>\n\t  \t\n\t\t</div>\n\t\t\n\t</Teleport>\n\t\t'};