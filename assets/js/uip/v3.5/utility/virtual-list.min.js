const passiveSupportMixin={methods:{doesBrowserSupportPassiveScroll(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(e){t=!1}return t}}};export default{mixins:[passiveSupportMixin],props:{allItems:{type:Array,required:!0},containerClass:{type:String,required:!1},rootHeight:{type:Number,required:!1,default:300},startRowHeight:{type:Number,required:!1,default:10},perRow:{type:Number,required:!1,default:1}},data(){return{scrollTop:0,nodePadding:20,rowHeight:this.startRowHeight}},computed:{viewportHeight(){return this.itemCount*this.rowHeight},startIndex(){let t=Math.floor(this.scrollTop/this.rowHeight)-this.nodePadding;return Math.max(0,t)},visibleNodeCount(){let t=Math.ceil(this.rootHeight/this.rowHeight)+2*this.nodePadding;return Math.min(this.itemCount-this.startIndex,t)},visibleItems(){return this.allItems.slice(this.startIndex*this.perRow,(this.startIndex+this.visibleNodeCount)*this.perRow)},itemCount(){return Math.ceil(this.allItems.length/this.perRow)},offsetY(){return this.startIndex*this.rowHeight},spacerStyle(){return{transform:`translateY(${this.offsetY}px)`}},viewportStyle(){return{overflow:"hidden",height:`${this.viewportHeight}px`,position:"relative"}},rootStyle(){return{height:`${this.rootHeight}px`,overflow:"auto"}}},methods:{handleScroll(t){this.scrollTop=this.$refs.root.scrollTop},calculateInitialRowHeight(){const t=this.$refs.spacer.children;if(!t||!t.length)return this.startRowHeight;const e=t[0].getBoundingClientRect().height;return console.log(e),e}},async mounted(){await this.$nextTick();const t=this.calculateInitialRowHeight();this.rowHeight=t||this.startRowHeight;const e=!!this.doesBrowserSupportPassiveScroll()&&{passive:!0};this.$refs.root.addEventListener("scroll",this.handleScroll,e)},beforeUnmount(){this.$refs.root.removeEventListener("scroll",this.handleScroll)},template:'\n\t<div @scroll="handleScroll" class="root" ref="root" :style="rootStyle">\n\t  <div ref="viewport" :style="viewportStyle">\n\t  \n\t\t  <div :class="containerClass" ref="spacer" :style="spacerStyle" class="tester">\n\t\t    <template v-for="item in visibleItems">\n\t\t\t    <slot name="item" :item="item"></slot>\n\t\t    </template>\n\t\t  </div>\n\t\t  \n\t  </div>\n\t</div>\n  '};